import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
#------------------------------------------------------------
# Sourced From Online Templates And Guides
#------------------------------------------------------------
# License: GPL (http://www.gnu.org/licenses/gpl-3.0.html)
# Based on code from youtube addon
#
# Thanks To: Google Search For This Template
# Modified: Pulse
#------------------------------------------------------------
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import os
import sys
import plugintools
import xbmc , xbmcaddon
from addon . common . addon import Addon
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
Iiii1iI = 'plugin.video.now_music'
Oo000oO0oo = Addon ( Iiii1iI , sys . argv )
OO00oo0o0O0oo = xbmcaddon . Addon ( id = Iiii1iI )
OOo0O = OO00oo0o0O0oo . getAddonInfo ( 'icon' )
if 66 - 66: iiIi1IiI + oO0o0 + i11Ii
xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
if 40 - 40: IiI1ii1IIiI1 - oO0O
O0o00O0oOooO = "PL_34_m4eTlaMSONcN_P4r5QFAWAwkngbX"
oOooOOoOO = "PL_34_m4eTlaOeNd6fP9MspKqh9ksDiNtm"
oO00ooo0o0OO = "PLLK5DjpAskR68KFNnVgvq5mZHEXTQIyX7"
iI11I1iiI1i = "PL_34_m4eTlaOFcXryY7OFbYGtK5Y1JoIa"
Iiii = "PL_34_m4eTlaOtJMirQzXvOoAwdechWbhF"
O0000O = "PL_34_m4eTlaMf-42RHro2x2UVMHNEkLvD"
O000Ooo0o0OOo = "PL_34_m4eTlaN5Dj1kIzrJMX95HRBLqeQr"
OoO0oooOoO0 = "PL1659BED42584319F"
OO0O0 = "PL8FA9A7569EBB5E4A"
ii1i1ii1I = "PL_34_m4eTlaPzdgA9RG_BlIImsUwCVkzy"
o0o0000O0 = "PL_34_m4eTlaNHt6GM5dOnraJ2zdE4R2Z_"
oO0O0o0ooO = "PLO47Lo58fyaJTRmPSH3eIx4R92WngXEeu"
i1IiI1iii = "PLBB7D0AF873F8FAEA"
iii1II = "PL912C2772F94A73F9"
I111i11I1I = "PL_IGfDhmSGBMtrZrP0X440vgv5iBRfhy4"
i11ii = "PL6CDBDD2A3C0D55A5"
o0O0oO0 = "PLziBTZqySBRFOFOwbSuPn4GtockoGot7k"
IIIi1111iI = "PLDouWbMQEftHiTge92lMQFgbNVUCBlP8E"
iiIIiiiI11 = "PLDouWbMQEftFRzud9bJO0Yg03R6TaJoL3"
O00O000 = "PLDouWbMQEftHqrKjdu7cFSACIudT2n5Il"
O0OOO = "PL_34_m4eTlaNLsqqXEC3D-QPlMpgGqrFy"
iIi11iI1ii1I = "PL6A8E66F870D64825"
OOoOO = "PL_34_m4eTlaMDLrSesIGNfArzdqbV9PtO"
ii = "PL_34_m4eTlaOcF4HOTM5_u7WEz5UOknPc"
OoooO0O = "PL_34_m4eTlaP6n2tYDBKamuvoQDo89a97"
o00OoOOO0O = "PL_34_m4eTlaOoOkgbOgS93OFQ9QxTPJYP"
Ii1I1 = "PL_34_m4eTlaMBcJhd_fEj-QBpb8P89F28"
I1i1iI = "PL_34_m4eTlaN1pIJXJpatZyWCnQgPr_nU"
O0OO0OO = "PL_34_m4eTlaOh7AX4GJRnnxKgJ5n9_V-M"
oO0ooO0OooOOo = "PL_34_m4eTlaMnTgbpMYRKfReUqZw1LRuJ"
oO00OoOo = "PLuDr0us3k-BveJdm67f8SlDt87aRtyZ2r"
Iii11IiI11i = "PL_34_m4eTlaMMi2E-nHwk4OdRi3OJQ78b"
oo0O0 = "PL_34_m4eTlaMO4Mz_dWge1XC9K2uhXThR"
Ii11 = "PL_34_m4eTlaPl5bRHTsf1kogkcS80LiEi"
I11Iii11i1Ii1 = "PL1F0D80E99F7850E5"
iiII = "PL_34_m4eTlaOryUpz8B44gf1tyxsyEJL1"
oooO = "PLDouWbMQEftGj0O3468TrleWCTMTJrS20"
iII1I1I = "PLDouWbMQEftGzuFV8LqaBidN4Nr3WGWLk"
OO00Ooo0o = "PL_34_m4eTlaPcjuqnypKfhVVpHKmT4yxH"
oO = "PL_34_m4eTlaOg18XvgjqGTvFtX26QqIui"
ii1iI111iIi1 = "PL_34_m4eTlaOakp50tDGnTQ2fwt4U8ewy"
O0O = "PL_34_m4eTlaM_-9ciPXJA33ncF322YWA5"
Oo = "PL_34_m4eTlaPSdTUlEYBLM4ewrck1RDvh"
oOo0oo0 = "PLwNBYqY3GP2f9DZr6XdDgW8VwyPEX9bm7"
oOOooo00Oooo = "PLMw8cPF2uPc6eneUtoFamsrvGGZlF2uqL"
Ooo = "PLDouWbMQEftEHpZkhMpIwlWz1iE96HbQq"
oOo = "PLDouWbMQEftFtfaMjEM-9IjipNjw7qJ5W"
ii1I1Iii = "PLDouWbMQEftH195uyZ0SlBVSznM61I8J3"
o0OoO0o = "PLDouWbMQEftHe0rKzAJPb7MGltCPtFxNs"
i1Ii1II = "PLgK4BjZPsT825ISNA4dWqsnUuUQEfHZEu"
iI1I1 = "PLDouWbMQEftHJSvaRvBzvFZ4S34kucnwl"
i1iIii = "PLDouWbMQEftF5HyM_lheKxX38sRZdcdfR"
oo0OOO0O = "PLDouWbMQEftEasB5KoU8faJqOQVCOq810"
ii1i1i1 = "PLDouWbMQEftEcdNjhvM5YeVvXSl9nxOaU"
I1IIi1 = "PL8Mowahw6-au9odO_rwNnWcxgdTdNVr_3"
o0OO = "PLDouWbMQEftF-RQMo2YsYzrR_ZByg947D"
Oo0oOOOO = "PLDouWbMQEftEcdNjhvM5YeVvXSl9nxOaU"
o0000OO = "PLDouWbMQEftEDrxxz3VoXIEfiQbYeOJ2l"
i1I1ii1ii = "PLDouWbMQEftEAJUcUYopDaqCbcmMIlIMl"
i1Iii1II = "PLDouWbMQEftHqvpVkKeBiPszLECporRWe"
o0O0ooo0o00 = "PLDouWbMQEftEvDn_oWxYCOOcbLk86TJTV"
Ii1I1I = "PLDouWbMQEftGij9_IK8pIwRZ9wf0rcYc9"
Iii111i = "PLDouWbMQEftFRdgKkRkFOvCi69YxICjzI"
ooO00OoOOoO = "PLDouWbMQEftEEeKB6GcLaDQbypvob4e10"
iII = "PLDouWbMQEftHfSufbFaP1N5UvSZwuBQxj"
O0O0oO = "PLDouWbMQEftEXRa9q30waTahj7mpRrttU"
OOo0oo = "PLDouWbMQEftEylNuZbUaDdnjEVb4K8NXk"
i1ii1 = "PLDouWbMQEftFPAozxK35cermZl8JmEm6w"
iI1111I = "PLDouWbMQEftH05DjkYFT35ubDtJ9-EDAQ"
i11i1 = "PLDouWbMQEftFLmCbJNnxBqo925x89tJci"
iI1 = "PLDouWbMQEftE3cvxvmmZbmb5LHFSqquC2"
o00000OOo = "PLDouWbMQEftHVApkssY45f20pBKQkubda"
o00O0 = "PLDouWbMQEftE3qNQFpHbwtds_fClgrosx"
OO0OOO0oooOoo = "PLDouWbMQEftHbsC27ysUWGw4OxnKwgmSI"
OoOO0Ooo = "PLDouWbMQEftGxi1_JHCEMj0Mg6xu8ofTS"
Iiii1II1IIi = "PLDouWbMQEftGppOc9H3k4OblZt7AkFJIe"
IiiIi11iIII1 = "PLDouWbMQEftFwkKFJg_dqrNZmViR_5Vpw"
I1iII11ii1iii = "PLDouWbMQEftGm-SYQFcZgSkl5Xsoi6ec3"
IIIIO0oOooOoOo0 = "PLDouWbMQEftG7H9iL5_e-05Qln6eOHzhJ"
oOO00OoO0oo = "PLDouWbMQEftFo66cP_Slk1oCoVZRVPQae"
oo0o0ooooO = "PLDouWbMQEftGIy9zgfcIK_T0Qt0J_VJ5C"
O000000O0OoOo = "PLDouWbMQEftHsFyHSBua-RZLFsx--Cu4U"
OoOO0OO0o0O = "PLDouWbMQEftFfvSiP-qJnSRplBPtP9V0b"
IIiiII111i = "PLDouWbMQEftFtXgRrax8PJPPC1gdQIJ70"
iiI1I1Ii11i1I = "PLDouWbMQEftGVhou1WEt7puGQOB7Ieiqw"
Ii11i1 = "PLDouWbMQEftGnfnnc1hgtKo47JFFZO43A"
ooOoOO00OOoo0 = "PLDouWbMQEftFoFXgF3j3d-2ViUyC8KXxV"
i11i11i1I1i = "PLDouWbMQEftEpPsQuisDX830NEqIg6pLB"
o000oOo0O0 = "PLDouWbMQEftE9awijXpVSoSbRho30vX8Z"
o0O0oo00000 = "PL1CAE497B646AD1A6"
oooo0 = "PL729690CF3DC4038B"
i1IIiiII = "PL91AE51E5AD495C42"
OOO0Ooo0 = "PL395E7954B52B4822"
IiI1I1II = "PLoDgQlTbBQzbdvhDlUw9NY4IW-RgpZ62E"
Oo00OooO = "PL_34_m4eTlaP1Oisln8FWSQ-uJfb-jJfO"
iioO = "PL_34_m4eTlaN0b1Wntb0io2m_j0Bbe1Id"
iii = "PLFHCz0ifDWM1F-kNF9Kpo_WMniLJSDJYG"
iIIiiIIIIi = "PL_34_m4eTlaNQBMQYxfxQLN7eUkIKP66y"
OOoOo0OO = "PLQa1P8Aw9Jz9u3H6qDnSMz91HFK05u8Qi"
oOoOoOo = "PLCyMOjFkWxz0x7YHwWgdkqCB4BZSOYlVu"
iiIi1I1ii = "PL_34_m4eTlaNLWS-34FVBlr8ZnlTUFkiV"
Ii1iIi1 = "PL_34_m4eTlaMs7Q4Imtz199e2K4agqwyP"
i11 = "PL_34_m4eTlaNh63gxFpUwwAROXj5V3AX8"
oO000oooOO = "PL_34_m4eTlaMFVmKb3lBxVKMWkGXUKG9g"
oOO0oooo = "PL_34_m4eTlaPXh3wyeVKGJJvjJtZ-kJXY"
iI = "PLf8Oo47thU_O5ZvVPjAymfbAHZt3Tgr9m"
i111 = "PLUSRfoOcUe4aJ_afJI6Iw_d-IMx16iwnH"
oooO00o0oO = "PLUSRfoOcUe4YctgFFjWQqhbndPAX0eJ8c"
II11i1iI = "PLCJyoxQW5ieKzjL8MH3qyvR1Kf6jT2_Rn"
ooO0oOo0o00oo = "PLF73D80737572C687"
O0O0oOo = "PL_34_m4eTlaNZnmJKJqLfslC2oW3kNKWK"
o0OOO0o = "PLft313ngIElbbRJBRLtnP59MUOuo24kGr"
Ii1I1i1iII = "PLHHnmhLfwSsaZzrbBUH_N0WB6cZFFeJ41"
iIiII1 = "PL_34_m4eTlaP5cyIG-2hUcqF2bZxHgZlZ"
I11I1IiiI1IIi = "PL_34_m4eTlaMgClOUihGU5EKM0md93FCN"
oOOoOO = "PL_34_m4eTlaOrcFRHD9mG4zUilcXQS8uB"
iII1iIIiIi11I = "PLsdPA0A_fKLmuHNuafb76kecjHqeGoBLs"
IiI1iI = "PLF0A9B9128F4397BD"
iII1Ii = "PL_34_m4eTlaPLkaa4gLSJsWm86Z0H8i_U"
Oo000ooO0OO = "PL_34_m4eTlaO64lWBQeC7xfmlA9uKvS4G"
ooOOOO0o = "PLXAN7tYrZq7drpFeMFFn7CNzkF-FUVIBh"
O000oOOo = "PLUSRfoOcUe4ZHOPA0YgBcbwAVkJQ52HH_"
oOOoO00Oo = "PLBBC3BAC472A1020F"
oOOo = "PLnknRVaLM8J_02U2zaSzX_9wvfmctT1Xe"
OOOi1 = "PLEE1730DB6C1BDCB4"
iI1OO0OOo = "PL_34_m4eTlaO8Wj-65W7BioLh50i_4Mzs"
iiIiiiIIi1 = "PL_34_m4eTlaMA1WFX92nvR5NK1Z4dc42M"
o00OO00 = "PLfXJnC0pregyWgUZzmnzasnwxhCZw0uqK"
O0OO00oO00Oo = "PLflvWSBDC77jVrR_6MzUHBsITaIxn4jZ8"
OO00 = "PLKfO_IEZedrhfX21ih0rSRzLKPMFnsPcx"
i1i1IIiIi = "PLC9uHuoWKsDwFs_bLjU1Xf9kK032tIukr"
Ii1I111 = "PLsdPA0A_fKLlogBKy9a0UsGUngUm2Nu7O"
o0 = "PL_34_m4eTlaMExaWbVfv24i5O5Q5ZBZXU"
Ii1 = "PL_34_m4eTlaNf6TSaM9IfLd13R1lKaoYd"
o0O = "PL_34_m4eTlaMYv6z-uHidbtQ199xd1EK1"
O0OooO0 = "PL_34_m4eTlaPnat1HtGrigGFXywxRscUK"
iI111I1iIiIi = "PL_34_m4eTlaMnlJjHHCOyEK0jDM7_dHQ5"
Oo0o0 = "PL-PXKb5jSjwZT2QzeJCIlYSqs0cZvy808"
oOOO0OoO0 = "UCfJPtULqanZ3K7trqtupvtQ"
iii11III11 = "PLLQvN69uicxzOl5c_mdEQ5ri4bEtblnPz"
I1oOo = "PL_34_m4eTlaNMHpdUrP4JatalX_KatG0y"
o0oOooo0000 = "PL_34_m4eTlaN6hX-sJcrJCJvRL4pSrPx0"
Oooo00OooooO = "PL_34_m4eTlaPorC89EUOQxwhXeZxd-Hc7"
o00 = "PL_34_m4eTlaMaiHbxdGrxy8AdgHtUezSO"
if 5 - 5: ii11Ii11i - O0OOo0 * oOO0oOOoOooo
def iIIOOo00ooo0 ( ) :
 plugintools . log ( "docu.run" )
 if 47 - 47: oOoii1
 if 89 - 89: iIiiIi . II1Ii1 - oOO % oOoii1
 i11o0 = plugintools . get_params ( )
 if 46 - 46: II1Ii1 * i11Ii . IiI1ii1IIiI1 * oOO % OOO
 if i11o0 . get ( "action" ) is None :
  OOOo0o0oo ( i11o0 )
 else :
  i1iiIi = i11o0 . get ( "action" )
  exec i1iiIi + "(params)"
  if 89 - 89: OOO . Ii
 plugintools . close_item_list ( )
 if 8 - 8: i11Ii . IiI1ii1IIiI1 - OOO / ii11Ii11i / ii11Ii11i % iiIIi1i1Iii
 if 4 - 4: iiIIi1i1Iii . oO0O + Ii - OOO
def OOOo0o0oo ( params ) :
 plugintools . log ( "docu.main_list " + repr ( params ) )
 if 34 - 34: O0OOo0 + OOoOoO0o0o0OO + i11Ii + IiI1ii1IIiI1 * iIiiIi
 plugintools . add_item (

 title = "Now 98 " ,
 url = "plugin://plugin.video.youtube/playlist/" + o00 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/2017/10/FINAL-now98ski1300dpi.png" ,
 folder = True )
 if 36 - 36: IIoooO0ooO0oo . IiI1ii1IIiI1 - iiIi1IiI
 plugintools . add_item (

 title = "Now 97 " ,
 url = "plugin://plugin.video.youtube/playlist/" + Oooo00OooooO + "/" ,
 thumbnail = "https://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/2017/06/now97_RESORT_300dpi_layers-1024x1024.jpg" ,
 folder = True )
 if 18 - 18: O0OOo0 / I1 / oO0o0 . O0OOo0 . O0OOo0
 plugintools . add_item (

 title = "Now Summer Hits " ,
 url = "plugin://plugin.video.youtube/playlist/" + o0oOooo0000 + "/" ,
 thumbnail = "http://store.hmv.com/HMVStore/media/product/316652/01-316652.jpg" ,
 folder = True )
 if 74 - 74: IIII * Ii * iiIIi1i1Iii - IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 96" ,
 url = "plugin://plugin.video.youtube/playlist/" + I1oOo + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now96_inks_CYMK_300dpi-1024x1024.jpg" ,
 folder = True )
 if 36 - 36: iIiiIi % IiI1ii1IIiI1 . OOO
 plugintools . add_item (

 title = "Now Levantate y Cardenas 2017" ,
 url = "plugin://plugin.video.youtube/playlist/" + iii11III11 + "/" ,
 thumbnail = "http://i.imgur.com/dTndlqq.png" ,
 folder = True )
 if 41 - 41: iiIIi1i1Iii / oOoii1
 plugintools . add_item (

 title = "Now Karaoke Ed.España" ,
 url = "plugin://plugin.video.youtube/channel/" + oOOO0OoO0 + "/" ,
 thumbnail = "http://i.imgur.com/1Jieu64.png" ,
 folder = True )
 if 27 - 27: Ii % Ii - oOO - iIiiIi
 if 28 - 28: oO0o0 * oOO * iIiiIi
 plugintools . add_item (

 title = "Now Los Exitos Del Año 2016" ,
 url = "plugin://plugin.video.youtube/playlist/" + Oo0o0 + "/" ,
 thumbnail = "http://www.fonodisco.es/227689-thickbox_default/now-2016-varios-2-cds-cd-.jpg" ,
 folder = True )
 if 33 - 33: oO0o0 - OOO * oOoii1 + II1Ii1
 if 90 - 90: iIiiIi + IIoooO0ooO0oo / IiI1ii1IIiI1 + OOO * O0OOo0 % iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 95" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0 + "/" ,
 thumbnail = "http://www.musicktorrent.com/images/articles/25/25282.jpg" ,
 folder = True )
 if 97 - 97: OOoOoO0o0o0OO * II . I1 + oOO0oOOoOooo
 plugintools . add_item (

 title = "Now 94" ,
 url = "plugin://plugin.video.youtube/playlist/" + OO00 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now-94-underwater2B2-1024x1024.jpg" ,
 folder = True )
 if 82 - 82: II + i11Ii % iiIIi1i1Iii . II
 plugintools . add_item (

 title = "Now 93" ,
 url = "plugin://plugin.video.youtube/playlist/" + O000Ooo0o0OOo + "/" ,
 thumbnail = "http://www.officialcharts.com/media/650017/now-93-artwork.png?width=488.07157057654075&height=500" ,
 folder = True )
 if 59 - 59: IiI1ii1IIiI1 * oO0O / oO0O + II % i11Ii % IIII
 plugintools . add_item (

 title = "Now 92" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI11I1iiI1i + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/20150923101439/now92GROTTO_HR-1024x1024.jpg" ,
 folder = True )
 if 32 - 32: IIII / oOO0oOOoOooo . IIII - II1Ii1
 plugintools . add_item (

 title = "Now 91" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0000O + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/20150611093502/now-91-CYMK-FINAL-HR-1024x1024.jpg" ,
 folder = True )
 if 53 - 53: oOO % O0OOo0 % oOoii1 * IIoooO0ooO0oo - IiI1ii1IIiI1 % II
 plugintools . add_item (

 title = "Now 90" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0o0000O0 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/0/01/Now_90_UK_Cover.jpg" ,
 folder = True )
 if 44 - 44: oO0o0 % oOO0oOOoOooo . O0OOo0
 plugintools . add_item (

 title = "Now 89" ,
 url = "plugin://plugin.video.youtube/playlist/" + Iiii + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW-89-Final-Artwork-1024x1024.jpg" ,
 folder = True )
 if 4 - 4: oO0O . IIoooO0ooO0oo . II1Ii1 - II + II * iiIi1IiI
 plugintools . add_item (

 title = "Now 88" ,
 url = "plugin://plugin.video.youtube/playlist/" + ii1i1ii1I + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/8/84/Now_88_UK_Cover.jpg" ,
 folder = True )
 if 46 - 46: I1 / oOO - oOO + oO0O
 plugintools . add_item (

 title = "Now 87" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO00ooo0o0OO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now_87_EGG_final-1024x1024.jpg" ,
 folder = True )
 if 16 - 16: O0OOo0
 plugintools . add_item (

 title = "Now 86" ,
 url = "plugin://plugin.video.youtube/playlist/" + I111i11I1I + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now86NEW_FINAL-1024x1024.jpg" ,
 folder = True )
 if 87 - 87: iiIi1IiI . oOoii1 - IIoooO0ooO0oo - OOoOoO0o0o0OO * OOO
 plugintools . add_item (

 title = "Now 85" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO0O0o0ooO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Pack-shot2-1024x1024.jpg" ,
 folder = True )
 if 60 - 60: oOO0oOOoOooo - IIoooO0ooO0oo . oO0o0 . II . iIiiIi * II1Ii1
 plugintools . add_item (

 title = "Now 84" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0o00O0oOooO + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/81087xfVSDL._SL1500_.jpg" ,
 folder = True )
 if 85 - 85: II
 plugintools . add_item (

 title = "Now 83" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOooOOoOO + "/" ,
 thumbnail = "https://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/2016/08/NOW_83.jpg" ,
 folder = True )
 if 57 - 57: i11Ii - OOoOoO0o0o0OO / OOO * oOO % IIII
 plugintools . add_item (

 title = "Now 82" ,
 url = "plugin://plugin.video.youtube/playlist/" + iii1II + "/" ,
 thumbnail = "http://tshop.r10s.com/3dc/0b1/5e1c/4b6d/20d8/3df1/8455/112ce49d9a005056b75a2f.jpg" ,
 folder = True )
 if 42 - 42: oOO . OOO / oO0O % IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 81" ,
 url = "plugin://plugin.video.youtube/playlist/" + OO0O0 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now-81.jpg" ,
 folder = True )
 if 7 - 7: ii11Ii11i / Ii - OOO
 plugintools . add_item (

 title = "Now 80" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1IiI1iii + "/" ,
 thumbnail = "http://i47.tinypic.com/o360l.jpg" ,
 folder = True )
 if 25 - 25: IIoooO0ooO0oo . oOO / iIiiIi / IIII
 plugintools . add_item (

 title = "Now 79" ,
 url = "plugin://plugin.video.youtube/playlist/" + OoO0oooOoO0 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW79_F_flop_CYMK-1024x1024.jpg" ,
 folder = True )
 if 95 - 95: oOO / II * i11Ii - ii11Ii11i + oO0O
 plugintools . add_item (

 title = "Now 78" ,
 url = "plugin://plugin.video.youtube/playlist/" + i11ii + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/3/3b/Now78UK.jpg" ,
 folder = True )
 if 22 - 22: iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 77" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0O0oO0 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/N77snowboardYEL-1024x1024.jpg" ,
 folder = True )
 if 87 - 87: OOO
 plugintools . add_item (

 title = "Now 76" ,
 url = "plugin://plugin.video.youtube/playlist/" + IIIi1111iI + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now76HR-1024x1024.jpg" ,
 folder = True )
 if 91 - 91: oO0o0 + iiIIi1i1Iii - Ii - i11Ii * oOoii1 * iIiiIi
 plugintools . add_item (

 title = "Now 75" ,
 url = "plugin://plugin.video.youtube/playlist/" + iiIIiiiI11 + "/" ,
 thumbnail = "http://www.covershut.com/covers/NOW-Thats-What-I-Call-Music!-75-2010-Front-Cover-37348.jpg" ,
 folder = True )
 if 51 - 51: i11Ii + oO0O + oOO . I1 * OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 74" ,
 url = "plugin://plugin.video.youtube/playlist/" + O00O000 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now74Sflakes_final-1024x1024.jpg" ,
 folder = True )
 if 87 - 87: OOoOoO0o0o0OO * iIiiIi % IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 73" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0OOO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/N73_FINAL_HR-1024x1024.jpg" ,
 folder = True )
 if 67 - 67: OOO * II1Ii1 . O0OOo0 * IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 72" ,
 url = "plugin://plugin.video.youtube/playlist/" + iIi11iI1ii1I + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-72-1024x1024.jpg" ,
 folder = True )
 if 61 - 61: ii11Ii11i / oOoii1
 plugintools . add_item (

 title = "Now 71" ,
 url = "plugin://plugin.video.youtube/playlist/" + OOoOO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-71-1024x1024.jpg" ,
 folder = True )
 if 48 - 48: ii11Ii11i / iIiiIi . ii11Ii11i * oOO + oO0o0
 plugintools . add_item (

 title = "Now 70" ,
 url = "plugin://plugin.video.youtube/playlist/" + ii + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-70-1024x1024.jpg" ,
 folder = True )
 if 68 - 68: II1Ii1 * ii11Ii11i % IIII * oOO0oOOoOooo * OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 69" ,
 url = "plugin://plugin.video.youtube/playlist/" + OoooO0O + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-69-1024x1024.jpg" ,
 folder = True )
 if 91 - 91: oOO0oOOoOooo + I1 * ii11Ii11i / IIoooO0ooO0oo % iiIi1IiI % IiI1ii1IIiI1
 plugintools . add_item (

 title = "Now 68" ,
 url = "plugin://plugin.video.youtube/playlist/" + o00OoOOO0O + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/61tRYeXQQCL.jpg" ,
 folder = True )
 if 9 - 9: oO0o0
 plugintools . add_item (

 title = "Now 67" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1I1 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-67-1024x1024.jpg" ,
 folder = True )
 if 52 - 52: OOO - OOO * IiI1ii1IIiI1 * iIiiIi + oO0o0 + iIiiIi
 plugintools . add_item (

 title = "Now 66" ,
 url = "plugin://plugin.video.youtube/playlist/" + I1i1iI + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-66-1024x1024.jpg" ,
 folder = True )
 if 59 - 59: I1 * oOoii1 - i11Ii % Ii / I1
 plugintools . add_item (

 title = "Now 65" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0OO0OO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-65-1024x1024.jpg" ,
 folder = True )
 if 67 - 67: IIoooO0ooO0oo - II1Ii1 - i11Ii . ii11Ii11i
 plugintools . add_item (

 title = "Now 64" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO0ooO0OooOOo + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-64-1024x1024.jpg" ,
 folder = True )
 if 16 - 16: Ii * OOO * IIII % II1Ii1 * OOO - iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 63" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO00OoOo + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/a/ae/Now_63.jpg" ,
 folder = True )
 if 68 - 68: i11Ii . i11Ii / ii11Ii11i . oO0o0
 plugintools . add_item (

 title = "Now 62" ,
 url = "plugin://plugin.video.youtube/playlist/" + Iii11IiI11i + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-62-1024x1024.jpg" ,
 folder = True )
 if 93 - 93: Ii / i11Ii - ii11Ii11i * II1Ii1
 plugintools . add_item (

 title = "Now 61" ,
 url = "plugin://plugin.video.youtube/playlist/" + oo0O0 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-61.jpg" ,
 folder = True )
 if 5 - 5: oO0O * oOO0oOOoOooo * oOoii1 + Ii % iiIIi1i1Iii . oOoii1
 plugintools . add_item (

 title = "Now 60" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii11 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-60-1024x1024.jpg" ,
 folder = True )
 if 11 - 11: OOO - IIII . II / II / Ii
 plugintools . add_item (

 title = "Now 59" ,
 url = "plugin://plugin.video.youtube/playlist/" + I11Iii11i1Ii1 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-59-1024x1024.jpg" ,
 folder = True )
 if 52 - 52: oOO0oOOoOooo / OOO . oOO0oOOoOooo / iiIIi1i1Iii + iIiiIi
 plugintools . add_item (

 title = "Now 58" ,
 url = "plugin://plugin.video.youtube/playlist/" + iiII + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-58-1024x1024.jpg" ,
 folder = True )
 if 76 - 76: IiI1ii1IIiI1 . ii11Ii11i + IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 57" ,
 url = "plugin://plugin.video.youtube/playlist/" + oooO + "/" ,
 thumbnail = "https://photos.prnewswire.com/prnvar/20160105/319490" ,
 folder = True )
 if 54 - 54: IIII * iiIIi1i1Iii + O0OOo0 + oO0o0
 plugintools . add_item (

 title = "Now 56" ,
 url = "plugin://plugin.video.youtube/playlist/" + iII1I1I + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/91QvXvWXU1L._SY355_.jpg" ,
 folder = True )
 if 77 - 77: oOO - iIiiIi * iiIi1IiI * OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 55" ,
 url = "plugin://plugin.video.youtube/playlist/" + OO00Ooo0o + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/71kFlRrz8aL._SX355_.jpg" ,
 folder = True )
 if 96 - 96: oOoii1 . oO0o0
 plugintools . add_item (

 title = "Now 54" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/5/52/Now_54.jpg" ,
 folder = True )
 if 77 - 77: iiIIi1i1Iii * IiI1ii1IIiI1 . II
 plugintools . add_item (

 title = "Now 53" ,
 url = "plugin://plugin.video.youtube/playlist/" + ii1iI111iIi1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/5/58/Now_53.jpg" ,
 folder = True )
 if 75 - 75: II - iIiiIi - iiIIi1i1Iii . oO0o0 - II - i11Ii
 plugintools . add_item (

 title = "Now 52" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0O + "/" ,
 thumbnail = "http://streamd.hitparade.ch/cdimages/-now_thats_what_i_call_music_52_a.jpg" ,
 folder = True )
 if 11 - 11: oOoii1 - i11Ii * IiI1ii1IIiI1 % Ii
 plugintools . add_item (

 title = "Now 51" ,
 url = "plugin://plugin.video.youtube/playlist/" + Oo + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/81%2Bh5v6hPrL._SL1500_.jpg" ,
 folder = True )
 if 29 - 29: iiIIi1i1Iii + oOO0oOOoOooo - IiI1ii1IIiI1 / oOoii1 + Ii - oOO
 plugintools . add_item (

 title = "Now 50" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOo0oo0 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/b/b3/Now_50.jpg" ,
 folder = True )
 if 29 - 29: oOO
 plugintools . add_item (

 title = "Now 49" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOOooo00Oooo + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/1/11/Now_49.jpg" ,
 folder = True )
 if 22 - 22: IiI1ii1IIiI1 * OOO / oOO0oOOoOooo / I1 / oO0O
 plugintools . add_item (

 title = "Now 48" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ooo + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/2/20/Now_48.jpg" ,
 folder = True )
 if 45 - 45: iIiiIi + II1Ii1
 plugintools . add_item (

 title = "Now 47" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOo + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/81ynokvm4ML._SL1500_.jpg" ,
 folder = True )
 if 83 - 83: oOO0oOOoOooo % oOO0oOOoOooo - iIiiIi - oOO0oOOoOooo + oOO0oOOoOooo + iiIi1IiI
 plugintools . add_item (

 title = "Now 46" ,
 url = "plugin://plugin.video.youtube/playlist/" + ii1I1Iii + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/c/c0/Now_46.jpg" ,
 folder = True )
 if 29 - 29: oO0O * ii11Ii11i * oO0O % I1 + OOO . oO0o0
 plugintools . add_item (

 title = "Now 45" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0OoO0o + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/3/36/Now_45.jpg" ,
 folder = True )
 if 55 - 55: oOoii1 + Ii + i11Ii + O0OOo0 * oOO0oOOoOooo . IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now 44" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1Ii1II + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/6/60/Now_44.jpg" ,
 folder = True )
 if 25 - 25: oO0O - iiIi1IiI
 plugintools . add_item (

 title = "Now 43" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI1I1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/f/ff/Now_43.jpg" ,
 folder = True )
 if 97 - 97: Ii . oO0o0 * IIII . OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 42" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1iIii + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/c/c7/Now_42.jpg" ,
 folder = True )
 if 47 - 47: I1 . iIiiIi - Ii
 plugintools . add_item (

 title = "Now 41" ,
 url = "plugin://plugin.video.youtube/playlist/" + oo0OOO0O + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/d/d6/Now_41.jpg" ,
 folder = True )
 if 83 - 83: IiI1ii1IIiI1 . iiIIi1i1Iii - oOoii1
 plugintools . add_item (

 title = "Now 40" ,
 url = "plugin://plugin.video.youtube/playlist/" + ii1i1i1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/5/56/Now_40.jpg" ,
 folder = True )
 if 2 - 2: oOoii1
 plugintools . add_item (

 title = "Now 39" ,
 url = "plugin://plugin.video.youtube/playlist/" + I1IIi1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/e/e8/Now_39.jpg" ,
 folder = True )
 if 96 - 96: iiIIi1i1Iii . oOoii1 % O0OOo0 . iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 38" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0OO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-38-1024x1024.jpg" ,
 folder = True )
 if 1 - 1: IIoooO0ooO0oo % OOoOoO0o0o0OO % IiI1ii1IIiI1 . oOO
 plugintools . add_item (

 title = "Now 37" ,
 url = "plugin://plugin.video.youtube/playlist/" + Oo0oOOOO + "/" ,
 thumbnail = "http://cps-static.rovicorp.com/3/JPG_400/MI0002/367/MI0002367718.jpg?partner=allrovi.com" ,
 folder = True )
 if 13 - 13: i11Ii + O0OOo0 % ii11Ii11i
 plugintools . add_item (

 title = "Now 36" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0000OO + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/e/ef/Now_36.jpg" ,
 folder = True )
 if 14 - 14: O0OOo0 + OOoOoO0o0o0OO - ii11Ii11i - oO0o0
 plugintools . add_item (

 title = "Now 35" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1I1ii1ii + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-35-1024x1003.jpg" ,
 folder = True )
 if 77 - 77: O0OOo0 % IIoooO0ooO0oo * oOoii1 * IIII - II - OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 34" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1Iii1II + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/a/a6/Now_34.jpg" ,
 folder = True )
 if 96 - 96: oO0o0 / oOO * IiI1ii1IIiI1 - Ii
 plugintools . add_item (

 title = "Now 33" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0O0ooo0o00 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/d/d6/Now_33.jpg" ,
 folder = True )
 if 6 - 6: oO0o0 * oO0O + ii11Ii11i % II * iIiiIi % iiIi1IiI
 plugintools . add_item (

 title = "Now 32" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1I1I + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/thumb/6/6d/Now_32.jpg/220px-Now_32.jpg" ,
 folder = True )
 if 35 - 35: oOO / II
 plugintools . add_item (

 title = "Now 31" ,
 url = "plugin://plugin.video.youtube/playlist/" + Iii111i + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/1/15/Now_31.jpg" ,
 folder = True )
 if 83 - 83: I1
 plugintools . add_item (

 title = "Now 30" ,
 url = "plugin://plugin.video.youtube/playlist/" + ooO00OoOOoO + "/" ,
 thumbnail = "http://cdn.hitfix.com/photos/71216/Now30Front_rz_img_featured_photo_gallery.jpg" ,
 folder = True )
 if 19 - 19: IIII % II - O0OOo0 + oOO . ii11Ii11i * oOO0oOOoOooo
 plugintools . add_item (

 title = "Now 29" ,
 url = "plugin://plugin.video.youtube/playlist/" + iII + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/f/f8/Now_That's_What_I_Call_Music!_29_US_album_cover.jpg" ,
 folder = True )
 if 28 - 28: O0OOo0 - oOO
 plugintools . add_item (

 title = "Now 28" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0O0oO + "/" ,
 thumbnail = "http://images.coveralia.com/audio/n/Now_28--Frontal.jpg" ,
 folder = True )
 if 21 - 21: IIoooO0ooO0oo . II1Ii1 + OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 27" ,
 url = "plugin://plugin.video.youtube/playlist/" + OOo0oo + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/8/80/Now_That's_What_I_Call_Music!_27_(UK_series)_.jpg" ,
 folder = True )
 if 26 - 26: oO0O % II1Ii1
 plugintools . add_item (

 title = "Now 26" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1ii1 + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/41cCLInJypL._SX355_.jpg" ,
 folder = True )
 if 95 - 95: oO0O . II . O0OOo0 * iiIi1IiI
 plugintools . add_item (

 title = "Now 25" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI1111I + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/61TH%2BnVIC2L._SY300_.jpg" ,
 folder = True )
 if 35 - 35: I1 % oO0o0 % ii11Ii11i + ii11Ii11i
 plugintools . add_item (

 title = "Now 24" ,
 url = "plugin://plugin.video.youtube/playlist/" + i11i1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/7/7e/Now_24.jpg" ,
 folder = True )
 if 45 - 45: Ii * IIoooO0ooO0oo * II1Ii1 % iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 23" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/4/40/Now_23.jpg" ,
 folder = True )
 if 83 - 83: oOoii1 / OOO . Ii . iiIIi1i1Iii % II / oOoii1
 plugintools . add_item (

 title = "Now 22" ,
 url = "plugin://plugin.video.youtube/playlist/" + o00000OOo + "/" ,
 thumbnail = "http://www.music-bazaar.com/album-images/vol1/96/96327/612368-big/Now-That-S-What-I-Call-Music-22-cover.jpg" ,
 folder = True )
 if 94 - 94: oO0o0 * oO0o0 / IIII + i11Ii + I1 * OOO
 plugintools . add_item (

 title = "Now 21" ,
 url = "plugin://plugin.video.youtube/playlist/" + o00O0 + "/" ,
 thumbnail = "http://www.yosmusic.com/wp-content/uploads/2016/02/Now-21-%D7%97%D7%93%D7%A9.jpg" ,
 folder = True )
 if 79 - 79: iiIi1IiI / Ii * iIiiIi . ii11Ii11i % II1Ii1 + ii11Ii11i
 plugintools . add_item (

 title = "Now 20" ,
 url = "plugin://plugin.video.youtube/playlist/" + OO0OOO0oooOoo + "/" ,
 thumbnail = "http://www.room512.co.uk/images/now20.jpg" ,
 folder = True )
 if 79 - 79: II * OOO . OOoOoO0o0o0OO . IiI1ii1IIiI1 % oOO
 plugintools . add_item (

 title = "Now 19" ,
 url = "plugin://plugin.video.youtube/playlist/" + OoOO0Ooo + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/61AMZA9HKDL.jpg" ,
 folder = True )
 if 47 - 47: iIiiIi % oO0o0 . OOO / i11Ii
 plugintools . add_item (

 title = "Now 18" ,
 url = "plugin://plugin.video.youtube/playlist/" + Iiii1II1IIi + "/" ,
 thumbnail = "http://destinyxnowmusic.freehostia.com/nowmusic/nowisrael18.jpg" ,
 folder = True )
 if 65 - 65: oOO
 plugintools . add_item (

 title = "Now 17" ,
 url = "plugin://plugin.video.youtube/playlist/" + IiiIi11iIII1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/thumb/1/14/Now17USA.jpg/220px-Now17USA.jpg" ,
 folder = True )
 if 44 - 44: II + i11Ii
 plugintools . add_item (

 title = "Now 16" ,
 url = "plugin://plugin.video.youtube/playlist/" + I1iII11ii1iii + "/" ,
 thumbnail = "http://destinyxnowmusic.freehostia.com/nowmusic/nowisrael16.jpg" ,
 folder = True )
 if 35 - 35: II1Ii1 + IIII % II1Ii1 % II / OOO % II
 plugintools . add_item (

 title = "Now 15" ,
 url = "plugin://plugin.video.youtube/playlist/" + IIIIO0oOooOoOo0 + "/" ,
 thumbnail = "http://cps-static.rovicorp.com/3/JPG_400/MI0000/410/MI0000410973.jpg?partner=allrovi.com" ,
 folder = True )
 if 84 - 84: oOO
 plugintools . add_item (

 title = "Now 14" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOO00OoO0oo + "/" ,
 thumbnail = "http://destinyxnowmusic.freehostia.com/nowmusic/nowisrael14.jpg" ,
 folder = True )
 if 43 - 43: oOO . I1 * ii11Ii11i
 plugintools . add_item (

 title = "Now 13" ,
 url = "plugin://plugin.video.youtube/playlist/" + oo0o0ooooO + "/" ,
 thumbnail = "https://agencyspace.files.wordpress.com/2013/01/13.jpg" ,
 folder = True )
 if 55 - 55: Ii / oOoii1 * ii11Ii11i - I1 + IIII
 plugintools . add_item (

 title = "Now 12" ,
 url = "plugin://plugin.video.youtube/playlist/" + O000000O0OoOo + "/" ,
 thumbnail = "http://streamd.hitparade.ch/cdimages/-now_thats_what_i_call_music_12_[us]_a.jpg" ,
 folder = True )
 if 63 - 63: oO0o0
 plugintools . add_item (

 title = "Now 11" ,
 url = "plugin://plugin.video.youtube/playlist/" + OoOO0OO0o0O + "/" ,
 thumbnail = "http://media.israel-music.com/images/27932721.jpg" ,
 folder = True )
 if 51 - 51: IiI1ii1IIiI1 + OOO
 plugintools . add_item (

 title = "Now 10" ,
 url = "plugin://plugin.video.youtube/playlist/" + IIiiII111i + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/61U1rUpKC2L.jpg" ,
 folder = True )
 if 23 - 23: oOoii1 - IIII / II / II * IIII % oOO
 plugintools . add_item (

 title = "Now 9" ,
 url = "plugin://plugin.video.youtube/playlist/" + iiI1I1Ii11i1I + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/1/14/Now_9_United_Kingdom.jpg" ,
 folder = True )
 if 84 - 84: OOoOoO0o0o0OO . O0OOo0 / iiIIi1i1Iii
 plugintools . add_item (

 title = "Now 8" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii11i1 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/a/aa/Now_8_United_Kingdom.jpg" ,
 folder = True )
 if 18 - 18: Ii / oO0o0 % OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 7" ,
 url = "plugin://plugin.video.youtube/playlist/" + ooOoOO00OOoo0 + "/" ,
 thumbnail = "http://rymimg.com/lk/f/l/c33af130e24ba021d2b963fa81008e24/2391455.jpg" ,
 folder = True )
 if 45 - 45: IIII % iiIi1IiI + OOO - oOO
 plugintools . add_item (

 title = "Now 6" ,
 url = "plugin://plugin.video.youtube/playlist/" + i11i11i1I1i + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/818bzGDAdjL._SY355_.jpg" ,
 folder = True )
 if 87 - 87: oOoii1 + OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now 5" ,
 url = "plugin://plugin.video.youtube/playlist/" + o000oOo0O0 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/1/1b/Now_5.jpg" ,
 folder = True )
 if 88 - 88: II1Ii1 - II + oO0O . O0OOo0 % O0OOo0 / iiIi1IiI
 plugintools . add_item (

 title = "Now 4" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0O0oo00000 + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/2/24/Now_4_US.jpg" ,
 folder = True )
 if 88 - 88: OOO / iiIIi1i1Iii * II
 plugintools . add_item (

 title = "Now 3" ,
 url = "plugin://plugin.video.youtube/playlist/" + oooo0 + "/" ,
 thumbnail = "http://rymimg.com/lk/f/l/a4689d7fd545e470064441b21667fd92/2384145.jpg" ,
 folder = True )
 if 84 - 84: i11Ii * O0OOo0 - oO0o0 . oOO0oOOoOooo + oO0o0
 plugintools . add_item (

 title = "Now 2" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1IIiiII + "/" ,
 thumbnail = "http://streamd.hitparade.ch/cdimages/-now_thats_what_i_call_music_2_a_1.jpg" ,
 folder = True )
 if 85 - 85: iiIi1IiI
 plugintools . add_item (

 title = "Now 1" ,
 url = "plugin://plugin.video.youtube/playlist/" + OOO0Ooo0 + "/" ,
 thumbnail = "http://lifestoogood.net/wp-content/uploads/2011/10/Now-1-300x300.jpg" ,
 folder = True )
 if 76 - 76: iiIIi1i1Iii % OOoOoO0o0o0OO - OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now Christmas" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/20150814114319/Christmas_Hi_Res-1024x901.jpg" ,
 folder = True )
 if 66 - 66: OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now DriveTime" ,
 url = "plugin://plugin.video.youtube/playlist/" + i1i1IIiIi + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW-DRIVE-1500X1500-1024x1024.jpg" ,
 folder = True )
 if 71 - 71: iIiiIi % oOO
 plugintools . add_item (

 title = "Now Dance Hits" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1I111 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW-DANCE-COVER--150x150.jpg" ,
 folder = True )
 if 69 - 69: ii11Ii11i % iiIi1IiI . iIiiIi . i11Ii
 plugintools . add_item (

 title = "Now Fitness " ,
 url = "plugin://plugin.video.youtube/playlist/" + IiI1I1II + "/" ,
 thumbnail = "http://store.hmv.com/HMVStore/media/product/289482/01-289482.jpg" ,
 folder = True )
 if 76 - 76: iiIi1IiI / I1 % iiIIi1i1Iii - iiIi1IiI
 plugintools . add_item (

 title = "Now Brit Hits" ,
 url = "plugin://plugin.video.youtube/playlist/" + Oo00OooO + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/brits-png-1024x1024.png" ,
 folder = True )
 if 24 - 24: II % II1Ii1
 plugintools . add_item (

 title = "Now Party Anthems" ,
 url = "plugin://plugin.video.youtube/playlist/" + iioO + "/" ,
 thumbnail = "https://is3-ssl.mzstatic.com/image/thumb/Music6/v4/47/a4/ba/47a4ba2e-bd66-8663-b518-bf7364424b1b/05099931924153.jpg/1200x630bb.jpg" ,
 folder = True )
 if 83 - 83: oO0o0 % OOoOoO0o0o0OO / Ii . II1Ii1
 plugintools . add_item (

 title = "Now Classic Rock" ,
 url = "plugin://plugin.video.youtube/playlist/" + iii + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/61IeOgC6FyL._SY300_.jpg" ,
 folder = True )
 if 15 - 15: iiIi1IiI + Ii . OOoOoO0o0o0OO * IIII . IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now Pop" ,
 url = "plugin://plugin.video.youtube/playlist/" + iIIiiIIIIi + "/" ,
 thumbnail = "http://dvfnvgxhycwzf.cloudfront.net/media/SharedImage/imageFull/.fgn3yf9U/SharedImage-54831.jpg?t=6f021b9c4b26aa96d828" ,
 folder = True )
 if 38 - 38: Ii
 plugintools . add_item (

 title = "Now Disco" ,
 url = "plugin://plugin.video.youtube/playlist/" + OOoOo0OO + "/" ,
 thumbnail = "http://724c8ec11924b4643ff4-cbc0e5c64c4e0e6a0ca4e8696c6ef08e.r74.cf3.rackcdn.com/5099940901527.jpg" ,
 folder = True )
 if 91 - 91: IIII + oOoii1 * i11Ii - oO0o0
 plugintools . add_item (

 title = "Now Feel Good" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOoOoOo + "/" ,
 thumbnail = "http://a4.mzstatic.com/eu/r30/Music2/v4/32/ff/fe/32fffee0-4224-37b5-295c-83452df920ca/cover600x600.jpeg" ,
 folder = True )
 if 95 - 95: IiI1ii1IIiI1 % i11Ii + IiI1ii1IIiI1 / IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now Running" ,
 url = "plugin://plugin.video.youtube/playlist/" + iiIi1I1ii + "/" ,
 thumbnail = "http://tesco.scene7.com/is/image/tesco/521-8951_PI_1000025MN?id=6eebz3&fmt=jpg&fit=constrain,1&wid=250&hei=250" ,
 folder = True )
 if 79 - 79: OOoOoO0o0o0OO - ii11Ii11i % OOO
 plugintools . add_item (

 title = "Now Song" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1iIi1 + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/61wQSnctNeL.jpg" ,
 folder = True )
 if 63 - 63: I1
 plugintools . add_item (

 title = "Now Singer" ,
 url = "plugin://plugin.video.youtube/playlist/" + i11 + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/61XfCx9YlWL.jpg" ,
 folder = True )
 if 80 - 80: Ii . OOO
 plugintools . add_item (

 title = "Now House" ,
 url = "plugin://plugin.video.youtube/playlist/" + oO000oooOO + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/81Tb8U3VvkL._SL1500_.jpg" ,
 folder = True )
 if 38 - 38: IiI1ii1IIiI1 / I1 * IIoooO0ooO0oo
 plugintools . add_item (

 title = "Now Summer Party" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOO0oooo + "/" ,
 thumbnail = "http://direct-ns.rhap.com/imageserver/v2/albums/Alb.189415979/images/500x500.jpg" ,
 folder = True )
 if 85 - 85: I1 - IIoooO0ooO0oo - ii11Ii11i * OOoOoO0o0o0OO / I1
 plugintools . add_item (

 title = "Now Summer" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/81vNIT4a-6L._SL1500_.jpg" ,
 folder = True )
 if 79 - 79: iiIIi1i1Iii * iiIIi1i1Iii % II1Ii1 / iiIIi1i1Iii + I1 . II1Ii1
 plugintools . add_item (

 title = "Now Drive" ,
 url = "plugin://plugin.video.youtube/playlist/" + i111 + "/" ,
 thumbnail = "https://images-eu.ssl-images-amazon.com/images/I/61EoE0udUkL._SL500_AA280_.jpg" ,
 folder = True )
 if 55 - 55: OOoOoO0o0o0OO
 plugintools . add_item (

 title = "Now Movies" ,
 url = "plugin://plugin.video.youtube/playlist/" + oooO00o0oO + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/81Faz2sWEnL._SX355_.jpg" ,
 folder = True )
 if 18 - 18: OOoOoO0o0o0OO - IiI1ii1IIiI1 * Ii % II1Ii1 . iIiiIi
 plugintools . add_item (

 title = "Now Disney" ,
 url = "plugin://plugin.video.youtube/playlist/" + II11i1iI + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/819lN7C5loL._SL1500_.jpg" ,
 folder = True )
 if 27 - 27: Ii / II % IIII % Ii . II % oOO0oOOoOooo
 plugintools . add_item (

 title = "Now Reggae" ,
 url = "plugin://plugin.video.youtube/playlist/" + ooO0oOo0o00oo + "/" ,
 thumbnail = "https://i.scdn.co/image/424aa797636f9477e07b1d168498c7c75c53a566" ,
 folder = True )
 if 95 - 95: II1Ii1 * I1 . oOO0oOOoOooo + oO0O
 plugintools . add_item (

 title = "Now Rock" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0O0oOo + "/" ,
 thumbnail = "http://loudwire.com/files/2016/01/unnamed-10.jpg" ,
 folder = True )
 if 5 - 5: OOO % oO0O
 plugintools . add_item (

 title = "Now Country" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0OOO0o + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/thumb/8/88/Nowcountryfeat.jpg/220px-Nowcountryfeat.jpg" ,
 folder = True )
 if 83 - 83: iIiiIi
 plugintools . add_item (

 title = "Now Legends" ,
 url = "plugin://plugin.video.youtube/playlist/" + Ii1I1i1iII + "/" ,
 thumbnail = "https://artwork-cdn.7static.com/static/img/sleeveart/00/039/687/0003968720_500.jpg" ,
 folder = True )
 if 75 - 75: IIoooO0ooO0oo . IIoooO0ooO0oo + OOO / Ii - oOoii1
 plugintools . add_item (

 title = "Now Power Ballads" ,
 url = "plugin://plugin.video.youtube/playlist/" + iIiII1 + "/" ,
 thumbnail = "http://img15.nnm.me/e/7/5/1/1/8b4a5c0dd668f2997a8e09f1695_prev.jpg" ,
 folder = True )
 if 49 - 49: oOO + iIiiIi * IIoooO0ooO0oo % oOO0oOOoOooo - i11Ii
 plugintools . add_item (

 title = "Now 80's" ,
 url = "plugin://plugin.video.youtube/playlist/" + I11I1IiiI1IIi + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/817iO3O9vfL._SL1500_.jpg" ,
 folder = True )
 if 6 - 6: oO0O + IiI1ii1IIiI1 / ii11Ii11i / ii11Ii11i / oO0O + IiI1ii1IIiI1
 plugintools . add_item (

 title = "Now 90's" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOOoOO + "/" ,
 thumbnail = "http://tesco.scene7.com/is/image/tesco/493-2421_PI_1000025MN?wid=493&ht=538" ,
 folder = True )
 if 5 - 5: OOO . oO0O - Ii
 plugintools . add_item (

 title = "Now 00's" ,
 url = "plugin://plugin.video.youtube/playlist/" + iII1iIIiIi11I + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/now00s.jpg" ,
 folder = True )
 if 33 - 33: II1Ii1 / OOoOoO0o0o0OO - i11Ii
 plugintools . add_item (

 title = "Now No.1's" ,
 url = "plugin://plugin.video.youtube/playlist/" + IiI1iI + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOWno1s.jpg" ,
 folder = True )
 if 43 - 43: IIoooO0ooO0oo + OOO * oOoii1 . I1
 plugintools . add_item (

 title = "Now 21st Century" ,
 url = "plugin://plugin.video.youtube/playlist/" + iII1Ii + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/91wmfiSXm0L._SL1500_.jpg" ,
 folder = True )
 if 16 - 16: ii11Ii11i + OOoOoO0o0o0OO - IiI1ii1IIiI1 / oOO0oOOoOooo + oOO
 plugintools . add_item (

 title = "Now Sing" ,
 url = "plugin://plugin.video.youtube/playlist/" + o0O + "/" ,
 thumbnail = "http://midlifegamer.net/wp-content/uploads/2015/10/NTWICS.jpg" ,
 folder = True )
 if 65 - 65: oOO0oOOoOooo / i11Ii / oO0o0 / oOO
 plugintools . add_item (

 title = "Now Party" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0OooO0 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/Now-Party-1024x1024.jpg" ,
 folder = True )
 if 39 - 39: Ii + Ii
 plugintools . add_item (

 title = "Now Rock Ballads" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI111I1iIiIi + "/" ,
 thumbnail = "https://images-na.ssl-images-amazon.com/images/I/618hAw24%2BRL._SY300_.jpg" ,
 folder = True )
 if 6 - 6: oOO
 plugintools . add_item (

 title = "Now Chilled" ,
 url = "plugin://plugin.video.youtube/playlist/" + Oo000ooO0OO + "/" ,
 thumbnail = "https://images-eu.ssl-images-amazon.com/images/I/61Q9IGKQZBL._SL500_AA280_.jpg" ,
 folder = True )
 if 45 - 45: iiIIi1i1Iii % I1 - iiIi1IiI / oO0O % oOO - ii11Ii11i
 plugintools . add_item (

 title = "Now Musicals" ,
 url = "plugin://plugin.video.youtube/playlist/" + ooOOOO0o + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOWMusicals2.png" ,
 folder = True )
 if 82 - 82: O0OOo0 % O0OOo0 . i11Ii - IIII
 plugintools . add_item (

 title = "Now USA" ,
 url = "plugin://plugin.video.youtube/playlist/" + O000oOOo + "/" ,
 thumbnail = "http://ecx.images-amazon.com/images/I/81nq7JhBUUL._SL1417_.jpg" ,
 folder = True )
 if 33 - 33: IiI1ii1IIiI1 / IIII . iiIi1IiI . oOoii1
 plugintools . add_item (

 title = "Now 25 Years" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOOoO00Oo + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW-25-Years.jpg" ,
 folder = True )
 if 85 - 85: OOO / iIiiIi . oOO0oOOoOooo - II
 plugintools . add_item (

 title = "Now 30 Years" ,
 url = "plugin://plugin.video.youtube/playlist/" + oOOo + "/" ,
 thumbnail = "http://thelatest.co.uk/files/2013/05/Now-30-Years-Sleeve.jpg" ,
 folder = True )
 if 78 - 78: OOO + II1Ii1 % oOO
 plugintools . add_item (

 title = "Now R&B" ,
 url = "plugin://plugin.video.youtube/playlist/" + OOOi1 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/nowrb.jpeg" ,
 folder = True )
 if 71 - 71: oO0o0 - IiI1ii1IIiI1 % IiI1ii1IIiI1
 plugintools . add_item (

 title = "Now Million" ,
 url = "plugin://plugin.video.youtube/playlist/" + iI1OO0OOo + "/" ,
 thumbnail = "http://www.officialcharts.com/media/318845/now_thats_what_i_call_a_million.jpg?width=500&height=500" ,
 folder = True )
 if 1 - 1: oO0o0 / IIII - O0OOo0 . IiI1ii1IIiI1
 plugintools . add_item (

 title = "Now Club Hits" ,
 url = "plugin://plugin.video.youtube/playlist/" + iiIiiiIIi1 + "/" ,
 thumbnail = "http://cdn.smehost.net/nowmusiccom-ukprod/wp-content/uploads/NOW-Club-Hits-1024x900.jpg" ,
 folder = True )
 if 59 - 59: OOO - I1 * Ii + oO0o0
 plugintools . add_item (

 title = "Now Love" ,
 url = "plugin://plugin.video.youtube/playlist/" + O0OO00oO00Oo + "/" ,
 thumbnail = "https://upload.wikimedia.org/wikipedia/en/e/e2/Now_That's_What_I_Call_Love_3.jpg" ,
 folder = True )
 if 96 - 96: ii11Ii11i / OOoOoO0o0o0OO / ii11Ii11i / oOO0oOOoOooo % oOO0oOOoOooo
 plugintools . add_item (

 title = "Now Music" ,
 url = "plugin://plugin.video.youtube/playlist/" + o00OO00 + "/" ,
 thumbnail = "http://a1491.phobos.apple.com/us/r30/Purple4/v4/c2/b7/97/c2b79704-18bf-960c-f5f6-877b12af4af1/mzl.vmknkzkm.png" ,
 folder = True )
 if 74 - 74: ii11Ii11i / oOO0oOOoOooo * oO0O . II + ii11Ii11i
iIIOOo00ooo0 ( ) # 807cb1bfffb234dace3f930f571a9039d76f4cf9
')