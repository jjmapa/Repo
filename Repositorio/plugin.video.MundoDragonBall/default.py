import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCmltcG9ydCB1cmxsaWINCmltcG9ydCB1cmxsaWIyDQppbXBvcnQgcmUNCmltcG9ydCBvcw0KaW1wb3J0IHhibWNwbHVnaW4NCmltcG9ydCB4Ym1jZ3VpDQppbXBvcnQgeGJtY2FkZG9uDQppbXBvcnQgeGJtY3Zmcw0KaW1wb3J0IHRyYWNlYmFjaw0KaW1wb3J0IGNvb2tpZWxpYixiYXNlNjQNCg0KZnJvbSBCZWF1dGlmdWxTb3VwIGltcG9ydCBCZWF1dGlmdWxTdG9uZVNvdXAsIEJlYXV0aWZ1bFNvdXAsIEJlYXV0aWZ1bFNPQVANCnZpZXdtb2RlPU5vbmUNCnRyeToNCiAgICBmcm9tIHhtbC5zYXguc2F4dXRpbHMgaW1wb3J0IGVzY2FwZQ0KZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKCkNCnRyeToNCiAgICBpbXBvcnQganNvbg0KZXhjZXB0Og0KICAgIGltcG9ydCBzaW1wbGVqc29uIGFzIGpzb24NCmltcG9ydCBTaW1wbGVEb3dubG9hZGVyIGFzIGRvd25sb2FkZXINCmltcG9ydCB0aW1lDQoNCnRyeToNCiAgIGltcG9ydCBzc2wNCiAgIHNzbC5fY3JlYXRlX2RlZmF1bHRfaHR0cHNfY29udGV4dCA9IHNzbC5fY3JlYXRlX3VudmVyaWZpZWRfY29udGV4dA0KZXhjZXB0Og0KICAgcGFzcw0KICAgDQppbXBvcnQgemlwZmlsZQ0KDQpkZWYgRXh0cmFjdEFsbChfaW4sIF9vdXQpOg0KICAgIHRyeToNCiAgICAgICAgemluID0gemlwZmlsZS5aaXBGaWxlKF9pbiwgJ3InKQ0KICAgICAgICB6aW4uZXh0cmFjdGFsbChfb3V0KQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24sIGU6DQogICAgICAgIHByaW50IHN0cihlKQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIHJldHVybiBUcnVlDQoNCg0KDQpkZWYgUmVwbygpOg0KICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoInNwZWNpYWw6Ly9ob21lL2FkZG9ucy8iKS5kZWNvZGUoInV0Zi04IiksICdyZXBvc2l0b3J5LmFkcnlhbicpKToNCiAgICAgICAgcmV0dXJuDQogICAgICAgIA0KICAgIHVybCA9ICJodHRwOi8vd3d3LnBhc3RlYmluLmNvbSINCiAgICBhZGRvbnNEaXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZScsICdhZGRvbnMnKSkuZGVjb2RlKCJ1dGYtOCIpDQogICAgcGFja2FnZUZpbGUgPSBvcy5wYXRoLmpvaW4oYWRkb25zRGlyLCAncGFja2FnZXMnLCAnaXNyLnppcCcpDQogICAgDQogICAgdXJsbGliLnVybHJldHJpZXZlKHVybCwgcGFja2FnZUZpbGUpDQogICAgRXh0cmFjdEFsbChwYWNrYWdlRmlsZSwgYWRkb25zRGlyKQ0KICAgICAgICANCiAgICB0cnk6DQogICAgICAgIG9zLnJlbW92ZShwYWNrYWdlRmlsZSkNCiAgICBleGNlcHQ6DQogICAgICAgIHBhc3MNCiAgICAgICAgICAgIA0KICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlVwZGF0ZUxvY2FsQWRkb25zIikNCiAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJVcGRhdGVBZGRvblJlcG9zIikNCg0KDQpSZXBvKCkNCnRzZG93bmxvYWRlcj1GYWxzZQ0KaGxzcmV0cnk9RmFsc2UNCnJlc29sdmVfdXJsPVsnMTgwdXBsb2FkLmNvbScsICdhbGxteXZpZGVvcy5uZXQnLCAnYmVzdHJlYW1zLm5ldCcsICdjbGlja251cGxvYWQuY29tJywgJ2Nsb3VkemlsbGEudG8nLCAnbW92c2hhcmUubmV0JywgJ25vdmFtb3YuY29tJywgJ25vd3ZpZGVvLnN4JywgJ3ZpZGVvd2VlZC5lcycsICdkYWNsaXBzLmluJywgJ2RhdGVtdWxlLmNvbScsICdmYXN0dmlkZW8uaW4nLCAnZmFzdHN0cmVhbS5pbicsICdmaWxlaG9vdC5jb20nLCAnZmlsZW51a2UuY29tJywgJ3NoYXJlc2l4LmNvbScsICAncGx1cy5nb29nbGUuY29tJywgJ3BpY2FzYXdlYi5nb29nbGUuY29tJywgJ2dvcmlsbGF2aWQuY29tJywgJ2dvcmlsbGF2aWQuaW4nLCAnZ3JpZnRob3N0LmNvbScsICdodWdlZmlsZXMubmV0JywgJ2lwaXRob3MudG8nLCAnaXNoYXJlZC5ldScsICdraW5nZmlsZXMubmV0JywgJ21haWwucnUnLCAnbXkubWFpbC5ydScsICd2aWRlb2FwaS5teS5tYWlsLnJ1JywgJ21pZ2h0eXVwbG9hZC5jb20nLCAnbW9vc2hhcmUuYml6JywgJ21vdmRpdnguY29tJywgJ21vdnBvZC5uZXQnLCAnbW92cG9kLmluJywgJ21vdnJlZWwuY29tJywgJ21yZmlsZS5tZScsICdub3N2aWRlby5jb20nLCAnb3BlbmxvYWQuaW8nLCAncGxheWVkLnRvJywgJ2JpdHNoYXJlLmNvbScsICdmaWxlZmFjdG9yeS5jb20nLCAnazJzLmNjJywgJ29ib29tLmNvbScsICdyYXBpZGdhdG9yLm5ldCcsICdwcmltZXNoYXJlLnR2JywgJ2JpdHNoYXJlLmNvbScsICdmaWxlZmFjdG9yeS5jb20nLCAnazJzLmNjJywgJ29ib29tLmNvbScsICdyYXBpZGdhdG9yLm5ldCcsICdzaGFyZXJlcG8uY29tJywgJ3N0YWdldnUuY29tJywgJ3N0cmVhbWNsb3VkLmV1JywgJ3N0cmVhbWluLnRvJywgJ3RoZWZpbGUubWUnLCAndGhldmlkZW8ubWUnLCAndHVzZmlsZXMubmV0JywgJ3VwbG9hZGMuY29tJywgJ3phbGFhLmNvbScsICd1cGxvYWRyb2NrZXQubmV0JywgJ3VwdG9ib3guY29tJywgJ3Ytdmlkcy5jb20nLCAndmVlaGQuY29tJywgJ3ZpZGJ1bGwuY29tJywgJ3ZpZGVvbWVnYS50dicsICd2aWRwbGF5Lm5ldCcsICd2aWRzcG90Lm5ldCcsICd2aWR0by5tZScsICd2aWR6aS50dicsICd2aW1lby5jb20nLCAndmsuY29tJywgJ3ZvZGxvY2tlci5jb20nLCAneGZpbGVsb2FkLmNvbScsICd4dmlkc3RhZ2UuY29tJywgJ3pldHRhaG9zdC50diddDQpnX2lnbm9yZVNldFJlc29sdmVkPVsncGx1Z2luLnZpZGVvLmRyYW1hc29ubGluZScsJ3BsdWdpbi52aWRlby5mNG1UZXN0ZXInLCdwbHVnaW4udmlkZW8uc2hhaGlkbWJjbmV0JywncGx1Z2luLnZpZGVvLlNwb3J0c0RldmlsJywncGx1Z2luLnN0cmVhbS52YXVnaG5saXZlLnR2JywncGx1Z2luLnZpZGVvLlplbVRWLXNoYW5pJ10NCmdsb2JhbCBnTFNQcm9EeW5hbWljQ29kZU51bWJlcg0KZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXI9MA0KY2xhc3MgTm9SZWRpcmVjdGlvbih1cmxsaWIyLkhUVFBFcnJvclByb2Nlc3Nvcik6DQogICBkZWYgaHR0cF9yZXNwb25zZShzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6DQogICAgICAgcmV0dXJuIHJlc3BvbnNlDQogICBodHRwc19yZXNwb25zZSA9IGh0dHBfcmVzcG9uc2UNCg0KUkVNT1RFX0RCRz1GYWxzZTsNCmlmIFJFTU9URV9EQkc6DQogICAgIyBNYWtlIHB5ZGV2IGRlYnVnZ2VyIHdvcmtzIGZvciBhdXRvIHJlbG9hZC4NCiAgICAjIE5vdGUgcHlkZXZkIG1vZHVsZSBuZWVkIHRvIGJlIGNvcGllZCBpbiBYQk1DXHN5c3RlbVxweXRob25cTGliXHB5c3JjDQogICAgdHJ5Og0KICAgICAgICBpbXBvcnQgcHlzcmMucHlkZXZkIGFzIHB5ZGV2ZA0KICAgICMgc3Rkb3V0VG9TZXJ2ZXIgYW5kIHN0ZGVyclRvU2VydmVyIHJlZGlyZWN0IHN0ZG91dCBhbmQgc3RkZXJyIHRvIGVjbGlwc2UgY29uc29sZQ0KICAgICAgICBweWRldmQuc2V0dHJhY2UoJ2xvY2FsaG9zdCcsIHN0ZG91dFRvU2VydmVyPVRydWUsIHN0ZGVyclRvU2VydmVyPVRydWUpDQogICAgZXhjZXB0IEltcG9ydEVycm9yOg0KICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCJFcnJvcjogIiArDQogICAgICAgICAgICAiWW91IG11c3QgYWRkIG9yZy5weXRob24ucHlkZXYuZGVidWcucHlzcmMgdG8geW91ciBQWVRIT05QQVRILiIpDQogICAgICAgIHN5cy5leGl0KDEpDQoNCmFkZG9uID0geGJtY2FkZG9uLkFkZG9uKCdwbHVnaW4udmlkZW8uTXVuZG9EcmFnb25CYWxsJykNCmFkZG9uX3ZlcnNpb24gPSBhZGRvbi5nZXRBZGRvbkluZm8oJ3ZlcnNpb24nKQ0KcHJvZmlsZSA9IHhibWMudHJhbnNsYXRlUGF0aChhZGRvbi5nZXRBZGRvbkluZm8oJ3Byb2ZpbGUnKS5kZWNvZGUoJ3V0Zi04JykpDQpob21lID0geGJtYy50cmFuc2xhdGVQYXRoKGFkZG9uLmdldEFkZG9uSW5mbygncGF0aCcpLmRlY29kZSgndXRmLTgnKSkNCmZhdm9yaXRlcyA9IG9zLnBhdGguam9pbihwcm9maWxlLCAnZmF2b3JpdGVzJykNCmhpc3RvcnkgPSBvcy5wYXRoLmpvaW4ocHJvZmlsZSwgJ2hpc3RvcnknKQ0KUkVWID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICdsaXN0X3JldmlzaW9uJykNCmljb24gPSBvcy5wYXRoLmpvaW4oaG9tZSwgJ2ljb24ucG5nJykNCmZhdm9yaXRvcyA9ICJodHRwczovL2dpdGh1Yi5jb20vZGpsaXB0di9EcmFnb25CYWxsQWRkb24vYmxvYi9tYXN0ZXIvUGljcy9mYXZvcml0b3MucG5nP3Jhdz10cnVlIg0KRkFOQVJUID0gb3MucGF0aC5qb2luKGhvbWUsICdmYW5hcnQuanBnJykNCnNvdXJjZV9maWxlID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICdzb3VyY2VfZmlsZScpDQpmdW5jdGlvbnNfZGlyID0gcHJvZmlsZQ0KDQpjb21tdW5pdHlmaWxlcyA9IG9zLnBhdGguam9pbihwcm9maWxlLCAnTGl2ZXdlYlRWJykNCmRvd25sb2FkZXIgPSBkb3dubG9hZGVyLlNpbXBsZURvd25sb2FkZXIoKQ0KZGVidWcgPSBhZGRvbi5nZXRTZXR0aW5nKCdkZWJ1ZycpDQppZiBvcy5wYXRoLmV4aXN0cyhmYXZvcml0ZXMpPT1UcnVlOg0KICAgIEZBViA9IG9wZW4oZmF2b3JpdGVzKS5yZWFkKCkNCmVsc2U6IEZBViA9IFtdDQoNClNPVVJDRVMgPSBbeyJ1cmwiOiAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RqbGlwdHYvRHJhZ29uQmFsbEFkZG9uL21hc3Rlci9CYXNlLnhtbCIsICJmYW5hcnQiOiAiaHR0cHM6Ly9naXRodWIuY29tL2RqbGlwdHYvRHJhZ29uQmFsbEFkZG9uL2Jsb2IvbWFzdGVyL1BpY3MvRHJhZ29uQmFsbE11bmRvRmFuYXJ0LmpwZz9yYXc9dHJ1ZSJ9XQ0KDQoNCmRlZiBhZGRvbl9sb2coc3RyaW5nKToNCiAgICBpZiBkZWJ1ZyA9PSAndHJ1ZSc6DQogICAgICAgIHhibWMubG9nKCJbYWRkb24uTXVuZG9EcmFnb25CYWxsLSVzXTogJXMiICUoYWRkb25fdmVyc2lvbiwgc3RyaW5nKSkNCg0KCQ0KCQkNCg0KZGVmIG1ha2VSZXF1ZXN0KHVybCwgaGVhZGVycz1Ob25lKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOg0KICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItYWdlbnQnIDogJ0RBTkknfQ0KDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAnfCcgaW4gdXJsOg0KICAgICAgICAgICAgICAgIHVybCxoZWFkZXJfaW5fcGFnZT11cmwuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgIGhlYWRlcl9pbl9wYWdlPWhlYWRlcl9pbl9wYWdlLnNwbGl0KCcmJykNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBmb3IgaCBpbiBoZWFkZXJfaW5fcGFnZToNCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGguc3BsaXQoJz0nKSk9PTI6DQogICAgICAgICAgICAgICAgICAgICAgICBuLHY9aC5zcGxpdCgnPScpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICB2YWxzPWguc3BsaXQoJz0nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbj12YWxzWzBdDQogICAgICAgICAgICAgICAgICAgICAgICB2PSc9Jy5qb2luKHZhbHNbMTpdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgI24sdj1oLnNwbGl0KCc9JykNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgbix2DQogICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbl09dg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwsTm9uZSxoZWFkZXJzKQ0KICAgICAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQ0KICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLnJlYWQoKQ0KICAgICAgICAgICAgcmVzcG9uc2UuY2xvc2UoKQ0KICAgICAgICAgICAgcmV0dXJuIGRhdGENCiAgICAgICAgZXhjZXB0IHVybGxpYjIuVVJMRXJyb3IsIGU6DQogICAgICAgICAgICBhZGRvbl9sb2coJ1VSTDogJyt1cmwpDQogICAgICAgICAgICBpZiBoYXNhdHRyKGUsICdjb2RlJyk6DQogICAgICAgICAgICAgICAgYWRkb25fbG9nKCdXZSBmYWlsZWQgd2l0aCBlcnJvciBjb2RlIC0gJXMuJyAlIGUuY29kZSkNCiAgICAgICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihNdW5kb0RyYWdvbkJhbGwsV2UgZmFpbGVkIHdpdGggZXJyb3IgY29kZSAtICIrc3RyKGUuY29kZSkrIiwxMDAwMCwiK2ljb24rIikiKQ0KCQkJCQ0KICAgICAgICAgICAgZWxpZiBoYXNhdHRyKGUsICdyZWFzb24nKToNCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1dlIGZhaWxlZCB0byByZWFjaCBhIHNlcnZlci4nKQ0KICAgICAgICAgICAgICAgIGFkZG9uX2xvZygnUmVhc29uOiAlcycgJWUucmVhc29uKQ0KICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKE11bmRvRHJhZ29uQmFsbCxXZSBmYWlsZWQgdG8gcmVhY2ggYSBzZXJ2ZXIuIC0gIitzdHIoZS5yZWFzb24pKyIsMTAwMDAsIitpY29uKyIpIikNCg0KCQkJCQkJCQkNCgkJCQkNCgkJCQkNCmRlZiBnZXRTb3VyY2VzKCk6DQoJdHJ5Og0KCQlpZiBvcy5wYXRoLmV4aXN0cyhmYXZvcml0ZXMpID09IFRydWU6DQoJCQlGQVYgPSBvcGVuKGZhdm9yaXRlcykucmVhZCgpDQoJCQlpZiBGQVYgPT0gIltdIjoNCgkJCQlvcy5yZW1vdmUoZmF2b3JpdGVzKQ0KCQkJZWxzZToNCgkJCQkjYWRkRGlyKCdbQ09MT1Igd2hpdGVdW0JdRkFWT1JJVE9TWy9DT0xPUl1bL0JdJywndXJsJyw0LG9zLnBhdGguam9pbihob21lLCAncmVzb3VyY2VzJywgJycpLEZBTkFSVCwnJywnJywnJywnJykNCgkJCQlhZGREaXIoJ1tDT0xPUiBvcmFuZ2VdRmF2b3JpdG9zWy9DT0xPUl0nLCd1cmwnLDQsZmF2b3JpdG9zLEZBTkFSVCwnJywnJywnJywnJykNCiAgICAgICAgICAgICAgIA0KCQlzb3VyY2VzID0gU09VUkNFUw0KICAgICAgICAgICAgICAgICNwcmludCAnc291cmNlcycsc291cmNlcw0KICAgICAgICAgICAgICAgIGlmIGxlbihzb3VyY2VzKSA+IDE6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHNvdXJjZXM6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMgZm9yIHByZSAxLjAuOCBzb3VyY2VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpLCBsaXN0KToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKGlbMF0uZW5jb2RlKCd1dGYtOCcpLGlbMV0uZW5jb2RlKCd1dGYtOCcpLDEsaWNvbixGQU5BUlQsJycsJycsJycsJycsJ3NvdXJjZScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWIgPSBpY29uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbmFydCA9IEZBTkFSVA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjID0gJycNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRpdHMgPSAnREFOSScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAnJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpLmhhc19rZXkoJ3RodW1ibmFpbCcpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWIgPSBpWyd0aHVtYm5haWwnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpLmhhc19rZXkoJ2ZhbmFydCcpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFuYXJ0ID0gaVsnZmFuYXJ0J10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaS5oYXNfa2V5KCdkZXNjcmlwdGlvbicpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9IGlbJ2Rlc2NyaXB0aW9uJ10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaS5oYXNfa2V5KCdkYXRlJyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gaVsnZGF0ZSddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkuaGFzX2tleSgnZ2VucmUnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbnJlID0gaVsnZ2VucmUnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpLmhhc19rZXkoJ2NyZWRpdHMnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRpdHMgPSBpWydjcmVkaXRzJ10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKGlbJ3RpdGxlJ10uZW5jb2RlKCd1dGYtOCcpLGlbJ3VybCddLmVuY29kZSgndXRmLTgnKSwxLHRodW1iLGZhbmFydCxkZXNjLGdlbnJlLGRhdGUsY3JlZGl0cywnc291cmNlJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogdHJhY2ViYWNrLnByaW50X2V4YygpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHNvdXJjZXMpID09IDE6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNvdXJjZXNbMF0sIGxpc3QpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldERhdGEoc291cmNlc1swXVsxXS5lbmNvZGUoJ3V0Zi04JyksRkFOQVJUKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhKHNvdXJjZXNbMF1bJ3VybCddLCBzb3VyY2VzWzBdWydmYW5hcnQnXSkNCiAgICAgICAgZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKCkNCg0KZGVmIGFkZFNvdXJjZSh1cmw9Tm9uZSk6DQogICAgICAgIGlmIHVybCBpcyBOb25lOg0KICAgICAgICAgICAgaWYgbm90IGFkZG9uLmdldFNldHRpbmcoIm5ld19maWxlX3NvdXJjZSIpID09ICIiOg0KICAgICAgICAgICAgICAgc291cmNlX3VybCA9IGFkZG9uLmdldFNldHRpbmcoJ25ld19maWxlX3NvdXJjZScpLmRlY29kZSgndXRmLTgnKQ0KICAgICAgICAgICAgZWxpZiBub3QgYWRkb24uZ2V0U2V0dGluZygibmV3X3VybF9zb3VyY2UiKSA9PSAiIjoNCiAgICAgICAgICAgICAgIHNvdXJjZV91cmwgPSBhZGRvbi5nZXRTZXR0aW5nKCduZXdfdXJsX3NvdXJjZScpLmRlY29kZSgndXRmLTgnKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc291cmNlX3VybCA9IHVybA0KICAgICAgICBpZiBzb3VyY2VfdXJsID09ICcnIG9yIHNvdXJjZV91cmwgaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBhZGRvbl9sb2coJ0FkZGluZyBOZXcgU291cmNlOiAnK3NvdXJjZV91cmwuZW5jb2RlKCd1dGYtOCcpKQ0KDQogICAgICAgIG1lZGlhX2luZm8gPSBOb25lDQogICAgICAgICNwcmludCAnc291cmNlX3VybCcsc291cmNlX3VybA0KICAgICAgICBkYXRhID0gZ2V0U291cChzb3VyY2VfdXJsKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICBpZiBpc2luc3RhbmNlKGRhdGEsQmVhdXRpZnVsU09BUCk6DQogICAgICAgICAgICBpZiBkYXRhLmZpbmQoJ2NoYW5uZWxzX2luZm8nKToNCiAgICAgICAgICAgICAgICBtZWRpYV9pbmZvID0gZGF0YS5jaGFubmVsc19pbmZvDQogICAgICAgICAgICBlbGlmIGRhdGEuZmluZCgnaXRlbXNfaW5mbycpOg0KICAgICAgICAgICAgICAgIG1lZGlhX2luZm8gPSBkYXRhLml0ZW1zX2luZm8NCiAgICAgICAgaWYgbWVkaWFfaW5mbzoNCiAgICAgICAgICAgIHNvdXJjZV9tZWRpYSA9IHt9DQogICAgICAgICAgICBzb3VyY2VfbWVkaWFbJ3VybCddID0gc291cmNlX3VybA0KICAgICAgICAgICAgdHJ5OiBzb3VyY2VfbWVkaWFbJ3RpdGxlJ10gPSBtZWRpYV9pbmZvLnRpdGxlLnN0cmluZw0KICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsndGh1bWJuYWlsJ10gPSBtZWRpYV9pbmZvLnRodW1ibmFpbC5zdHJpbmcNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgdHJ5OiBzb3VyY2VfbWVkaWFbJ2ZhbmFydCddID0gbWVkaWFfaW5mby5mYW5hcnQuc3RyaW5nDQogICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgIHRyeTogc291cmNlX21lZGlhWydnZW5yZSddID0gbWVkaWFfaW5mby5nZW5yZS5zdHJpbmcNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgdHJ5OiBzb3VyY2VfbWVkaWFbJ2Rlc2NyaXB0aW9uJ10gPSBtZWRpYV9pbmZvLmRlc2NyaXB0aW9uLnN0cmluZw0KICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsnZGF0ZSddID0gbWVkaWFfaW5mby5kYXRlLnN0cmluZw0KICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsnY3JlZGl0cyddID0gbWVkaWFfaW5mby5jcmVkaXRzLnN0cmluZw0KICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBpZiAnLycgaW4gc291cmNlX3VybDoNCiAgICAgICAgICAgICAgICBuYW1lU3RyID0gc291cmNlX3VybC5zcGxpdCgnLycpWy0xXS5zcGxpdCgnLicpWzBdDQogICAgICAgICAgICBpZiAnXFwnIGluIHNvdXJjZV91cmw6DQogICAgICAgICAgICAgICAgbmFtZVN0ciA9IHNvdXJjZV91cmwuc3BsaXQoJ1xcJylbLTFdLnNwbGl0KCcuJylbMF0NCiAgICAgICAgICAgIGlmICclJyBpbiBuYW1lU3RyOg0KICAgICAgICAgICAgICAgIG5hbWVTdHIgPSB1cmxsaWIudW5xdW90ZV9wbHVzKG5hbWVTdHIpDQogICAgICAgICAgICBrZXlib2FyZCA9IHhibWMuS2V5Ym9hcmQobmFtZVN0ciwnRGlzcGxheWVkIE5hbWUsIFJlbmFtZT8nKQ0KICAgICAgICAgICAga2V5Ym9hcmQuZG9Nb2RhbCgpDQogICAgICAgICAgICBpZiAoa2V5Ym9hcmQuaXNDb25maXJtZWQoKSA9PSBGYWxzZSk6DQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICBuZXdTdHIgPSBrZXlib2FyZC5nZXRUZXh0KCkNCiAgICAgICAgICAgIGlmIGxlbihuZXdTdHIpID09IDA6DQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICBzb3VyY2VfbWVkaWEgPSB7fQ0KICAgICAgICAgICAgc291cmNlX21lZGlhWyd0aXRsZSddID0gbmV3U3RyDQogICAgICAgICAgICBzb3VyY2VfbWVkaWFbJ3VybCddID0gc291cmNlX3VybA0KICAgICAgICAgICAgc291cmNlX21lZGlhWydmYW5hcnQnXSA9IGZhbmFydA0KDQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHNvdXJjZV9maWxlKT09RmFsc2U6DQogICAgICAgICAgICBzb3VyY2VfbGlzdCA9IFtdDQogICAgICAgICAgICBzb3VyY2VfbGlzdC5hcHBlbmQoc291cmNlX21lZGlhKQ0KICAgICAgICAgICAgYiA9IG9wZW4oc291cmNlX2ZpbGUsInciKQ0KICAgICAgICAgICAgYi53cml0ZShqc29uLmR1bXBzKHNvdXJjZV9saXN0KSkNCiAgICAgICAgICAgIGIuY2xvc2UoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc291cmNlcyA9IGpzb24ubG9hZHMob3Blbihzb3VyY2VfZmlsZSwiciIpLnJlYWQoKSkNCiAgICAgICAgICAgIHNvdXJjZXMuYXBwZW5kKHNvdXJjZV9tZWRpYSkNCiAgICAgICAgICAgIGIgPSBvcGVuKHNvdXJjZV9maWxlLCJ3IikNCiAgICAgICAgICAgIGIud3JpdGUoanNvbi5kdW1wcyhzb3VyY2VzKSkNCiAgICAgICAgICAgIGIuY2xvc2UoKQ0KICAgICAgICBhZGRvbi5zZXRTZXR0aW5nKCduZXdfdXJsX3NvdXJjZScsICIiKQ0KICAgICAgICBhZGRvbi5zZXRTZXR0aW5nKCduZXdfZmlsZV9zb3VyY2UnLCAiIikNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oTXVuZG9EcmFnb25CYWxsLE5ldyBzb3VyY2UgYWRkZWQuLDUwMDAsIitpY29uKyIpIikNCiAgICAgICAgaWYgbm90IHVybCBpcyBOb25lOg0KICAgICAgICAgICAgaWYgJ3hibWNwbHVzLnhiLmZ1bnBpYy5kZScgaW4gdXJsOg0KICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuQ29udGFpbmVyLlVwZGF0ZSglcz9tb2RlPTE0LHJlcGxhY2UpIiAlc3lzLmFyZ3ZbMF0pDQogICAgICAgICAgICBlbGlmICdjb21tdW5pdHktbGlua3MnIGluIHVybDoNCiAgICAgICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLkNvbnRhaW5lci5VcGRhdGUoJXM/bW9kZT0xMCxyZXBsYWNlKSIgJXN5cy5hcmd2WzBdKQ0KICAgICAgICBlbHNlOiBhZGRvbi5vcGVuU2V0dGluZ3MoKQ0KDQpkZWYgcm1Tb3VyY2UobmFtZSk6DQogICAgICAgIHNvdXJjZXMgPSBqc29uLmxvYWRzKG9wZW4oc291cmNlX2ZpbGUsInIiKS5yZWFkKCkpDQogICAgICAgIGZvciBpbmRleCBpbiByYW5nZShsZW4oc291cmNlcykpOg0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzb3VyY2VzW2luZGV4XSwgbGlzdCk6DQogICAgICAgICAgICAgICAgaWYgc291cmNlc1tpbmRleF1bMF0gPT0gbmFtZToNCiAgICAgICAgICAgICAgICAgICAgZGVsIHNvdXJjZXNbaW5kZXhdDQogICAgICAgICAgICAgICAgICAgIGIgPSBvcGVuKHNvdXJjZV9maWxlLCJ3IikNCiAgICAgICAgICAgICAgICAgICAgYi53cml0ZShqc29uLmR1bXBzKHNvdXJjZXMpKQ0KICAgICAgICAgICAgICAgICAgICBiLmNsb3NlKCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWYgc291cmNlc1tpbmRleF1bJ3RpdGxlJ10gPT0gbmFtZToNCiAgICAgICAgICAgICAgICAgICAgZGVsIHNvdXJjZXNbaW5kZXhdDQogICAgICAgICAgICAgICAgICAgIGIgPSBvcGVuKHNvdXJjZV9maWxlLCJ3IikNCiAgICAgICAgICAgICAgICAgICAgYi53cml0ZShqc29uLmR1bXBzKHNvdXJjZXMpKQ0KICAgICAgICAgICAgICAgICAgICBiLmNsb3NlKCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Db250YWluZXIuUmVmcmVzaCIpDQoNCmRlZiBnZXRfeG1sX2RhdGFiYXNlKHVybCwgYnJvd3NlPUZhbHNlKToNCiAgICAgICAgaWYgdXJsIGlzIE5vbmU6DQogICAgICAgICAgICB1cmwgPSAnaHR0cDovL3hibWNwbHVzLnhiLmZ1bnBpYy5kZS93d3ctZGF0YS9maWxlc3lzdGVtLycNCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAobWFrZVJlcXVlc3QodXJsKSwgY29udmVydEVudGl0aWVzPUJlYXV0aWZ1bFNvdXAuSFRNTF9FTlRJVElFUykNCiAgICAgICAgZm9yIGkgaW4gc291cCgnYScpOg0KICAgICAgICAgICAgaHJlZiA9IGlbJ2hyZWYnXQ0KICAgICAgICAgICAgaWYgbm90IGhyZWYuc3RhcnRzd2l0aCgnPycpOg0KICAgICAgICAgICAgICAgIG5hbWUgPSBpLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIFsnUGFyZW50IERpcmVjdG9yeScsICdyZWN5Y2xlX2Jpbi8nXToNCiAgICAgICAgICAgICAgICAgICAgaWYgaHJlZi5lbmRzd2l0aCgnLycpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnJvd3NlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtocmVmLDE1LGljb24sZmFuYXJ0LCcnLCcnLCcnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwraHJlZiwxNCxpY29uLGZhbmFydCwnJywnJywnJykNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBocmVmLmVuZHN3aXRoKCcueG1sJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBicm93c2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUsdXJsK2hyZWYsMSxpY29uLGZhbmFydCwnJywnJywnJywnJywnZG93bmxvYWQnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhzb3VyY2VfZmlsZSk9PVRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5hbWUgaW4gU09VUkNFUzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lKycgKGluIHVzZSknLHVybCtocmVmLDExLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwraHJlZiwxMSxpY29uLGZhbmFydCwnJywnJywnJywnJywnZG93bmxvYWQnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtocmVmLDExLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpDQoNCg0KZGVmIGdldENvbW11bml0eVNvdXJjZXMoYnJvd3NlPUZhbHNlKToNCiAgICAgICAgdXJsID0gJ2h0dHA6Ly9jb21tdW5pdHktbGlua3MuZ29vZ2xlY29kZS5jb20vc3ZuL3RydW5rLycNCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAobWFrZVJlcXVlc3QodXJsKSwgY29udmVydEVudGl0aWVzPUJlYXV0aWZ1bFNvdXAuSFRNTF9FTlRJVElFUykNCiAgICAgICAgZmlsZXMgPSBzb3VwKCd1bCcpWzBdKCdsaScpWzE6XQ0KICAgICAgICBmb3IgaSBpbiBmaWxlczoNCiAgICAgICAgICAgIG5hbWUgPSBpKCdhJylbMF1bJ2hyZWYnXQ0KICAgICAgICAgICAgaWYgYnJvd3NlOg0KICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtuYW1lLDEsaWNvbixmYW5hcnQsJycsJycsJycsJycsJ2Rvd25sb2FkJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUsdXJsK25hbWUsMTEsaWNvbixmYW5hcnQsJycsJycsJycsJycsJ2Rvd25sb2FkJykNCg0KZGVmIGdldFNvdXAodXJsLGRhdGE9Tm9uZSk6DQogICAgICAgIGdsb2JhbCB2aWV3bW9kZSx0c2Rvd25sb2FkZXIsIGhsc3JldHJ5DQogICAgICAgIHRzZG93bmxvYWRlcj1GYWxzZQ0KICAgICAgICBobHNyZXRyeT1GYWxzZQ0KICAgICAgICBpZiB1cmwuc3RhcnRzd2l0aCgnaHR0cDovLycpIG9yIHVybC5zdGFydHN3aXRoKCdodHRwczovLycpOg0KICAgICAgICAgICAgZW5ja2V5PUZhbHNlDQogICAgICAgICAgICBpZiAnJCRUU0RPV05MT0FERVIkJCcgaW4gdXJsOg0KICAgICAgICAgICAgICAgIHRzZG93bmxvYWRlcj1UcnVlDQogICAgICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCIkJFRTRE9XTkxPQURFUiQkIiwiIikNCiAgICAgICAgICAgIGlmICckJEhMU1JFVFJZJCQnIGluIHVybDoNCiAgICAgICAgICAgICAgICBobHNyZXRyeT1UcnVlDQogICAgICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCIkJEhMU1JFVFJZJCQiLCIiKQ0KICAgICAgICAgICAgaWYgJyQkTFNQcm9FbmNLZXk9JyBpbiB1cmw6DQogICAgICAgICAgICAgICAgZW5ja2V5PXVybC5zcGxpdCgnJCRMU1Byb0VuY0tleT0nKVsxXS5zcGxpdCgnJCQnKVswXQ0KICAgICAgICAgICAgICAgIHJwPSckJExTUHJvRW5jS2V5PSVzJCQnJWVuY2tleQ0KICAgICAgICAgICAgICAgIHVybD11cmwucmVwbGFjZShycCwiIikNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGRhdGEgPW1ha2VSZXF1ZXN0KHVybCkNCiAgICAgICAgICAgIGlmIGVuY2tleToNCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0IHB5YWVzDQogICAgICAgICAgICAgICAgICAgIGVuY2tleT1lbmNrZXkuZW5jb2RlKCJhc2NpaSIpDQogICAgICAgICAgICAgICAgICAgIHByaW50IGVuY2tleQ0KICAgICAgICAgICAgICAgICAgICBtaXNzaW5nYnl0ZXM9MTYtbGVuKGVuY2tleSkNCiAgICAgICAgICAgICAgICAgICAgZW5ja2V5PWVuY2tleSsoY2hyKDApKihtaXNzaW5nYnl0ZXMpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCByZXByKGVuY2tleSkNCiAgICAgICAgICAgICAgICAgICAgZGF0YT1iYXNlNjQuYjY0ZGVjb2RlKGRhdGEpDQogICAgICAgICAgICAgICAgICAgIGRlY3J5cHRvciA9IHB5YWVzLm5ldyhlbmNrZXkgLCBweWFlcy5NT0RFX0VDQiwgSVY9Tm9uZSkNCiAgICAgICAgICAgICAgICAgICAgZGF0YT1kZWNyeXB0b3IuZGVjcnlwdChkYXRhKS5zcGxpdCgnXDAnKVswXQ0KICAgICAgICAgICAgICAgICAgICAjcHJpbnQgcmVwcihkYXRhKQ0KICAgICAgICAgICAgaWYgcmUuc2VhcmNoKCIjRVhUTTNVIixkYXRhKSBvciAnbTN1JyBpbiB1cmw6DQojICAgICAgICAgICAgICAgIHByaW50ICdmb3VuZCBtM3UgZGF0YScNCiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YQ0KICAgICAgICBlbGlmIGRhdGEgPT0gTm9uZToNCiAgICAgICAgICAgIGlmIG5vdCAnLycgIGluIHVybCBvciBub3QgJ1xcJyBpbiB1cmw6DQojICAgICAgICAgICAgICAgIHByaW50ICdObyBkaXJlY3RvcnkgZm91bmQuIExldHMgbWFrZSB0aGUgdXJsIHRvIGNhY2hlIGRpcicNCiAgICAgICAgICAgICAgICB1cmwgPSBvcy5wYXRoLmpvaW4oY29tbXVuaXR5ZmlsZXMsdXJsKQ0KICAgICAgICAgICAgaWYgeGJtY3Zmcy5leGlzdHModXJsKToNCiAgICAgICAgICAgICAgICBpZiB1cmwuc3RhcnRzd2l0aCgic21iOi8vIikgb3IgdXJsLnN0YXJ0c3dpdGgoIm5mczovLyIpOg0KICAgICAgICAgICAgICAgICAgICBjb3B5ID0geGJtY3Zmcy5jb3B5KHVybCwgb3MucGF0aC5qb2luKHByb2ZpbGUsICd0ZW1wJywgJ3NvcmNlX3RlbXAudHh0JykpDQogICAgICAgICAgICAgICAgICAgIGlmIGNvcHk6DQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gb3Blbihvcy5wYXRoLmpvaW4ocHJvZmlsZSwgJ3RlbXAnLCAnc29yY2VfdGVtcC50eHQnKSwgInIiKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHhibWN2ZnMuZGVsZXRlKG9zLnBhdGguam9pbihwcm9maWxlLCAndGVtcCcsICdzb3JjZV90ZW1wLnR4dCcpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJmYWlsZWQgdG8gY29weSBmcm9tIHNtYjoiKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRhdGEgPSBvcGVuKHVybCwgJ3InKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgaWYgcmUubWF0Y2goIiNFWFRNM1UiLGRhdGEpb3IgJ20zdScgaW4gdXJsOg0KIyAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdmb3VuZCBtM3UgZGF0YScNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiU291cCBEYXRhIG5vdCBmb3VuZCEiKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICBpZiAnPFNldFZpZXdNb2RlPicgaW4gZGF0YToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICB2aWV3bW9kZT1yZS5maW5kYWxsKCc8U2V0Vmlld01vZGU+KC4qPyk8JyxkYXRhKVswXQ0KICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5TZXRWaWV3TW9kZSglcykiJXZpZXdtb2RlKQ0KICAgICAgICAgICAgICAgIHByaW50ICdkb25lIHNldHZpZXcnLHZpZXdtb2RlDQogICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgcmV0dXJuIEJlYXV0aWZ1bFNPQVAoZGF0YSwgY29udmVydEVudGl0aWVzPUJlYXV0aWZ1bFN0b25lU291cC5YTUxfRU5USVRJRVMpDQoNCmRlZiBwcm9jZXNzUHlGdW5jdGlvbihkYXRhKToNCiAgICB0cnk6DQogICAgICAgIGlmIGRhdGEgYW5kIGxlbihkYXRhKT4wIGFuZCBkYXRhLnN0YXJ0c3dpdGgoJyRweUZ1bmN0aW9uOicpOg0KICAgICAgICAgICAgZGF0YT1kb0V2YWwoZGF0YS5zcGxpdCgnJHB5RnVuY3Rpb246JylbMV0sJycsTm9uZSxOb25lICkNCiAgICBleGNlcHQ6IHBhc3MNCg0KICAgIHJldHVybiBkYXRhDQoNCmRlZiBnZXREYXRhKHVybCxmYW5hcnQsIGRhdGE9Tm9uZSk6DQogICAgaW1wb3J0IGNoZWNrYmFkDQogICAgY2hlY2tiYWQuZG9fYmxvY2tfY2hlY2soRmFsc2UpDQogICAgc291cCA9IGdldFNvdXAodXJsLGRhdGEpDQogICAgI3ByaW50IHR5cGUoc291cCkNCiAgICBpZiBpc2luc3RhbmNlKHNvdXAsQmVhdXRpZnVsU09BUCk6DQogICAgI3ByaW50ICd4eHh4eHh4eHh4c291cCcsc291cA0KICAgICAgICBpZiBsZW4oc291cCgnY2hhbm5lbHMnKSkgPiAwIGFuZCBhZGRvbi5nZXRTZXR0aW5nKCdkb25vdHNob3dieWNoYW5uZWxzJykgPT0gJ2ZhbHNlJzoNCiAgICAgICAgICAgIGNoYW5uZWxzID0gc291cCgnY2hhbm5lbCcpDQogICAgICAgICAgICBmb3IgY2hhbm5lbCBpbiBjaGFubmVsczoNCiMgICAgICAgICAgICAgICAgcHJpbnQgY2hhbm5lbA0KDQogICAgICAgICAgICAgICAgbGlua2VkVXJsPScnDQogICAgICAgICAgICAgICAgbGNvdW50PTANCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGxpbmtlZFVybCA9ICBjaGFubmVsKCdleHRlcm5hbGxpbmsnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgbGNvdW50PWxlbihjaGFubmVsKCdleHRlcm5hbGxpbmsnKSkNCiAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgICAgICAjcHJpbnQgJ2xpbmtlZFVybCcsbGlua2VkVXJsLGxjb3VudA0KICAgICAgICAgICAgICAgIGlmIGxjb3VudD4xOiBsaW5rZWRVcmw9JycNCg0KICAgICAgICAgICAgICAgIG5hbWUgPSBjaGFubmVsKCduYW1lJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBuYW1lPXByb2Nlc3NQeUZ1bmN0aW9uKG5hbWUpDQogICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IGNoYW5uZWwoJ3RodW1ibmFpbCcpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIHRodW1ibmFpbCA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWwgPSAnJw0KICAgICAgICAgICAgICAgIHRodW1ibmFpbD1wcm9jZXNzUHlGdW5jdGlvbih0aHVtYm5haWwpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBpZiBub3QgY2hhbm5lbCgnZmFuYXJ0Jyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCd1c2VfdGh1bWInKSA9PSAidHJ1ZSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFuQXJ0ID0gdGh1bWJuYWlsDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGZhbmFydA0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgZmFuQXJ0ID0gY2hhbm5lbCgnZmFuYXJ0JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgIGlmIGZhbkFydCA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGZhbmFydA0KDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBkZXNjID0gY2hhbm5lbCgnaW5mbycpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICBpZiBkZXNjID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgZGVzYyA9ICcnDQoNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGdlbnJlID0gY2hhbm5lbCgnZ2VucmUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgaWYgZ2VucmUgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICBnZW5yZSA9ICcnDQoNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGRhdGUgPSBjaGFubmVsKCdkYXRlJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgIGlmIGRhdGUgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICBkYXRlID0gJycNCg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgY3JlZGl0cyA9IGNoYW5uZWwoJ2NyZWRpdHMnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0cyA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIGNyZWRpdHMgPSAnJw0KDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBpZiBsaW5rZWRVcmw9PScnOg0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSx1cmwuZW5jb2RlKCd1dGYtOCcpLDIsdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsY3JlZGl0cyxUcnVlKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IGxpbmtlZFVybA0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcpLGxpbmtlZFVybC5lbmNvZGUoJ3V0Zi04JyksMSx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsZGF0ZSxOb25lLCdzb3VyY2UnKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCdUaGVyZSB3YXMgYSBwcm9ibGVtIGFkZGluZyBkaXJlY3RvcnkgZnJvbSBnZXREYXRhKCk6ICcrbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgYWRkb25fbG9nKCdObyBDaGFubmVsczogZ2V0SXRlbXMnKQ0KICAgICAgICAgICAgZ2V0SXRlbXMoc291cCgnaXRlbScpLGZhbmFydCkNCiAgICBlbHNlOg0KICAgICAgICBwYXJzZV9tM3Uoc291cCkNCiMgYm9ycm93IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VuZW45Mi9QMlAtU3RyZWFtcy1YQk1DL2Jsb2IvbWFzdGVyL3BsdWdpbi52aWRlby5wMnAtc3RyZWFtcy9yZXNvdXJjZXMvY29yZS9saXZlc3RyZWFtcy5weQ0KIyBUaGlzIHdpbGwgbm90IGdvIHRocm91Z2ggdGhlIGdldEl0ZW1zIGZ1bmN0aW9ucyAoIG1lYW5zIHlvdSBtdXN0IGhhdmUgcmVhZHkgdG8gcGxheSB1cmwsIG5vIHJlZ2V4KQ0KZGVmIHBhcnNlX20zdShkYXRhKToNCiAgICBjb250ZW50ID0gZGF0YS5yc3RyaXAoKQ0KICAgIG1hdGNoID0gcmUuY29tcGlsZShyJyNFWFRJTkY6KC4rPyksKC4qPylbXG5ccl0rKFteXHJcbl0rKScpLmZpbmRhbGwoY29udGVudCkNCiAgICB0b3RhbCA9IGxlbihtYXRjaCkNCiAgICBwcmludCAndHNkb3dubG9hZGVyJyx0c2Rvd25sb2FkZXINCiMgICAgcHJpbnQgJ3RvdGFsIG0zdSBsaW5rcycsdG90YWwNCiAgICBmb3Igb3RoZXIsY2hhbm5lbF9uYW1lLHN0cmVhbV91cmwgaW4gbWF0Y2g6DQogICAgICAgIA0KICAgICAgICBpZiAndHZnLWxvZ28nIGluIG90aGVyOg0KICAgICAgICAgICAgdGh1bWJuYWlsID0gcmVfbWUob3RoZXIsJ3R2Zy1sb2dvPVtcJyJdKC4qPylbXCciXScpDQogICAgICAgICAgICBpZiB0aHVtYm5haWw6DQogICAgICAgICAgICAgICAgaWYgdGh1bWJuYWlsLnN0YXJ0c3dpdGgoJ2h0dHAnKToNCiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gdGh1bWJuYWlsDQoNCiAgICAgICAgICAgICAgICBlbGlmIG5vdCBhZGRvbi5nZXRTZXR0aW5nKCdsb2dvLWZvbGRlclBhdGgnKSA9PSAiIjoNCiAgICAgICAgICAgICAgICAgICAgbG9nb191cmwgPSBhZGRvbi5nZXRTZXR0aW5nKCdsb2dvLWZvbGRlclBhdGgnKQ0KICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWwgPSBsb2dvX3VybCArIHRodW1ibmFpbA0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gdGh1bWJuYWlsDQogICAgICAgICAgICAjZWxzZToNCg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdGh1bWJuYWlsID0gJycNCiAgICAgICAgDQogICAgICAgIGlmICd0eXBlJyBpbiBvdGhlcjoNCiAgICAgICAgICAgIG1vZGVfdHlwZSA9IHJlX21lKG90aGVyLCd0eXBlPVtcJyJdKC4qPylbXCciXScpDQogICAgICAgICAgICBpZiBtb2RlX3R5cGUgPT0gJ3l0LWRsJzoNCiAgICAgICAgICAgICAgICBzdHJlYW1fdXJsID0gc3RyZWFtX3VybCArIiZtb2RlPTE4Ig0KICAgICAgICAgICAgZWxpZiBtb2RlX3R5cGUgPT0gJ3JlZ2V4JzoNCiAgICAgICAgICAgICAgICB1cmwgPSBzdHJlYW1fdXJsLnNwbGl0KCcmcmVnZXhzPScpDQogICAgICAgICAgICAgICAgI3ByaW50IHVybFswXSBnZXRTb3VwKHVybCxkYXRhPU5vbmUpDQogICAgICAgICAgICAgICAgcmVnZXhzID0gcGFyc2VfcmVnZXgoZ2V0U291cCgnJyxkYXRhPXVybFsxXSkpDQoNCiAgICAgICAgICAgICAgICBhZGRMaW5rKHVybFswXSwgY2hhbm5lbF9uYW1lLHRodW1ibmFpbCwnJywnJywnJywnJywnJyxOb25lLHJlZ2V4cyx0b3RhbCkNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBtb2RlX3R5cGUgPT0gJ2Z0dic6DQogICAgICAgICAgICAgICAgc3RyZWFtX3VybCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uRi5ULlYvP25hbWU9Jyt1cmxsaWIucXVvdGUoY2hhbm5lbF9uYW1lKSArJyZ1cmw9JyArc3RyZWFtX3VybCArJyZtb2RlPTEyNSZjaF9mYW5hcnQ9bmEnDQogICAgICAgIGVsaWYgdHNkb3dubG9hZGVyIGFuZCAnLnRzJyBpbiBzdHJlYW1fdXJsOg0KICAgICAgICAgICAgc3RyZWFtX3VybCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZjRtVGVzdGVyLz91cmw9Jyt1cmxsaWIucXVvdGVfcGx1cyhzdHJlYW1fdXJsKSsnJmFtcDtzdHJlYW10eXBlPVRTRE9XTkxPQURFUiZuYW1lPScrdXJsbGliLnF1b3RlKGNoYW5uZWxfbmFtZSkNCiAgICAgICAgZWxpZiBobHNyZXRyeSBhbmQgJy5tM3U4JyBpbiBzdHJlYW1fdXJsOg0KICAgICAgICAgICAgc3RyZWFtX3VybCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZjRtVGVzdGVyLz91cmw9Jyt1cmxsaWIucXVvdGVfcGx1cyhzdHJlYW1fdXJsKSsnJmFtcDtzdHJlYW10eXBlPUhMU1JFVFJZJm5hbWU9Jyt1cmxsaWIucXVvdGUoY2hhbm5lbF9uYW1lKQ0KICAgICAgICBhZGRMaW5rKHN0cmVhbV91cmwsIGNoYW5uZWxfbmFtZSx0aHVtYm5haWwsJycsJycsJycsJycsJycsTm9uZSwnJyx0b3RhbCkNCmRlZiBnZXRDaGFubmVsSXRlbXMobmFtZSx1cmwsZmFuYXJ0KToNCiAgICAgICAgc291cCA9IGdldFNvdXAodXJsKQ0KICAgICAgICBjaGFubmVsX2xpc3QgPSBzb3VwLmZpbmQoJ2NoYW5uZWwnLCBhdHRycz17J25hbWUnIDogbmFtZS5kZWNvZGUoJ3V0Zi04Jyl9KQ0KICAgICAgICBpdGVtcyA9IGNoYW5uZWxfbGlzdCgnaXRlbScpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGZhbkFydCA9IGNoYW5uZWxfbGlzdCgnZmFuYXJ0JylbMF0uc3RyaW5nDQogICAgICAgICAgICBpZiBmYW5BcnQgPT0gTm9uZToNCiAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBmYW5BcnQgPSBmYW5hcnQNCiAgICAgICAgZm9yIGNoYW5uZWwgaW4gY2hhbm5lbF9saXN0KCdzdWJjaGFubmVsJyk6DQogICAgICAgICAgICBuYW1lID0gY2hhbm5lbCgnbmFtZScpWzBdLnN0cmluZw0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIG5hbWU9cHJvY2Vzc1B5RnVuY3Rpb24obmFtZSkNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IGNoYW5uZWwoJ3RodW1ibmFpbCcpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIHRodW1ibmFpbCA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgICAgIHRodW1ibmFpbD1wcm9jZXNzUHlGdW5jdGlvbih0aHVtYm5haWwpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gJycNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBpZiBub3QgY2hhbm5lbCgnZmFuYXJ0Jyk6DQogICAgICAgICAgICAgICAgICAgIGlmIGFkZG9uLmdldFNldHRpbmcoJ3VzZV90aHVtYicpID09ICJ0cnVlIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IHRodW1ibmFpbA0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGNoYW5uZWwoJ2ZhbmFydCcpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIGZhbkFydCA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBkZXNjID0gY2hhbm5lbCgnaW5mbycpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIGRlc2MgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBkZXNjID0gJycNCg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGdlbnJlID0gY2hhbm5lbCgnZ2VucmUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICBpZiBnZW5yZSA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIGdlbnJlID0gJycNCg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGRhdGUgPSBjaGFubmVsKCdkYXRlJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgaWYgZGF0ZSA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIGRhdGUgPSAnJw0KDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgY3JlZGl0cyA9IGNoYW5uZWwoJ2NyZWRpdHMnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICBpZiBjcmVkaXRzID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgY3JlZGl0cyA9ICcnDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpLHVybC5lbmNvZGUoJ3V0Zi04JyksMyx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsY3JlZGl0cyxkYXRlKQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIGFkZG9uX2xvZygnVGhlcmUgd2FzIGEgcHJvYmxlbSBhZGRpbmcgZGlyZWN0b3J5IC0gJytuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJykpDQogICAgICAgIGdldEl0ZW1zKGl0ZW1zLGZhbkFydCkNCg0KDQpkZWYgZ2V0U3ViQ2hhbm5lbEl0ZW1zKG5hbWUsdXJsLGZhbmFydCk6DQogICAgICAgIHNvdXAgPSBnZXRTb3VwKHVybCkNCiAgICAgICAgY2hhbm5lbF9saXN0ID0gc291cC5maW5kKCdzdWJjaGFubmVsJywgYXR0cnM9eyduYW1lJyA6IG5hbWUuZGVjb2RlKCd1dGYtOCcpfSkNCiAgICAgICAgaXRlbXMgPSBjaGFubmVsX2xpc3QoJ3N1Yml0ZW0nKQ0KICAgICAgICBnZXRJdGVtcyhpdGVtcyxmYW5hcnQpDQoNCmRlZiBnZXRJdGVtcyhpdGVtcyxmYW5hcnQsZG9udExpbms9RmFsc2UpOg0KICAgICAgICB0b3RhbCA9IGxlbihpdGVtcykNCiAgICAgICAgYWRkb25fbG9nKCdUb3RhbCBJdGVtczogJXMnICV0b3RhbCkNCiAgICAgICAgYWRkX3BsYXlsaXN0ID0gYWRkb24uZ2V0U2V0dGluZygnYWRkX3BsYXlsaXN0JykNCiAgICAgICAgYXNrX3BsYXlsaXN0X2l0ZW1zID1hZGRvbi5nZXRTZXR0aW5nKCdhc2tfcGxheWxpc3RfaXRlbXMnKQ0KICAgICAgICB1c2VfdGh1bWIgPSBhZGRvbi5nZXRTZXR0aW5nKCd1c2VfdGh1bWInKQ0KICAgICAgICBwYXJlbnRhbGJsb2NrID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWQnKQ0KICAgICAgICBwYXJlbnRhbGJsb2NrPSBwYXJlbnRhbGJsb2NrPT0idHJ1ZSINCiAgICAgICAgZm9yIGl0ZW0gaW4gaXRlbXM6DQogICAgICAgICAgICBpc1hNTFNvdXJjZT1GYWxzZQ0KICAgICAgICAgICAgaXNKc29ucnBjID0gRmFsc2UNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgYXBwbHlibG9jaz0nZmFsc2UnDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgYXBwbHlibG9jayA9IGl0ZW0oJ3BhcmVudGFsYmxvY2snKVswXS5zdHJpbmcNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ3BhcmVudGFsYmxvY2sgRXJyb3InKQ0KICAgICAgICAgICAgICAgIGFwcGx5YmxvY2sgPSAnJw0KICAgICAgICAgICAgaWYgYXBwbHlibG9jaz09J3RydWUnIGFuZCBwYXJlbnRhbGJsb2NrOiBjb250aW51ZQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIG5hbWUgPSBpdGVtKCd0aXRsZScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIG5hbWUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICd1bmtub3duPycNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIG5hbWU9cHJvY2Vzc1B5RnVuY3Rpb24obmFtZSkNCiAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ05hbWUgRXJyb3InKQ0KICAgICAgICAgICAgICAgIG5hbWUgPSAnJw0KDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBpZiBpdGVtKCdlcGcnKToNCiAgICAgICAgICAgICAgICAgICAgaWYgaXRlbS5lcGdfdXJsOg0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCdHZXQgRVBHIFJlZ2V4JykNCiAgICAgICAgICAgICAgICAgICAgICAgIGVwZ191cmwgPSBpdGVtLmVwZ191cmwuc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBlcGdfcmVnZXggPSBpdGVtLmVwZ19yZWdleC5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGVwZ19uYW1lID0gZ2V0X2VwZyhlcGdfdXJsLCBlcGdfcmVnZXgpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBlcGdfbmFtZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICs9ICcgLSAnICsgZXBnX25hbWUNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpdGVtKCdlcGcnKVswXS5zdHJpbmcgPiAxOg0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArPSBnZXRlcGcoaXRlbSgnZXBnJylbMF0uc3RyaW5nKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ0VQRyBFcnJvcicpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgdXJsID0gW10NCiAgICAgICAgICAgICAgICBpZiBsZW4oaXRlbSgnbGluaycpKSA+MDoNCiAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdpdGVtIGxpbmsnLCBpdGVtKCdsaW5rJykNCg0KICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdsaW5rJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKGkuc3RyaW5nKQ0KDQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgnc3BvcnRzZGV2aWwnKSkgPjA6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ3Nwb3J0c2RldmlsJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcG9ydHNkZXZpbCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uU3BvcnRzRGV2aWwvP21vZGU9MSZhbXA7aXRlbT1jYXRjaGVyJTNkc3RyZWFtcyUyNnVybD0nICtpLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZXIgPSBpdGVtKCdyZWZlcmVyJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVmZXJlcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdyZWZlcmVyIGZvdW5kJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcG9ydHNkZXZpbCA9IHNwb3J0c2RldmlsICsgJyUyNnJlZmVyZXI9JyArcmVmZXJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoc3BvcnRzZGV2aWwpDQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgncDJwJykpID4wOg0KICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdwMnAnKToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpLnN0cmluZyA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzb3A6Ly8nIGluIGkuc3RyaW5nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3AgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnAycC1zdHJlYW1zLz9tb2RlPTJ1cmw9JytpLnN0cmluZyArJyYnICsgJ25hbWU9JytuYW1lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoc29wKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAycD0ncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnAycC1zdHJlYW1zLz9tb2RlPTEmdXJsPScraS5zdHJpbmcgKycmJyArICduYW1lPScrbmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKHAycCkNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCd2YXVnaG4nKSkgPjA6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ3ZhdWdobicpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmF1Z2huID0gJ3BsdWdpbjovL3BsdWdpbi5zdHJlYW0udmF1Z2hubGl2ZS50di8/bW9kZT1QbGF5TGl2ZVN0cmVhbSZhbXA7Y2hhbm5lbD0nK2kuc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZCh2YXVnaG4pDQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgnaWxpdmUnKSkgPjA6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ2lsaXZlJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgJ2h0dHAnIGluIGkuc3RyaW5nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbGl2ZSA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udGJoLmlsaXZlLz91cmw9aHR0cDovL3d3dy5zdHJlYW1saXZlLnRvL3ZpZXcvJytpLnN0cmluZysnJmFtcDtsaW5rPTk5JmFtcDttb2RlPWlMaXZlUGxheScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbGl2ZSA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udGJoLmlsaXZlLz91cmw9JytpLnN0cmluZysnJmFtcDtsaW5rPTk5JmFtcDttb2RlPWlMaXZlUGxheScNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCd5dC1kbCcpKSA+MDoNCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaXRlbSgneXQtZGwnKToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpLnN0cmluZyA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl0ZGwgPSBpLnN0cmluZyArICcmbW9kZT0xOCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKHl0ZGwpDQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgnZG0nKSkgPjA6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ2RtJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbSA9ICJwbHVnaW46Ly9wbHVnaW4udmlkZW8uZGFpbHltb3Rpb25fY29tLz9tb2RlPXBsYXlWaWRlbyZ1cmw9IiArIGkuc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChkbSkNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdkbWxpdmUnKSkgPjA6DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ2RtbGl2ZScpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG0gPSAicGx1Z2luOi8vcGx1Z2luLnZpZGVvLmRhaWx5bW90aW9uX2NvbS8/bW9kZT1wbGF5TGl2ZVZpZGVvJnVybD0iICsgaS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKGRtKQ0KICAgICAgICAgICAgICAgIGVsaWYgbGVuKGl0ZW0oJ3V0dWJlJykpID4wOg0KICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCd1dHViZScpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJyAnIGluIGkuc3RyaW5nIDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXR1YmUgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvc2VhcmNoLz9xPScrIHVybGxpYi5xdW90ZV9wbHVzKGkuc3RyaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0pzb25ycGM9dXR1YmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGxlbihpLnN0cmluZykgPT0gMTE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3BsYXkvP3ZpZGVvX2lkPScrIGkuc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAoaS5zdHJpbmcuc3RhcnRzd2l0aCgnUEwnKSBhbmQgbm90ICcmb3JkZXI9JyBpbiBpLnN0cmluZykgb3IgaS5zdHJpbmcuc3RhcnRzd2l0aCgnVVUnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXR1YmUgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheS8/Jm9yZGVyPWRlZmF1bHQmcGxheWxpc3RfaWQ9JyArIGkuc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBpLnN0cmluZy5zdGFydHN3aXRoKCdQTCcpIG9yIGkuc3RyaW5nLnN0YXJ0c3dpdGgoJ1VVJyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3BsYXkvP3BsYXlsaXN0X2lkPScgKyBpLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgaS5zdHJpbmcuc3RhcnRzd2l0aCgnVUMnKSBhbmQgbGVuKGkuc3RyaW5nKSA+IDEyOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dHViZSA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ueW91dHViZS9jaGFubmVsLycgKyBpLnN0cmluZyArICcvJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0pzb25ycGM9dXR1YmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpLnN0cmluZy5zdGFydHN3aXRoKCdVQycpIGFuZCBub3QgKGkuc3RyaW5nLnN0YXJ0c3dpdGgoJ1BMJykpICA6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3VzZXIvJyArIGkuc3RyaW5nICsgJy8nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSnNvbnJwYz11dHViZQ0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZCh1dHViZSkNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdpbWRiJykpID4wOg0KICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdpbWRiJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCdnZW5lc2lzb3JwdWxzYXInKSA9PSAnMCc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZGIgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmdlbmVzaXMvP2FjdGlvbj1wbGF5JmltZGI9JytpLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZGIgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnB1bHNhci9tb3ZpZS90dCcraS5zdHJpbmcrJy9wbGF5Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoaW1kYikNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdmNG0nKSkgPjA6DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdmNG0nKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJy5mNG0nIGluIGkuc3RyaW5nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZjRtID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5mNG1UZXN0ZXIvP3VybD0nK3VybGxpYi5xdW90ZV9wbHVzKGkuc3RyaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICcubTN1OCcgaW4gaS5zdHJpbmc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmNG0gPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3Rlci8/dXJsPScrdXJsbGliLnF1b3RlX3BsdXMoaS5zdHJpbmcpKycmYW1wO3N0cmVhbXR5cGU9SExTJw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmNG0gPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3Rlci8/dXJsPScrdXJsbGliLnF1b3RlX3BsdXMoaS5zdHJpbmcpKycmYW1wO3N0cmVhbXR5cGU9U0lNUExFJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoZjRtKQ0KICAgICAgICAgICAgICAgIGVsaWYgbGVuKGl0ZW0oJ2Z0dicpKSA+MDoNCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaXRlbSgnZnR2Jyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdHYgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLkYuVC5WLz9uYW1lPScrdXJsbGliLnF1b3RlKG5hbWUpICsnJnVybD0nICtpLnN0cmluZyArJyZtb2RlPTEyNSZjaF9mYW5hcnQ9bmEnDQogICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKGZ0dikNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCd1cmxzb2x2ZScpKSA+MDoNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ3VybHNvbHZlJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlciA9IGkuc3RyaW5nICsnJm1vZGU9MTknDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChyZXNvbHZlcikNCiAgICAgICAgICAgICAgICBpZiBsZW4odXJsKSA8IDE6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgYWRkb25fbG9nKCdFcnJvciA8bGluaz4gZWxlbWVudCwgUGFzc2luZzonK25hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSkNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGlzWE1MU291cmNlID0gaXRlbSgnZXh0ZXJuYWxsaW5rJylbMF0uc3RyaW5nDQogICAgICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgICAgICAgICAgaWYgaXNYTUxTb3VyY2U6DQogICAgICAgICAgICAgICAgZXh0X3VybD1baXNYTUxTb3VyY2VdDQogICAgICAgICAgICAgICAgaXNYTUxTb3VyY2U9VHJ1ZQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBpc1hNTFNvdXJjZT1GYWxzZQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGlzSnNvbnJwYyA9IGl0ZW0oJ2pzb25ycGMnKVswXS5zdHJpbmcNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgaWYgaXNKc29ucnBjOg0KDQogICAgICAgICAgICAgICAgZXh0X3VybD1baXNKc29ucnBjXQ0KICAgICAgICAgICAgICAgICNwcmludCAnSlNPTi1SUEMgZXh0X3VybCcsZXh0X3VybA0KICAgICAgICAgICAgICAgIGlzSnNvbnJwYz1UcnVlDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGlzSnNvbnJwYz1GYWxzZQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IGl0ZW0oJ3RodW1ibmFpbCcpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIHRodW1ibmFpbCA9PSBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZQ0KICAgICAgICAgICAgICAgIHRodW1ibmFpbD1wcm9jZXNzUHlGdW5jdGlvbih0aHVtYm5haWwpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gJycNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBpZiBub3QgaXRlbSgnZmFuYXJ0Jyk6DQogICAgICAgICAgICAgICAgICAgIGlmIGFkZG9uLmdldFNldHRpbmcoJ3VzZV90aHVtYicpID09ICJ0cnVlIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IHRodW1ibmFpbA0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgZmFuQXJ0ID0gZmFuYXJ0DQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgZmFuQXJ0ID0gaXRlbSgnZmFuYXJ0JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgaWYgZmFuQXJ0ID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgZmFuQXJ0ID0gZmFuYXJ0DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgZGVzYyA9IGl0ZW0oJ2luZm8nKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICBpZiBkZXNjID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgZGVzYyA9ICcnDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBnZW5yZSA9IGl0ZW0oJ2dlbnJlJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgaWYgZ2VucmUgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBnZW5yZSA9ICcnDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBkYXRlID0gaXRlbSgnZGF0ZScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgIGlmIGRhdGUgPT0gTm9uZToNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBkYXRlID0gJycNCg0KICAgICAgICAgICAgcmVnZXhzID0gTm9uZQ0KICAgICAgICAgICAgaWYgaXRlbSgncmVnZXgnKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIHJlZ19pdGVtID0gaXRlbSgncmVnZXgnKQ0KICAgICAgICAgICAgICAgICAgICByZWdleHMgPSBwYXJzZV9yZWdleChyZWdfaXRlbSkNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiBsZW4odXJsKSA+IDE6DQogICAgICAgICAgICAgICAgICAgIGFsdCA9IDANCiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QgPSBbXQ0KICAgICAgICAgICAgICAgICAgICBpZ25vcmVsaXN0c2V0dGluZz1UcnVlIGlmICckJExTUGxheU9ubHlPbmUkJCcgaW4gdXJsWzBdIGVsc2UgRmFsc2UNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHVybDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAgYWRkX3BsYXlsaXN0ID09ICJmYWxzZSIgYW5kIG5vdCBpZ25vcmVsaXN0c2V0dGluZzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ICs9IDENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkTGluayhpLCclcykgJXMnICUoYWx0LCBuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJykpLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUscGxheWxpc3QscmVnZXhzLHRvdGFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgIChhZGRfcGxheWxpc3QgPT0gInRydWUiIGFuZCAgYXNrX3BsYXlsaXN0X2l0ZW1zID09ICd0cnVlJykgb3IgaWdub3JlbGlzdHNldHRpbmc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlZ2V4czoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LmFwcGVuZChpKycmcmVnZXhzPScrcmVnZXhzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICBhbnkoeCBpbiBpIGZvciB4IGluIHJlc29sdmVfdXJsKSBhbmQgIGkuc3RhcnRzd2l0aCgnaHR0cCcpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYXBwZW5kKGkrJyZtb2RlPTE5JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LmFwcGVuZChpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LmFwcGVuZChpKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHBsYXlsaXN0KSA+IDE6DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZExpbmsoJycsIG5hbWUuZW5jb2RlKCd1dGYtOCcpLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUscGxheWxpc3QscmVnZXhzLHRvdGFsKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZiBkb250TGluazoNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lLHVybFswXSxyZWdleHMNCiAgICAgICAgICAgICAgICAgICAgaWYgaXNYTUxTb3VyY2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHJlZ2V4cyA9PSBOb25lOiAjPGV4dGVybmFsbGluaz4gYW5kIDxyZWdleD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcpLGV4dF91cmxbMF0uZW5jb2RlKCd1dGYtOCcpLDEsdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsTm9uZSwnISF1cGRhdGUnLHJlZ2V4cyx1cmxbMF0uZW5jb2RlKCd1dGYtOCcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYWRkTGluayh1cmxbMF0sbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpKyAgJ1tDT0xPUiB5ZWxsb3ddYnVpbGQgWE1MWy9DT0xPUl0nLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUsTm9uZSxyZWdleHMsdG90YWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcpLGV4dF91cmxbMF0uZW5jb2RlKCd1dGYtOCcpLDEsdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsTm9uZSwnc291cmNlJyxOb25lLE5vbmUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JyksdXJsWzBdLmVuY29kZSgndXRmLTgnKSwxLHRodW1ibmFpbCxmYW5hcnQsZGVzYyxnZW5yZSxkYXRlLE5vbmUsJ3NvdXJjZScpDQogICAgICAgICAgICAgICAgICAgIGVsaWYgaXNKc29ucnBjOg0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcpLGV4dF91cmxbMF0sNTMsdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsTm9uZSwnc291cmNlJykNCiAgICAgICAgICAgICAgICAgICAgICAgICN4Ym1jLmV4ZWN1dGVidWlsdGluKCJDb250YWluZXIuU2V0Vmlld01vZGUoNTAwKSIpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJyRkb3JlZ2V4JyBpbiBuYW1lIGFuZCBub3QgZ2V0UmVnZXhQYXJzZWQ9PU5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bmFtZSxzZXRyZXM9Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBuYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHRuYW1lPT1Ob25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT10bmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJyRkb3JlZ2V4JyBpbiB0aHVtYm5haWwgYW5kIG5vdCBnZXRSZWdleFBhcnNlZD09Tm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG5hbWUsc2V0cmVzPWdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgdGh1bWJuYWlsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgdG5hbWU9PU5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw9dG5hbWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkTGluayh1cmxbMF0sbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUsTm9uZSxyZWdleHMsdG90YWwpDQogICAgICAgICAgICAgICAgICAgICNwcmludCAnc3VjY2VzcycNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1RoZXJlIHdhcyBhIHByb2JsZW0gYWRkaW5nIGl0ZW0gLSAnK25hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSkNCg0KZGVmIHBhcnNlX3JlZ2V4KHJlZ19pdGVtKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIHJlZ2V4cyA9IHt9DQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJlZ19pdGVtOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddID0ge30NCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnbmFtZSddPWkoJ25hbWUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2V4cHJlcyddID0gaSgnZXhwcmVzJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydleHByZXMnXSA9IGkoJ2V4cHJlcycpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2V4cHJlcyddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2V4cHJlcyddPScnDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gUmVmZXJlciAtLSIpDQogICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3BhZ2UnXSA9IGkoJ3BhZ2UnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3JlZmVyZXInXSA9IGkoJ3JlZmVyZXInKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBSZWZlcmVyIC0tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2Nvbm5lY3Rpb24nXSA9IGkoJ2Nvbm5lY3Rpb24nKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBjb25uZWN0aW9uIC0tIikNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnbm90cGxheWFibGUnXSA9IGkoJ25vdHBsYXlhYmxlJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gbm90cGxheWFibGUgLS0iKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydub3JlZGlyZWN0J10gPSBpKCdub3JlZGlyZWN0JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gbm9yZWRpcmVjdCAtLSIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydvcmlnaW4nXSA9IGkoJ29yaWdpbicpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIG9yaWdpbiAtLSIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydhY2NlcHQnXSA9IGkoJ2FjY2VwdCcpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIGFjY2VwdCAtLSIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydpbmNsdWRlaGVhZGVycyddID0gaSgnaW5jbHVkZWhlYWRlcnMnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBpbmNsdWRlaGVhZGVycyAtLSIpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2xpc3RyZXBlYXQnXSA9IGkoJ2xpc3RyZXBlYXQnKVswXS5zdHJpbmcNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ2xpc3RyZXBlYXQnLHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnbGlzdHJlcGVhdCddLGkoJ2xpc3RyZXBlYXQnKVswXS5zdHJpbmcsIGkNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBsaXN0cmVwZWF0IC0tIikNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3Byb3h5J10gPSBpKCdwcm94eScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIHByb3h5IC0tIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3gtcmVxJ10gPSBpKCd4LXJlcScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIHgtcmVxIC0tIikNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsneC1hZGRyJ10gPSBpKCd4LWFkZHInKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyB4LWFkZHIgLS0iKSAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3gtZm9yd2FyZCddID0gaSgneC1mb3J3YXJkJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8geC1mb3J3YXJkIC0tIikNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnYWdlbnQnXSA9IGkoJ2FnZW50JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gVXNlciBBZ2VudCAtLSIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydwb3N0J10gPSBpKCdwb3N0JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgcG9zdCIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydyYXdwb3N0J10gPSBpKCdyYXdwb3N0JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgcmF3cG9zdCIpDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydodG1sdW5lc2NhcGUnXSA9IGkoJ2h0bWx1bmVzY2FwZScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vdCBhIGh0bWx1bmVzY2FwZSIpDQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsncmVhZGNvb2tpZW9ubHknXSA9IGkoJ3JlYWRjb29raWVvbmx5JylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgcmVhZENvb2tpZU9ubHkiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IGkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2Nvb2tpZWphciddID0gaSgnY29va2llamFyJylbMF0uc3RyaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnY29va2llamFyJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnY29va2llamFyJ109JycNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBOb3QgYSBjb29raWVKYXIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnc2V0Y29va2llJ10gPSBpKCdzZXRjb29raWUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBOb3QgYSBzZXRjb29raWUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnYXBwZW5kY29va2llJ10gPSBpKCdhcHBlbmRjb29raWUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBOb3QgYSBhcHBlbmRjb29raWUiKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydpZ25vcmVjYWNoZSddID0gaSgnaWdub3JlY2FjaGUnKVswXS5zdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBubyBpZ25vcmVjYWNoZSIpDQogICAgICAgICAgICAgICAgICAgICAgICAjdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgIyAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2lnbm9yZWNhY2hlJ10gPSBpKCdpZ25vcmVjYWNoZScpWzBdLnN0cmluZw0KICAgICAgICAgICAgICAgICAgICAgICAgI2V4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgYWRkb25fbG9nKCJSZWdleDogLS0gbm8gaWdub3JlY2FjaGUiKQ0KDQogICAgICAgICAgICAgICAgICAgIHJlZ2V4cyA9IHVybGxpYi5xdW90ZShyZXByKHJlZ2V4cykpDQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdleHMNCiAgICAgICAgICAgICAgICAgICAgI3ByaW50IHJlZ2V4cw0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgcmVnZXhzID0gTm9uZQ0KICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ3JlZ2V4IEVycm9yOiAnK25hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSkNCiNjb3BpZXMgZnJvbSBsYW1kYSdzIGltcGxlbWVudGF0aW9uDQpkZWYgZ2V0X3VzdHJlYW0odXJsKToNCiAgICB0cnk6DQogICAgICAgIGZvciBpIGluIHJhbmdlKDEsIDUxKToNCiAgICAgICAgICAgIHJlc3VsdCA9IGdldFVybCh1cmwpDQogICAgICAgICAgICBpZiAiRVhULVgtU1RSRUFNLUlORiIgaW4gcmVzdWx0OiByZXR1cm4gdXJsDQogICAgICAgICAgICBpZiBub3QgIkVYVE0zVSIgaW4gcmVzdWx0OiByZXR1cm4NCiAgICAgICAgICAgIHhibWMuc2xlZXAoMjAwMCkNCiAgICAgICAgcmV0dXJuDQogICAgZXhjZXB0Og0KICAgICAgICByZXR1cm4NCg0KZGVmIGdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgdXJsLGNvb2tpZUphcj1Ob25lLGZvckNvb2tpZUphck9ubHk9RmFsc2UscmVjdXJzaXZlQ2FsbD1GYWxzZSxjYWNoZWRQYWdlcz17fSwgcmF3UG9zdD1GYWxzZSwgY29va2llX2phcl9maWxlPU5vbmUpOiMwLDEsMiA9IFVSTCwgcmVnZXhPbmx5LCBDb29raWVKYXJPbmx5DQogICAgICAgIGlmIG5vdCByZWN1cnNpdmVDYWxsOg0KICAgICAgICAgICAgcmVnZXhzID0gZXZhbCh1cmxsaWIudW5xdW90ZShyZWdleHMpKQ0KICAgICAgICAjY2FjaGVkUGFnZXMgPSB7fQ0KICAgICAgICAjcHJpbnQgJ3VybCcsdXJsDQogICAgICAgIGRvUmVnZXhzID0gcmUuY29tcGlsZSgnXCRkb3JlZ2V4XFsoW15cXV0qKVxdJykuZmluZGFsbCh1cmwpDQojICAgICAgICBwcmludCAnZG9SZWdleHMnLGRvUmVnZXhzLHJlZ2V4cw0KICAgICAgICBzZXRyZXNvbHZlZD1UcnVlDQogICAgICAgIGZvciBrIGluIGRvUmVnZXhzOg0KICAgICAgICAgICAgaWYgayBpbiByZWdleHM6DQogICAgICAgICAgICAgICAgI3ByaW50ICdwcm9jZXNzaW5nICcgLGsNCiAgICAgICAgICAgICAgICBtID0gcmVnZXhzW2tdDQogICAgICAgICAgICAgICAgI3ByaW50IG0NCiAgICAgICAgICAgICAgICBjb29raWVKYXJQYXJhbT1GYWxzZQ0KICAgICAgICAgICAgICAgIGlmICAnY29va2llamFyJyBpbiBtOiAjIHNvIGVpdGhlciBjcmVhdGUgb3IgcmV1c2UgZXhpc3RpbmcgamFyDQogICAgICAgICAgICAgICAgICAgICNwcmludCAnY29va2llamFyIGV4aXN0cycsbVsnY29va2llamFyJ10NCiAgICAgICAgICAgICAgICAgICAgY29va2llSmFyUGFyYW09bVsnY29va2llamFyJ10NCiAgICAgICAgICAgICAgICAgICAgaWYgICckZG9yZWdleCcgaW4gY29va2llSmFyUGFyYW06DQogICAgICAgICAgICAgICAgICAgICAgICBjb29raWVKYXI9Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBtWydjb29raWVqYXInXSxjb29raWVKYXIsVHJ1ZSwgVHJ1ZSxjYWNoZWRQYWdlcykNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgY29va2llSmFyUGFyYW09VHJ1ZQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29va2llSmFyUGFyYW09VHJ1ZQ0KICAgICAgICAgICAgICAgICNwcmludCAnbVtjb29raWVqYXJdJyxtWydjb29raWVqYXInXSxjb29raWVKYXINCiAgICAgICAgICAgICAgICBpZiBjb29raWVKYXJQYXJhbToNCiAgICAgICAgICAgICAgICAgICAgaWYgY29va2llSmFyPT1Ob25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdjcmVhdGUgY29va2llIGphcicNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9qYXJfZmlsZT1Ob25lDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnb3BlblsnIGluIG1bJ2Nvb2tpZWphciddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9qYXJfZmlsZT1tWydjb29raWVqYXInXS5zcGxpdCgnb3BlblsnKVsxXS5zcGxpdCgnXScpWzBdDQojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdjb29raWVKYXIgZnJvbSBmaWxlIG5hbWUnLGNvb2tpZV9qYXJfZmlsZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBjb29raWVKYXI9Z2V0Q29va2llSmFyKGNvb2tpZV9qYXJfZmlsZSkNCiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnY29va2llSmFyIGZyb20gZmlsZScsY29va2llSmFyDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjb29raWVfamFyX2ZpbGU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUNvb2tpZUphcihjb29raWVKYXIsY29va2llX2phcl9maWxlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2ltcG9ydCBjb29raWVsaWINCiAgICAgICAgICAgICAgICAgICAgICAgICNjb29raWVKYXIgPSBjb29raWVsaWIuTFdQQ29va2llSmFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnY29va2llSmFyIG5ldycsY29va2llSmFyDQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3NhdmVbJyBpbiBtWydjb29raWVqYXInXToNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9qYXJfZmlsZT1tWydjb29raWVqYXInXS5zcGxpdCgnc2F2ZVsnKVsxXS5zcGxpdCgnXScpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZV9wYXRoPW9zLnBhdGguam9pbihwcm9maWxlLGNvb2tpZV9qYXJfZmlsZSkNCiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnY29tcGxldGVfcGF0aCcsY29tcGxldGVfcGF0aA0KICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUNvb2tpZUphcihjb29raWVKYXIsY29va2llX2phcl9maWxlKQ0KICAgICAgICAgICAgICAgIGlmICBtWydwYWdlJ10gYW5kICckZG9yZWdleCcgaW4gbVsncGFnZSddOg0KICAgICAgICAgICAgICAgICAgICBwZz1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ3BhZ2UnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQ0KICAgICAgICAgICAgICAgICAgICBpZiBsZW4ocGcpPT0wOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGc9J2h0dHA6Ly9yZWdleGZhaWxlZCcNCiAgICAgICAgICAgICAgICAgICAgbVsncGFnZSddPXBnDQoNCiAgICAgICAgICAgICAgICBpZiAnc2V0Y29va2llJyBpbiBtIGFuZCBtWydzZXRjb29raWUnXSBhbmQgJyRkb3JlZ2V4JyBpbiBtWydzZXRjb29raWUnXToNCiAgICAgICAgICAgICAgICAgICAgbVsnc2V0Y29va2llJ109Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBtWydzZXRjb29raWUnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQ0KICAgICAgICAgICAgICAgIGlmICdhcHBlbmRjb29raWUnIGluIG0gYW5kIG1bJ2FwcGVuZGNvb2tpZSddIGFuZCAnJGRvcmVnZXgnIGluIG1bJ2FwcGVuZGNvb2tpZSddOg0KICAgICAgICAgICAgICAgICAgICBtWydhcHBlbmRjb29raWUnXT1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ2FwcGVuZGNvb2tpZSddLGNvb2tpZUphcixyZWN1cnNpdmVDYWxsPVRydWUsY2FjaGVkUGFnZXM9Y2FjaGVkUGFnZXMpDQoNCg0KICAgICAgICAgICAgICAgIGlmICAncG9zdCcgaW4gbSBhbmQgJyRkb3JlZ2V4JyBpbiBtWydwb3N0J106DQogICAgICAgICAgICAgICAgICAgIG1bJ3Bvc3QnXT1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ3Bvc3QnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQ0KIyAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3Bvc3QgaXMgbm93JyxtWydwb3N0J10NCg0KICAgICAgICAgICAgICAgIGlmICAncmF3cG9zdCcgaW4gbSBhbmQgJyRkb3JlZ2V4JyBpbiBtWydyYXdwb3N0J106DQogICAgICAgICAgICAgICAgICAgIG1bJ3Jhd3Bvc3QnXT1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ3Jhd3Bvc3QnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzLHJhd1Bvc3Q9VHJ1ZSkNCiAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdyYXdwb3N0IGlzIG5vdycsbVsncmF3cG9zdCddDQoNCiAgICAgICAgICAgICAgICBpZiAncmF3cG9zdCcgaW4gbSBhbmQgJyRlcG9jdGltZSQnIGluIG1bJ3Jhd3Bvc3QnXToNCiAgICAgICAgICAgICAgICAgICAgbVsncmF3cG9zdCddPW1bJ3Jhd3Bvc3QnXS5yZXBsYWNlKCckZXBvY3RpbWUkJyxnZXRFcG9jVGltZSgpKQ0KDQogICAgICAgICAgICAgICAgaWYgJ3Jhd3Bvc3QnIGluIG0gYW5kICckZXBvY3RpbWUyJCcgaW4gbVsncmF3cG9zdCddOg0KICAgICAgICAgICAgICAgICAgICBtWydyYXdwb3N0J109bVsncmF3cG9zdCddLnJlcGxhY2UoJyRlcG9jdGltZTIkJyxnZXRFcG9jVGltZTIoKSkNCg0KDQogICAgICAgICAgICAgICAgbGluaz0nJw0KICAgICAgICAgICAgICAgIGlmIG1bJ3BhZ2UnXSBhbmQgbVsncGFnZSddIGluIGNhY2hlZFBhZ2VzIGFuZCBub3QgJ2lnbm9yZWNhY2hlJyBpbiBtIGFuZCBmb3JDb29raWVKYXJPbmx5PT1GYWxzZSA6DQogICAgICAgICAgICAgICAgICAgICNwcmludCAndXNpbmcgY2FjaGUgcGFnZScsbVsncGFnZSddDQogICAgICAgICAgICAgICAgICAgIGxpbmsgPSBjYWNoZWRQYWdlc1ttWydwYWdlJ11dDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWYgbVsncGFnZSddIGFuZCAgbm90IG1bJ3BhZ2UnXT09JycgYW5kICBtWydwYWdlJ10uc3RhcnRzd2l0aCgnaHR0cCcpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJyRlcG9jdGltZSQnIGluIG1bJ3BhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtWydwYWdlJ109bVsncGFnZSddLnJlcGxhY2UoJyRlcG9jdGltZSQnLGdldEVwb2NUaW1lKCkpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnJGVwb2N0aW1lMiQnIGluIG1bJ3BhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtWydwYWdlJ109bVsncGFnZSddLnJlcGxhY2UoJyRlcG9jdGltZTIkJyxnZXRFcG9jVGltZTIoKSkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdJbmdvcmluZyBDYWNoZScsbVsncGFnZSddDQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlX3NwbGl0PW1bJ3BhZ2UnXS5zcGxpdCgnfCcpDQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlVXJsPXBhZ2Vfc3BsaXRbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcl9pbl9wYWdlPU5vbmUNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihwYWdlX3NwbGl0KT4xOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcl9pbl9wYWdlPXBhZ2Vfc3BsaXRbMV0NCg0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiANCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcih7ICgnaHR0cHMnID8gcHJveHl0b3VzZVs6NV09PSJodHRwcyI6Imh0dHAiKSA6IHByb3h5dG91c2V9KQ0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihwcm94eSkNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KIyAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCB1cmxsaWIyDQojICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3VybGxpYjIuZ2V0cHJveGllcycsdXJsbGliMi5nZXRwcm94aWVzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJveGllcz11cmxsaWIyLlByb3h5SGFuZGxlcih1cmxsaWIyLmdldHByb3hpZXMoKSkNCiAgICAgICAgDQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdnZXR0aW5nIHBhZ2VVcmwnLHBhZ2VVcmwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdChwYWdlVXJsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3Byb3h5JyBpbiBtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5dG91c2U9IG1bJ3Byb3h5J10NCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3Byb3h5dG91c2UnLHByb3h5dG91c2UNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsbGliMi5nZXRwcm94aWVzPSBsYW1iZGE6IHt9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFnZVVybFs6NV09PSJodHRwcyI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5ID0gdXJsbGliMi5Qcm94eUhhbmRsZXIoeyAnaHR0cHMnIDogcHJveHl0b3VzZX0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZXEuc2V0X3Byb3h5KHByb3h5dG91c2UsICdodHRwcycpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcih7ICdodHRwJyAgOiBwcm94eXRvdXNlfSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlcS5zZXRfcHJveHkocHJveHl0b3VzZSwgJ2h0dHAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKHByb3h5KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybGxpYjIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICByZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IHJ2OjE0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTQuMC4xJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5dG91c2U9Tm9uZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAncmVmZXJlcicgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuYWRkX2hlYWRlcignUmVmZXJlcicsIG1bJ3JlZmVyZXInXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhY2NlcHQnIGluIG06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ0FjY2VwdCcsIG1bJ2FjY2VwdCddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FnZW50JyBpbiBtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgbVsnYWdlbnQnXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICd4LXJlcScgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuYWRkX2hlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsIG1bJ3gtcmVxJ10pDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAneC1hZGRyJyBpbiBtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5hZGRfaGVhZGVyKCd4LWFkZHInLCBtWyd4LWFkZHInXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICd4LWZvcndhcmQnIGluIG06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1gtRm9yd2FyZGVkLUZvcicsIG1bJ3gtZm9yd2FyZCddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3NldGNvb2tpZScgaW4gbToNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ2FkZGluZyBjb29raWUnLG1bJ3NldGNvb2tpZSddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ0Nvb2tpZScsIG1bJ3NldGNvb2tpZSddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2FwcGVuZGNvb2tpZScgaW4gbToNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ2FwcGVuZGluZyBjb29raWUgdG8gY29va2llamFyJyxtWydhcHBlbmRjb29raWUnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXN0b0FwZW5kPW1bJ2FwcGVuZGNvb2tpZSddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llc3RvQXBlbmQ9Y29va2llc3RvQXBlbmQuc3BsaXQoJzsnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBoIGluIGNvb2tpZXN0b0FwZW5kOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLHY9aC5zcGxpdCgnPScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcsbj0gbi5zcGxpdCgnOicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNrID0gY29va2llbGliLkNvb2tpZSh2ZXJzaW9uPTAsIG5hbWU9biwgdmFsdWU9diwgcG9ydD1Ob25lLCBwb3J0X3NwZWNpZmllZD1GYWxzZSwgZG9tYWluPXcsIGRvbWFpbl9zcGVjaWZpZWQ9RmFsc2UsIGRvbWFpbl9pbml0aWFsX2RvdD1GYWxzZSwgcGF0aD0nLycsIHBhdGhfc3BlY2lmaWVkPVRydWUsIHNlY3VyZT1GYWxzZSwgZXhwaXJlcz1Ob25lLCBkaXNjYXJkPVRydWUsIGNvbW1lbnQ9Tm9uZSwgY29tbWVudF91cmw9Tm9uZSwgcmVzdD17J0h0dHBPbmx5JzogTm9uZX0sIHJmYzIxMDk9RmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZUphci5zZXRfY29va2llKGNrKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ29yaWdpbicgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuYWRkX2hlYWRlcignT3JpZ2luJywgbVsnb3JpZ2luJ10pDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBoZWFkZXJfaW5fcGFnZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJfaW5fcGFnZT1oZWFkZXJfaW5fcGFnZS5zcGxpdCgnJicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGggaW4gaGVhZGVyX2luX3BhZ2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGguc3BsaXQoJz0nKT09MjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4sdj1oLnNwbGl0KCc9JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHM9aC5zcGxpdCgnPScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuPXZhbHNbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHY9Jz0nLmpvaW4odmFsc1sxOl0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNuLHY9aC5zcGxpdCgnPScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5hZGRfaGVhZGVyKG4sdikNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGNvb2tpZUphcj09Tm9uZToNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ2Nvb2tpZUphclZhbCcsY29va2llSmFyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llX2hhbmRsZXIgPSB1cmxsaWIyLkhUVFBDb29raWVQcm9jZXNzb3IoY29va2llSmFyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikNCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ25vcmVkaXJlY3QnLCdub3JlZGlyZWN0JyBpbiBtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ25vcmVkaXJlY3QnIGluIG06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLE5vUmVkaXJlY3Rpb24sIHVybGxpYjIuSFRUUEJhc2ljQXV0aEhhbmRsZXIoKSwgdXJsbGliMi5IVFRQSGFuZGxlcigpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ25vcmVkaXJlY3QnIGluIG06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIoTm9SZWRpcmVjdGlvbiwgdXJsbGliMi5IVFRQQmFzaWNBdXRoSGFuZGxlcigpLCB1cmxsaWIyLkhUVFBIYW5kbGVyKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVyID0gdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdjb25uZWN0aW9uJyBpbiBtOg0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5jb25uZWN0aW9uLy8vLy8vLicsbVsnY29ubmVjdGlvbiddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBrZWVwYWxpdmUgaW1wb3J0IEhUVFBIYW5kbGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcGFsaXZlX2hhbmRsZXIgPSBIVFRQSGFuZGxlcigpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIoa2VlcGFsaXZlX2hhbmRsZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpDQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdhZnRlciBjb29raWUgamFyJw0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zdD1Ob25lDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdwb3N0JyBpbiBtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3REYXRhPW1bJ3Bvc3QnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpZiAnJExpdmVTdHJlYW1SZWNhcHRjaGEnIGluIHBvc3REYXRhOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgKGNhcHRjaGFfY2hhbGxlbmdlLGNhdHBjaGFfd29yZCxpZGZpZWxkKT1wcm9jZXNzUmVjYXB0Y2hhKG1bJ3BhZ2UnXSxjb29raWVKYXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICBpZiBjYXB0Y2hhX2NoYWxsZW5nZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICBwb3N0RGF0YT1wb3N0RGF0YS5yZXBsYWNlKCckTGl2ZVN0cmVhbVJlY2FwdGNoYScsJ21hbnVhbF9yZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkOicrY2FwdGNoYV9jaGFsbGVuZ2UrJyxyZWNhcHRjaGFfcmVzcG9uc2VfZmllbGQ6JytjYXRwY2hhX3dvcmQrJyxpZDonK2lkZmllbGQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRwb3N0PXBvc3REYXRhLnNwbGl0KCcsJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdD17fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwIGluIHNwbGl0cG9zdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbj1wLnNwbGl0KCc6JylbMF07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHY9cC5zcGxpdCgnOicpWzFdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0W25dPXYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ID0gdXJsbGliLnVybGVuY29kZShwb3N0KQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAncmF3cG9zdCcgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0PW1bJ3Jhd3Bvc3QnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpZiAnJExpdmVTdHJlYW1SZWNhcHRjaGEnIGluIHBvc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAoY2FwdGNoYV9jaGFsbGVuZ2UsY2F0cGNoYV93b3JkLGlkZmllbGQpPXByb2Nlc3NSZWNhcHRjaGEobVsncGFnZSddLGNvb2tpZUphcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgIGlmIGNhcHRjaGFfY2hhbGxlbmdlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgcG9zdD1wb3N0LnJlcGxhY2UoJyRMaXZlU3RyZWFtUmVjYXB0Y2hhJywnJm1hbnVhbF9yZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkPScrY2FwdGNoYV9jaGFsbGVuZ2UrJyZyZWNhcHRjaGFfcmVzcG9uc2VfZmllbGQ9JytjYXRwY2hhX3dvcmQrJyZpZD0nK2lkZmllbGQpDQogICAgICAgICAgICAgICAgICAgICAgICBsaW5rPScnDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcG9zdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxLHBvc3QpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLmluZm8oKS5nZXQoJ0NvbnRlbnQtRW5jb2RpbmcnKSA9PSAnZ3ppcCc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU3RyaW5nSU8gaW1wb3J0IFN0cmluZ0lPDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCBnemlwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IFN0cmluZ0lPKCByZXNwb25zZS5yZWFkKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBnemlwLkd6aXBGaWxlKGZpbGVvYmo9YnVmKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rID0gZi5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPXJlc3BvbnNlLnJlYWQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAncHJveHknIGluIG0gYW5kIG5vdCBjdXJyZW50X3Byb3hpZXMgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsbGliMi5pbnN0YWxsX29wZW5lcih1cmxsaWIyLmJ1aWxkX29wZW5lcihjdXJyZW50X3Byb3hpZXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9amF2YXNjcmlwdFVuRXNjYXBlKGxpbmspDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHJlcHIobGluaykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGluayBUaGlzIGp1c3QgcHJpbnQgd2hvbGUgd2VicGFnZSBpbiBMT0cNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnaW5jbHVkZWhlYWRlcnMnIGluIG06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaW5rKz1zdHIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ1NldC1Db29raWUnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluays9JyQkSEVBREVSU19TVEFSVCQkOicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGIgaW4gcmVzcG9uc2UuaGVhZGVyczoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsrPSBiKyc6JytyZXNwb25zZS5oZWFkZXJzLmdldChiKSsnXG4nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsrPSckJEhFQURFUlNfRU5EJCQ6Jw0KICAgICMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCBsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKGxpbmspDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKGNvb2tpZUphciApDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5jbG9zZSgpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZFBhZ2VzW21bJ3BhZ2UnXV0gPSBsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGluaw0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdzdG9yZSBsaW5rIGZvcicsbVsncGFnZSddLGZvckNvb2tpZUphck9ubHkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgZm9yQ29va2llSmFyT25seToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llSmFyIyBkbyBub3RoaW5nDQogICAgICAgICAgICAgICAgICAgIGVsaWYgbVsncGFnZSddIGFuZCAgbm90IG1bJ3BhZ2UnXS5zdGFydHN3aXRoKCdodHRwJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBtWydwYWdlJ10uc3RhcnRzd2l0aCgnJHB5RnVuY3Rpb246Jyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPWRvRXZhbChtWydwYWdlJ10uc3BsaXQoJyRweUZ1bmN0aW9uOicpWzFdLCcnLGNvb2tpZUphcixtICkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBmb3JDb29raWVKYXJPbmx5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llSmFyIyBkbyBub3RoaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz12YWwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPWphdmFzY3JpcHRVbkVzY2FwZShsaW5rKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPW1bJ3BhZ2UnXQ0KICAgICAgICAgICAgICAgIGlmICckcHlGdW5jdGlvbjpwbGF5bWVkaWEoJyBpbiBtWydleHByZXMnXSBvciAnQWN0aXZhdGVXaW5kb3cnICBpbiBtWydleHByZXMnXSBvciAnUnVuUGx1Z2luJyAgaW4gbVsnZXhwcmVzJ10gIG9yICckUExBWUVSUFJPWFkkPScgaW4gdXJsICBvciAgYW55KHggaW4gdXJsIGZvciB4IGluIGdfaWdub3JlU2V0UmVzb2x2ZWQpOg0KICAgICAgICAgICAgICAgICAgICBzZXRyZXNvbHZlZD1GYWxzZQ0KICAgICAgICAgICAgICAgIGlmICAnJGRvcmVnZXgnIGluIG1bJ2V4cHJlcyddOg0KICAgICAgICAgICAgICAgICAgICBtWydleHByZXMnXT1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ2V4cHJlcyddLGNvb2tpZUphcixyZWN1cnNpdmVDYWxsPVRydWUsY2FjaGVkUGFnZXM9Y2FjaGVkUGFnZXMpDQogICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiBub3QgbVsnZXhwcmVzJ109PScnOg0KICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2RvaW5nIGl0ICcsbVsnZXhwcmVzJ10NCiAgICAgICAgICAgICAgICAgICAgaWYgJyRMaXZlU3RyZWFtQ2FwdGNoYScgaW4gbVsnZXhwcmVzJ106DQogICAgICAgICAgICAgICAgICAgICAgICB2YWw9YXNrQ2FwdGNoYShtLGxpbmssY29va2llSmFyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICd1cmwgYW5kIHZhbCcsdXJsLHZhbA0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoIiRkb3JlZ2V4WyIgKyBrICsgIl0iLCB2YWwpDQoNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBtWydleHByZXMnXS5zdGFydHN3aXRoKCckcHlGdW5jdGlvbjonKSBvciAnIyRweUZ1bmN0aW9uJyBpbiBtWydleHByZXMnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnZXhwZWVlZWVlZWVlZWVlZWVlZWVlZScsbVsnZXhwcmVzJ10NCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0nJw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbVsnZXhwcmVzJ10uc3RhcnRzd2l0aCgnJHB5RnVuY3Rpb246Jyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPWRvRXZhbChtWydleHByZXMnXS5zcGxpdCgnJHB5RnVuY3Rpb246JylbMV0sbGluayxjb29raWVKYXIsbSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPWRvRXZhbEZ1bmN0aW9uKG1bJ2V4cHJlcyddLGxpbmssY29va2llSmFyLG0pDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnQWN0aXZhdGVXaW5kb3cnIGluIG1bJ2V4cHJlcyddIG9yICdSdW5QbHVnaW4nIGluIG1bJ2V4cHJlcyddICA6IHJldHVybiAnJyxGYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgZm9yQ29va2llSmFyT25seToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llSmFyIyBkbyBub3RoaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnbGlzdHJlcGVhdCcgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0cmVwZWF0PW1bJ2xpc3RyZXBlYXQnXSAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmV0PXJlLmZpbmRhbGwobVsnZXhwcmVzJ10sbGluaykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3JldCcsdmFsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RyZXBlYXQsZXZhbCh2YWwpLCBtLHJlZ2V4cyxjb29raWVKYXINCiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAndXJsIGsgdmFsJyx1cmwsayx2YWwNCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAncmVwcicscmVwcih2YWwpDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSh1IiRkb3JlZ2V4WyIgKyBrICsgIl0iLCB2YWwpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHVybCA9IHVybC5yZXBsYWNlKCIkZG9yZWdleFsiICsgayArICJdIiwgdmFsLmRlY29kZSgidXRmLTgiKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdsaXN0cmVwZWF0JyBpbiBtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RyZXBlYXQ9bVsnbGlzdHJlcGVhdCddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdsaXN0cmVwZWF0JyxtWydleHByZXMnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCBtWydleHByZXMnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnYWFhYScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGluaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldD1yZS5maW5kYWxsKG1bJ2V4cHJlcyddLGxpbmspDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdyZXQnLHJldA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaXN0cmVwZWF0LHJldCwgbSxyZWdleHMsY29va2llSmFyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsPScnDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgbGluaz09Jyc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdsaW5rJyxsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnID0gcmUuY29tcGlsZShtWydleHByZXMnXSkuc2VhcmNoKGxpbmspICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPXJlZy5ncm91cCgxKS5zdHJpcCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgbVsncGFnZSddPT0nJyBvciBtWydwYWdlJ109PU5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW1bJ2V4cHJlcyddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBpZiByYXdQb3N0Og0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAncmF3cG9zdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9dXJsbGliLnF1b3RlX3BsdXModmFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2h0bWx1bmVzY2FwZScgaW4gbToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdmFsPXVybGxpYi51bnF1b3RlX3BsdXModmFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCBIVE1MUGFyc2VyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPUhUTUxQYXJzZXIuSFRNTFBhcnNlcigpLnVuZXNjYXBlKHZhbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgiJGRvcmVnZXhbIiArIGsgKyAiXSIsIHZhbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogdXJsID0gdXJsLnJlcGxhY2UoIiRkb3JlZ2V4WyIgKyBrICsgIl0iLCB2YWwuZGVjb2RlKCJ1dGYtOCIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICd1cicsdXJsDQogICAgICAgICAgICAgICAgICAgICAgICAjcmV0dXJuIHZhbA0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCIkZG9yZWdleFsiICsgayArICJdIiwnJykNCiAgICAgICAgaWYgJyRlcG9jdGltZSQnIGluIHVybDoNCiAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgnJGVwb2N0aW1lJCcsZ2V0RXBvY1RpbWUoKSkNCiAgICAgICAgaWYgJyRlcG9jdGltZTIkJyBpbiB1cmw6DQogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyRlcG9jdGltZTIkJyxnZXRFcG9jVGltZTIoKSkNCg0KICAgICAgICBpZiAnJEdVSUQkJyBpbiB1cmw6DQogICAgICAgICAgICBpbXBvcnQgdXVpZA0KICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCckR1VJRCQnLHN0cih1dWlkLnV1aWQxKCkpLnVwcGVyKCkpDQogICAgICAgIGlmICckZ2V0X2Nvb2tpZXMkJyBpbiB1cmw6DQogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyRnZXRfY29va2llcyQnLGdldENvb2tpZXNTdHJpbmcoY29va2llSmFyKSkNCg0KICAgICAgICBpZiByZWN1cnNpdmVDYWxsOiByZXR1cm4gdXJsDQogICAgICAgICNwcmludCAnZmluYWwgdXJsJyxyZXByKHVybCkNCiAgICAgICAgaWYgdXJsPT0iIjoNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHVybCxzZXRyZXNvbHZlZA0KZGVmIGdldG1kNSh0KToNCiAgICBpbXBvcnQgaGFzaGxpYg0KICAgIGg9aGFzaGxpYi5tZDUoKQ0KICAgIGgudXBkYXRlKHQpDQogICAgcmV0dXJuIGguaGV4ZGlnZXN0KCkNCg0KZGVmIGRlY3J5cHRfdmF1Z2hubGl2ZShlbmNyeXB0ZWQpOg0KICAgIHJldFZhbD0iIg0KIyAgICBwcmludCAnZW5jJyxlbmNyeXB0ZWQNCiAgICAjZm9yIHZhbCBpbiBlbmNyeXB0ZWQuc3BsaXQoJzonKToNCiAgICAjICAgIHJldFZhbCs9Y2hyKGludCh2YWwucmVwbGFjZSgiMG0wIiwiIikpKQ0KICAgICNyZXR1cm4gcmV0VmFsDQoNCmRlZiBwbGF5bWVkaWEobWVkaWFfdXJsKToNCiAgICB0cnk6DQogICAgICAgIGltcG9ydCAgQ3VzdG9tUGxheWVyDQogICAgICAgIHBsYXllciA9IEN1c3RvbVBsYXllci5NeVhCTUNQbGF5ZXIoKQ0KICAgICAgICBsaXN0aXRlbSA9IHhibWNndWkuTGlzdEl0ZW0oIGxhYmVsID0gc3RyKG5hbWUpLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIsIHRodW1ibmFpbEltYWdlID0geGJtYy5nZXRJbmZvSW1hZ2UoICJMaXN0SXRlbS5UaHVtYiIgKSwgcGF0aD1tZWRpYV91cmwgKQ0KICAgICAgICBwbGF5ZXIucGxheSggbWVkaWFfdXJsLGxpc3RpdGVtKQ0KICAgICAgICB4Ym1jLnNsZWVwKDEwMDApDQogICAgICAgIHdoaWxlIHBsYXllci5pc19hY3RpdmU6DQogICAgICAgICAgICB4Ym1jLnNsZWVwKDIwMCkNCiAgICBleGNlcHQ6DQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQ0KICAgIHJldHVybiAnJw0KDQpkZWYga29kaUpzb25SZXF1ZXN0KHBhcmFtcyk6DQogICAgZGF0YSA9IGpzb24uZHVtcHMocGFyYW1zKQ0KICAgIHJlcXVlc3QgPSB4Ym1jLmV4ZWN1dGVKU09OUlBDKGRhdGEpDQoNCiAgICB0cnk6DQogICAgICAgIHJlc3BvbnNlID0ganNvbi5sb2FkcyhyZXF1ZXN0KQ0KICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6DQogICAgICAgIHJlc3BvbnNlID0ganNvbi5sb2FkcyhyZXF1ZXN0LmRlY29kZSgndXRmLTgnLCAnaWdub3JlJykpDQoNCiAgICB0cnk6DQogICAgICAgIGlmICdyZXN1bHQnIGluIHJlc3BvbnNlOg0KICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlWydyZXN1bHQnXQ0KICAgICAgICByZXR1cm4gTm9uZQ0KICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgbG9nZ2VyLndhcm4oIlslc10gJXMiICUgKHBhcmFtc1snbWV0aG9kJ10sIHJlc3BvbnNlWydlcnJvciddWydtZXNzYWdlJ10pKQ0KICAgICAgICByZXR1cm4gTm9uZQ0KDQoNCmRlZiBzZXRLb2RpUHJveHkocHJveHlzZXR0aW5ncz1Ob25lKToNCg0KICAgIGlmIHByb3h5c2V0dGluZ3M9PU5vbmU6DQojICAgICAgICBwcmludCAncHJveHkgc2V0IHRvIG5vdGhpbmcnDQogICAgICAgIHhibWMuZXhlY3V0ZUpTT05SUEMoJ3sianNvbnJwYyI6IjIuMCIsICJtZXRob2QiOiJTZXR0aW5ncy5TZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLnVzZWh0dHBwcm94eSIsICJ2YWx1ZSI6ZmFsc2V9LCAiaWQiOjF9JykNCiAgICBlbHNlOg0KICAgICAgICANCiAgICAgICAgcHM9cHJveHlzZXR0aW5ncy5zcGxpdCgnOicpDQogICAgICAgIHByb3h5VVJMPXBzWzBdDQogICAgICAgIHByb3h5UG9ydD1wc1sxXQ0KICAgICAgICBwcm94eVR5cGU9cHNbMl0NCiAgICAgICAgcHJveHlVc2VybmFtZT1Ob25lDQogICAgICAgIHByb3h5UGFzc3dvcmQ9Tm9uZQ0KICAgICAgICANCiAgICAgICAgaWYgbGVuKHBzKT4zIGFuZCAnQCcgaW4gcHNbM106ICNqYWlyb3ggIyMjcHJveHlzZXR0aW5ncw0KICAgICAgICAgICAgcHJveHlVc2VybmFtZT1wc1szXS5zcGxpdCgnQCcpWzBdICNqYWlyb3ggIyMjcHNbM10NCiAgICAgICAgICAgIHByb3h5UGFzc3dvcmQ9cHNbM10uc3BsaXQoJ0AnKVsxXSAjamFpcm94ICMjI3Byb3h5c2V0dGluZ3Muc3BsaXQoJ0AnKVstMV0NCg0KIyAgICAgICAgcHJpbnQgJ3Byb3h5IHNldCB0bycsIHByb3h5VHlwZSwgcHJveHlVUkwscHJveHlQb3J0DQogICAgICAgIHhibWMuZXhlY3V0ZUpTT05SUEMoJ3sianNvbnJwYyI6IjIuMCIsICJtZXRob2QiOiJTZXR0aW5ncy5TZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLnVzZWh0dHBwcm94eSIsICJ2YWx1ZSI6dHJ1ZX0sICJpZCI6MX0nKQ0KICAgICAgICB4Ym1jLmV4ZWN1dGVKU09OUlBDKCd7Impzb25ycGMiOiIyLjAiLCAibWV0aG9kIjoiU2V0dGluZ3MuU2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHl0eXBlIiwgInZhbHVlIjonICsgc3RyKHByb3h5VHlwZSkgKyd9LCAiaWQiOjF9JykNCiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5c2VydmVyIiwgInZhbHVlIjoiJyArIHN0cihwcm94eVVSTCkgKycifSwgImlkIjoxfScpDQogICAgICAgIHhibWMuZXhlY3V0ZUpTT05SUEMoJ3sianNvbnJwYyI6IjIuMCIsICJtZXRob2QiOiJTZXR0aW5ncy5TZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLmh0dHBwcm94eXBvcnQiLCAidmFsdWUiOicgKyBzdHIocHJveHlQb3J0KSArJ30sICJpZCI6MX0nKQ0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBwcm94eVVzZXJuYW1lPT1Ob25lOg0KICAgICAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5dXNlcm5hbWUiLCAidmFsdWUiOiInICsgc3RyKHByb3h5VXNlcm5hbWUpICsnIn0sICJpZCI6MX0nKQ0KICAgICAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5cGFzc3dvcmQiLCAidmFsdWUiOiInICsgc3RyKHByb3h5UGFzc3dvcmQpICsnIn0sICJpZCI6MX0nKQ0KDQogICAgICAgIA0KZGVmIGdldENvbmZpZ3VyZWRQcm94eSgpOg0KICAgIHByb3h5QWN0aXZlID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay51c2VodHRwcHJveHkifSwgJ2lkJzogMX0pWyd2YWx1ZSddDQojICAgIHByaW50ICdwcm94eUFjdGl2ZScscHJveHlBY3RpdmUNCiAgICBwcm94eVR5cGUgPSBrb2RpSnNvblJlcXVlc3Qoeydqc29ucnBjJzogJzIuMCcsICJtZXRob2QiOiJTZXR0aW5ncy5HZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLmh0dHBwcm94eXR5cGUifSwgJ2lkJzogMX0pWyd2YWx1ZSddDQoNCiAgICBpZiBwcm94eUFjdGl2ZTogIyBQUk9YWV9IVFRQDQogICAgICAgIHByb3h5VVJMID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHlzZXJ2ZXIifSwgJ2lkJzogMX0pWyd2YWx1ZSddDQogICAgICAgIHByb3h5UG9ydCA9IHVuaWNvZGUoa29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHlwb3J0In0sICdpZCc6IDF9KVsndmFsdWUnXSkNCiAgICAgICAgcHJveHlVc2VybmFtZSA9IGtvZGlKc29uUmVxdWVzdCh7J2pzb25ycGMnOiAnMi4wJywgIm1ldGhvZCI6IlNldHRpbmdzLkdldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5dXNlcm5hbWUifSwgJ2lkJzogMX0pWyd2YWx1ZSddDQogICAgICAgIHByb3h5UGFzc3dvcmQgPSBrb2RpSnNvblJlcXVlc3Qoeydqc29ucnBjJzogJzIuMCcsICJtZXRob2QiOiJTZXR0aW5ncy5HZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLmh0dHBwcm94eXBhc3N3b3JkIn0sICdpZCc6IDF9KVsndmFsdWUnXQ0KDQogICAgICAgIGlmIHByb3h5VXNlcm5hbWUgYW5kIHByb3h5UGFzc3dvcmQgYW5kIHByb3h5VVJMIGFuZCBwcm94eVBvcnQ6DQogICAgICAgICAgICByZXR1cm4gcHJveHlVUkwgKyAnOicgKyBzdHIocHJveHlQb3J0KSsnOicrc3RyKHByb3h5VHlwZSkgKyAnOicgKyBwcm94eVVzZXJuYW1lICsgJ0AnICsgcHJveHlQYXNzd29yZA0KICAgICAgICBlbGlmIHByb3h5VVJMIGFuZCBwcm94eVBvcnQ6DQogICAgICAgICAgICByZXR1cm4gcHJveHlVUkwgKyAnOicgKyBzdHIocHJveHlQb3J0KSsnOicrc3RyKHByb3h5VHlwZSkNCiAgICBlbHNlOg0KICAgICAgICByZXR1cm4gTm9uZQ0KICAgICAgICANCmRlZiBwbGF5bWVkaWF3aXRocHJveHkobWVkaWFfdXJsLCBuYW1lLCBpY29uSW1hZ2UscHJveHlpcCxwb3J0LCBwcm94eXVzZXI9Tm9uZSwgcHJveHlwYXNzPU5vbmUpOiAjamFpcm94DQoNCiAgICBpZiBtZWRpYV91cmw9PU5vbmUgb3IgbWVkaWFfdXJsPT0nJzoNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oTXVuZG9EcmFnb25CYWxsLFVuYWJsZSB0byBwbGF5IGVtcHR5IFVybCw1MDAwLCIraWNvbisiKSIpDQogICAgICAgIHJldHVybg0KICAgIHByb2dyZXNzID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpDQogICAgcHJvZ3Jlc3MuY3JlYXRlKCdQcm9ncmVzcycsICdQbGF5aW5nIHdpdGggY3VzdG9tIHByb3h5JykNCiAgICBwcm9ncmVzcy51cGRhdGUoIDEwLCAiIiwgInNldHRpbmcgcHJveHkuLiIsICIiICkNCiAgICBwcm94eXNldD1GYWxzZQ0KICAgIGV4aXN0aW5nX3Byb3h5PScnDQogICAgI3ByaW50ICdwbGF5bWVkaWF3aXRocHJveHknDQogICAgdHJ5Og0KICAgICAgICANCiAgICAgICAgZXhpc3RpbmdfcHJveHk9Z2V0Q29uZmlndXJlZFByb3h5KCkNCiAgICAgICAgcHJpbnQgJ2V4aXN0aW5nX3Byb3h5JyxleGlzdGluZ19wcm94eQ0KICAgICAgICAjcmVhZCBhbmQgc2V0IGhlcmUNCiAgICAgICAgI2phaXJveA0KICAgICAgICBpZiBub3QgcHJveHl1c2VyID09IE5vbmU6DQogICAgICAgICAgICBzZXRLb2RpUHJveHkoIHByb3h5aXAgKyAnOicgKyBwb3J0ICsgJzowOicgKyBwcm94eXVzZXIgKyAnQCcgKyBwcm94eXBhc3MpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZXRLb2RpUHJveHkoIHByb3h5aXAgKyAnOicgKyBwb3J0ICsgJzowJykNCg0KICAgICAgICBwcmludCAncHJveHkgc2V0dGluZyBjb21wbGV0ZSBwbGF5aW5nJyxtZWRpYV91cmwNCiAgICAgICAgcHJveHlzZXQ9VHJ1ZQ0KICAgICAgICBwcm9ncmVzcy51cGRhdGUoIDgwLCAiIiwgInNldHRpbmcgcHJveHkgY29tcGxldGUsIG5vdyBwbGF5aW5nIiwgIiIgKQ0KICAgICAgICANCg0KICAgICAgICBpbXBvcnQgIEN1c3RvbVBsYXllcg0KICAgICAgICBwbGF5ZXIgPSBDdXN0b21QbGF5ZXIuTXlYQk1DUGxheWVyKCkNCiAgICAgICAgcGxheWVyLnBkaWFsb2d1ZT09cHJvZ3Jlc3MNCiAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKCBsYWJlbCA9IHN0cihuYW1lKSwgaWNvbkltYWdlID0gaWNvbkltYWdlLCB0aHVtYm5haWxJbWFnZSA9IHhibWMuZ2V0SW5mb0ltYWdlKCAiTGlzdEl0ZW0uVGh1bWIiICksIHBhdGg9bWVkaWFfdXJsICkNCiAgICAgICAgcGxheWVyLnBsYXkoIG1lZGlhX3VybCxsaXN0aXRlbSkNCiAgICAgICAgeGJtYy5zbGVlcCgxMDAwKQ0KICAgICAgICAjd2hpbGUgcGxheWVyLmlzX2FjdGl2ZToNCiAgICAgICAgIyAgICB4Ym1jLnNsZWVwKDIwMCkNCiAgICAgICAgaW1wb3J0IHRpbWUNCiAgICAgICAgYmVmb3Jlc3RhcnQ9dGltZS50aW1lKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgd2hpbGUgcGxheWVyLmlzX2FjdGl2ZToNCiAgICAgICAgICAgICAgICB4Ym1jLnNsZWVwKDEwMDApICAgICAgIA0KICAgICAgICAgICAgICAgIGlmIHBsYXllci51cmxwbGF5ZWQ9PUZhbHNlIGFuZCB0aW1lLnRpbWUoKS1iZWZvcmVzdGFydD4xMjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ2ZhaWxlZCEhIScNCiAgICAgICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oTXVuZG9EcmFnb25CYWxsLFVuYWJsZSB0byBwbGF5IGNoZWNrIHByb3h5LDUwMDAsIitpY29uKyIpIikNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAjeGJtYy5zbGVlcCgxMDAwKQ0KICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgICAgICBwcm9ncmVzcy5jbG9zZSgpDQogICAgICAgIHByb2dyZXNzPU5vbmUNCiAgICBleGNlcHQ6DQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQ0KICAgIGlmIHByb2dyZXNzOg0KICAgICAgICBwcm9ncmVzcy5jbG9zZSgpDQogICAgaWYgcHJveHlzZXQ6DQogICAgICAgIHByaW50ICdub3cgcmVzZXR0aW5nIHRoZSBwcm94eSBiYWNrJw0KICAgICAgICBzZXRLb2RpUHJveHkoZXhpc3RpbmdfcHJveHkpDQogICAgICAgIHByaW50ICdyZXNldCBoZXJlJw0KICAgIHJldHVybiAnJw0KDQoNCmRlZiBnZXRfc2F3X3J0bXAocGFnZV92YWx1ZSwgcmVmZXJlcj1Ob25lKToNCiAgICBpZiByZWZlcmVyOg0KICAgICAgICByZWZlcmVyPVsoJ1JlZmVyZXInLHJlZmVyZXIpXQ0KICAgIGlmIHBhZ2VfdmFsdWUuc3RhcnRzd2l0aCgiaHR0cCIpOg0KICAgICAgICBwYWdlX3VybD1wYWdlX3ZhbHVlDQogICAgICAgIHBhZ2VfdmFsdWU9IGdldFVybChwYWdlX3ZhbHVlLGhlYWRlcnM9cmVmZXJlcikNCg0KICAgIHN0cl9wYXR0ZXJuPSIoZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSwoPzpyfGQpLiopIg0KDQogICAgcmVnX3Jlcz1yZS5jb21waWxlKHN0cl9wYXR0ZXJuKS5maW5kYWxsKHBhZ2VfdmFsdWUpDQogICAgcj0iIg0KICAgIGlmIHJlZ19yZXMgYW5kIGxlbihyZWdfcmVzKT4wOg0KICAgICAgICBmb3IgdiBpbiByZWdfcmVzOg0KICAgICAgICAgICAgcjE9Z2V0X3VucGFja2VkKHYpDQogICAgICAgICAgICByMj1yZV9tZShyMSwnXCcoLio/KVwnJykNCiAgICAgICAgICAgIGlmICd1bmVzY2FwZScgaW4gcjE6DQogICAgICAgICAgICAgICAgcjE9dXJsbGliLnVucXVvdGUocjIpDQogICAgICAgICAgICByKz1yMSsnXG4nDQojICAgICAgICBwcmludCAnZmluYWwgdmFsdWUgaXMgJyxyDQoNCiAgICAgICAgcGFnZV91cmw9cmVfbWUociwnc3JjPSIoLio/KSInKQ0KDQogICAgICAgIHBhZ2VfdmFsdWU9IGdldFVybChwYWdlX3VybCxoZWFkZXJzPXJlZmVyZXIpDQoNCiAgICAjcHJpbnQgcGFnZV92YWx1ZQ0KDQogICAgcnRtcD1yZV9tZShwYWdlX3ZhbHVlLCdzdHJlYW1lclwnLio/XCcoLio/KVwnXCknKQ0KICAgIHBsYXlwYXRoPXJlX21lKHBhZ2VfdmFsdWUsJ2ZpbGVcJyxcc1wnKC4qPylcJycpDQoNCg0KICAgIHJldHVybiBydG1wKycgcGxheXBhdGg9JytwbGF5cGF0aCArJyBwYWdlVXJsPScrcGFnZV91cmwNCg0KZGVmIGdldF9sZXRvbl9ydG1wKHBhZ2VfdmFsdWUsIHJlZmVyZXI9Tm9uZSk6DQogICAgaWYgcmVmZXJlcjoNCiAgICAgICAgcmVmZXJlcj1bKCdSZWZlcmVyJyxyZWZlcmVyKV0NCiAgICBpZiBwYWdlX3ZhbHVlLnN0YXJ0c3dpdGgoImh0dHAiKToNCiAgICAgICAgcGFnZV92YWx1ZT0gZ2V0VXJsKHBhZ2VfdmFsdWUsaGVhZGVycz1yZWZlcmVyKQ0KICAgIHN0cl9wYXR0ZXJuPSJ2YXIgYSA9ICguKj8pO1xzKnZhciBiID0gKC4qPyk7XHMqdmFyIGMgPSAoLio/KTtccyp2YXIgZCA9ICguKj8pO1xzKnZhciBmID0gKC4qPyk7XHMqdmFyIHZfcGFydCA9ICcoLio/KSc7Ig0KICAgIHJlZ19yZXM9cmUuY29tcGlsZShzdHJfcGF0dGVybikuZmluZGFsbChwYWdlX3ZhbHVlKVswXQ0KDQogICAgYSxiLGMsZCxmLHY9KHJlZ19yZXMpDQogICAgZj1pbnQoZikNCiAgICBhPWludChhKS9mDQogICAgYj1pbnQoYikvZg0KICAgIGM9aW50KGMpL2YNCiAgICBkPWludChkKS9mDQoNCiAgICByZXQ9ICdydG1wOi8vJyArIHN0cihhKSArICcuJyArIHN0cihiKSArICcuJyArIHN0cihjKSArICcuJyArIHN0cihkKSArIHY7DQogICAgcmV0dXJuIHJldA0KDQpkZWYgY3JlYXRlTTN1Rm9yRGFzaCh1cmwsdXNlcmFnZW50PU5vbmUpOg0KICAgIHN0cj0nI0VYVE0zVScNCiAgICBzdHIrPSdcbiNFWFQtWC1TVFJFQU0tSU5GOlBST0dSQU0tSUQ9MSxCQU5EV0lEVEg9MzYxODE2Jw0KICAgIHN0cis9J1xuJyt1cmwrJyZieXRlcz0wLTIwMDAwMCcjKyd8VXNlci1BZ2VudD0nK3VzZXJhZ2VudA0KICAgIHNvdXJjZV9maWxlID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICd0ZXN0ZmlsZS5tM3UnKQ0KICAgIHN0cis9J1xuJw0KICAgIFNhdmVUb0ZpbGUoc291cmNlX2ZpbGUsc3RyKQ0KICAgICNyZXR1cm4gJ0M6L1VzZXJzL3NoYW5pL0Rvd25sb2Fkcy90ZXN0Lm0zdTgnDQogICAgcmV0dXJuIHNvdXJjZV9maWxlDQoNCmRlZiBTYXZlVG9GaWxlKGZpbGVfbmFtZSxwYWdlX2RhdGEsYXBwZW5kPUZhbHNlKToNCiAgICBpZiBhcHBlbmQ6DQogICAgICAgIGYgPSBvcGVuKGZpbGVfbmFtZSwgJ2EnKQ0KICAgICAgICBmLndyaXRlKHBhZ2VfZGF0YSkNCiAgICAgICAgZi5jbG9zZSgpDQogICAgZWxzZToNCiAgICAgICAgZj1vcGVuKGZpbGVfbmFtZSwnd2InKQ0KICAgICAgICBmLndyaXRlKHBhZ2VfZGF0YSkNCiAgICAgICAgZi5jbG9zZSgpDQogICAgICAgIHJldHVybiAnJw0KDQpkZWYgTG9hZEZpbGUoZmlsZV9uYW1lKToNCiAgICBmPW9wZW4oZmlsZV9uYW1lLCdyYicpDQogICAgZD1mLnJlYWQoKQ0KICAgIGYuY2xvc2UoKQ0KICAgIHJldHVybiBkDQoNCmRlZiBnZXRfcGFja2VkX2lwaG9uZXR2X3VybChwYWdlX2RhdGEpOg0KICAgIGltcG9ydCByZSxiYXNlNjQsdXJsbGliOw0KICAgIHM9cGFnZV9kYXRhDQogICAgd2hpbGUgJ2dlaCgnIGluIHM6DQogICAgICAgIGlmIHMuc3RhcnRzd2l0aCgnbG9sKCcpOiBzPXNbNTotMV0NCiMgICAgICAgcHJpbnQgJ3MgaXMgJyxzDQogICAgICAgIHM9cmUuY29tcGlsZSgnIiguKj8pIicpLmZpbmRhbGwocylbMF07DQogICAgICAgIHM9ICBiYXNlNjQuYjY0ZGVjb2RlKHMpOw0KICAgICAgICBzPXVybGxpYi51bnF1b3RlKHMpOw0KICAgIHByaW50IHMNCiAgICByZXR1cm4gcw0KDQpkZWYgZ2V0X2ZlcnJhcmlfdXJsKHBhZ2VfZGF0YSk6DQojICAgIHByaW50ICdnZXRfZGFnX3VybDInLHBhZ2VfZGF0YQ0KICAgIHBhZ2VfZGF0YTI9Z2V0VXJsKHBhZ2VfZGF0YSk7DQogICAgcGF0dD0nKGh0dHAuKiknDQogICAgaW1wb3J0IHV1aWQNCiAgICBwbGF5YmFjaz1zdHIodXVpZC51dWlkMSgpKS51cHBlcigpDQogICAgbGlua3M9cmUuY29tcGlsZShwYXR0KS5maW5kYWxsKHBhZ2VfZGF0YTIpDQogICAgaGVhZGVycz1bKCdYLVBsYXliYWNrLVNlc3Npb24tSWQnLHBsYXliYWNrKV0NCiAgICBmb3IgbCBpbiBsaW5rczoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHBhZ2VfZGF0YXRlbXA9Z2V0VXJsKGwsaGVhZGVycz1oZWFkZXJzKTsNCg0KICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgIHJldHVybiBwYWdlX2RhdGErJ3wmWC1QbGF5YmFjay1TZXNzaW9uLUlkPScrcGxheWJhY2sNCg0KDQpkZWYgZ2V0X2RhZ191cmwocGFnZV9kYXRhKToNCiMgICAgcHJpbnQgJ2dldF9kYWdfdXJsJyxwYWdlX2RhdGENCiAgICBpZiBwYWdlX2RhdGEuc3RhcnRzd2l0aCgnaHR0cDovL2RhZy50b3RhbC1zdHJlYW0ubmV0Jyk6DQogICAgICAgIGhlYWRlcnM9WygnVXNlci1BZ2VudCcsJ1ZlcmlzbW8tQmxhY2tVSV8oMi40LjcuNS44LjAuMzQpJyldDQogICAgICAgIHBhZ2VfZGF0YT1nZXRVcmwocGFnZV9kYXRhLGhlYWRlcnM9aGVhZGVycyk7DQoNCiAgICBpZiAnMTI3LjAuMC4xJyBpbiBwYWdlX2RhdGE6DQogICAgICAgIHJldHVybiByZXZpc3RfZGFnKHBhZ2VfZGF0YSkNCiAgICBlbGlmIHJlX21lKHBhZ2VfZGF0YSwgJ3dtc0F1dGhTaWduJTNEKFteJSZdKyknKSAhPSAnJzoNCiAgICAgICAgZmluYWxfdXJsID0gcmVfbWUocGFnZV9kYXRhLCAnJnZlcl90PShbXiZdKykmJykgKyAnP3dtc0F1dGhTaWduPScgKyByZV9tZShwYWdlX2RhdGEsICd3bXNBdXRoU2lnbiUzRChbXiUmXSspJykgKyAnPT0vbXA0OicgKyByZV9tZShwYWdlX2RhdGEsICdcXD95PShbXiZdKykmJykNCiAgICBlbHNlOg0KICAgICAgICBmaW5hbF91cmwgPSByZV9tZShwYWdlX2RhdGEsICdocmVmPSIoW14iXSspIlteIl0rJCcpDQogICAgICAgIGlmIGxlbihmaW5hbF91cmwpPT0wOg0KICAgICAgICAgICAgZmluYWxfdXJsPXBhZ2VfZGF0YQ0KICAgIGZpbmFsX3VybCA9IGZpbmFsX3VybC5yZXBsYWNlKCcgJywgJyUyMCcpDQogICAgcmV0dXJuIGZpbmFsX3VybA0KDQpkZWYgcmVfbWUoZGF0YSwgcmVfcGF0dGVuKToNCiAgICBtYXRjaCA9ICcnDQogICAgbSA9IHJlLnNlYXJjaChyZV9wYXR0ZW4sIGRhdGEpDQogICAgaWYgbSAhPSBOb25lOg0KICAgICAgICBtYXRjaCA9IG0uZ3JvdXAoMSkNCiAgICBlbHNlOg0KICAgICAgICBtYXRjaCA9ICcnDQogICAgcmV0dXJuIG1hdGNoDQoNCmRlZiByZXZpc3RfZGFnKHBhZ2VfZGF0YSk6DQogICAgZmluYWxfdXJsID0gJycNCiAgICBpZiAnMTI3LjAuMC4xJyBpbiBwYWdlX2RhdGE6DQogICAgICAgIGZpbmFsX3VybCA9IHJlX21lKHBhZ2VfZGF0YSwgJyZ2ZXJfdD0oW14mXSspJicpICsgJyBsaXZlPXRydWUgdGltZW91dD0xNSBwbGF5cGF0aD0nICsgcmVfbWUocGFnZV9kYXRhLCAnXFw/eT0oW2EtekEtWjAtOS1fXFwuQF0rKScpDQoNCiAgICBpZiByZV9tZShwYWdlX2RhdGEsICd0b2tlbj0oW14mXSspJicpICE9ICcnOg0KICAgICAgICBmaW5hbF91cmwgPSBmaW5hbF91cmwgKyAnP3Rva2VuPScgKyByZV9tZShwYWdlX2RhdGEsICd0b2tlbj0oW14mXSspJicpDQogICAgZWxpZiByZV9tZShwYWdlX2RhdGEsICd3bXNBdXRoU2lnbiUzRChbXiUmXSspJykgIT0gJyc6DQogICAgICAgIGZpbmFsX3VybCA9IHJlX21lKHBhZ2VfZGF0YSwgJyZ2ZXJfdD0oW14mXSspJicpICsgJz93bXNBdXRoU2lnbj0nICsgcmVfbWUocGFnZV9kYXRhLCAnd21zQXV0aFNpZ24lM0QoW14lJl0rKScpICsgJz09L21wNDonICsgcmVfbWUocGFnZV9kYXRhLCAnXFw/eT0oW14mXSspJicpDQogICAgZWxzZToNCiAgICAgICAgZmluYWxfdXJsID0gcmVfbWUocGFnZV9kYXRhLCAnSFJFRj0iKFteIl0rKSInKQ0KDQogICAgaWYgJ2RhZzEuYXN4JyBpbiBmaW5hbF91cmw6DQogICAgICAgIHJldHVybiBnZXRfZGFnX3VybChmaW5hbF91cmwpDQoNCiAgICBpZiAnZGV2aW5saXZlZnMuZnBsaXZlLm5ldCcgbm90IGluIGZpbmFsX3VybDoNCiAgICAgICAgZmluYWxfdXJsID0gZmluYWxfdXJsLnJlcGxhY2UoJ2RldmlubGl2ZScsICdmbGl2ZScpDQogICAgaWYgJ3Blcm1saXZlZnMuZnBsaXZlLm5ldCcgbm90IGluIGZpbmFsX3VybDoNCiAgICAgICAgZmluYWxfdXJsID0gZmluYWxfdXJsLnJlcGxhY2UoJ3Blcm1saXZlJywgJ2ZsaXZlJykNCiAgICByZXR1cm4gZmluYWxfdXJsDQoNCg0KZGVmIGdldF91bndpc2UoIHN0cl9ldmFsKToNCiAgICBwYWdlX3ZhbHVlPSIiDQogICAgdHJ5Og0KICAgICAgICBzcz0idyxpLHMsZT0oIitzdHJfZXZhbCsnKScNCiAgICAgICAgZXhlYyAoc3MpDQogICAgICAgIHBhZ2VfdmFsdWU9dW53aXNlX2Z1bmModyxpLHMsZSkNCiAgICBleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoZmlsZT1zeXMuc3Rkb3V0KQ0KICAgICNwcmludCAndW5wYWNrZWQnLHBhZ2VfdmFsdWUNCiAgICByZXR1cm4gcGFnZV92YWx1ZQ0KDQpkZWYgdW53aXNlX2Z1bmMoIHcsIGksIHMsIGUpOg0KICAgIGxJbGwgPSAwOw0KICAgIGxsMUkgPSAwOw0KICAgIElsMWwgPSAwOw0KICAgIGxsMWwgPSBbXTsNCiAgICBsMWxJID0gW107DQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgaWYgKGxJbGwgPCA1KToNCiAgICAgICAgICAgIGwxbEkuYXBwZW5kKHdbbElsbF0pDQogICAgICAgIGVsaWYgKGxJbGwgPCBsZW4odykpOg0KICAgICAgICAgICAgbGwxbC5hcHBlbmQod1tsSWxsXSk7DQogICAgICAgIGxJbGwrPTE7DQogICAgICAgIGlmIChsbDFJIDwgNSk6DQogICAgICAgICAgICBsMWxJLmFwcGVuZChpW2xsMUldKQ0KICAgICAgICBlbGlmIChsbDFJIDwgbGVuKGkpKToNCiAgICAgICAgICAgIGxsMWwuYXBwZW5kKGlbbGwxSV0pDQogICAgICAgIGxsMUkrPTE7DQogICAgICAgIGlmIChJbDFsIDwgNSk6DQogICAgICAgICAgICBsMWxJLmFwcGVuZChzW0lsMWxdKQ0KICAgICAgICBlbGlmIChJbDFsIDwgbGVuKHMpKToNCiAgICAgICAgICAgIGxsMWwuYXBwZW5kKHNbSWwxbF0pOw0KICAgICAgICBJbDFsKz0xOw0KICAgICAgICBpZiAobGVuKHcpICsgbGVuKGkpICsgbGVuKHMpICsgbGVuKGUpID09IGxlbihsbDFsKSArIGxlbihsMWxJKSArIGxlbihlKSk6DQogICAgICAgICAgICBicmVhazsNCg0KICAgIGxJMWwgPSAnJy5qb2luKGxsMWwpIy5qb2luKCcnKTsNCiAgICBJMWxJID0gJycuam9pbihsMWxJKSMuam9pbignJyk7DQogICAgbGwxSSA9IDA7DQogICAgbDFsbCA9IFtdOw0KICAgIGZvciBsSWxsIGluIHJhbmdlKDAsbGVuKGxsMWwpLDIpOg0KICAgICAgICAjcHJpbnQgJ2FycmF5IGknLGxJbGwsbGVuKGxsMWwpDQogICAgICAgIGxsMTEgPSAtMTsNCiAgICAgICAgaWYgKCBvcmQoSTFsSVtsbDFJXSkgJSAyKToNCiAgICAgICAgICAgIGxsMTEgPSAxOw0KICAgICAgICAjcHJpbnQgJ3ZhbCBpcyAnLCBsSTFsW2xJbGw6IGxJbGwrMl0NCiAgICAgICAgbDFsbC5hcHBlbmQoY2hyKCAgICBpbnQobEkxbFtsSWxsOiBsSWxsKzJdLCAzNikgLSBsbDExKSk7DQogICAgICAgIGxsMUkrPTE7DQogICAgICAgIGlmIChsbDFJID49IGxlbihsMWxJKSk6DQogICAgICAgICAgICBsbDFJID0gMDsNCiAgICByZXQ9Jycuam9pbihsMWxsKQ0KICAgIGlmICdldmFsKGZ1bmN0aW9uKHcsaSxzLGUpJyBpbiByZXQ6DQojICAgICAgICBwcmludCAnU1RJTEwgR09pbmcnDQogICAgICAgIHJldD1yZS5jb21waWxlKCdldmFsXChmdW5jdGlvblwodyxpLHMsZVwpLip9XCgoLio/KVwpJykuZmluZGFsbChyZXQpWzBdDQogICAgICAgIHJldHVybiBnZXRfdW53aXNlKHJldCkNCiAgICBlbHNlOg0KIyAgICAgICAgcHJpbnQgJ0ZJTklTSEVEJw0KICAgICAgICByZXR1cm4gcmV0DQoNCmRlZiBnZXRfdW5wYWNrZWQoIHBhZ2VfdmFsdWUsIHJlZ2V4X2Zvcl90ZXh0PScnLCBpdGVyYXRpb25zPTEsIHRvdGFsX2l0ZXJhdGlvbj0xKToNCiAgICB0cnk6DQogICAgICAgIHJlZ19kYXRhPU5vbmUNCiAgICAgICAgaWYgcGFnZV92YWx1ZS5zdGFydHN3aXRoKCJodHRwIik6DQogICAgICAgICAgICBwYWdlX3ZhbHVlPSBnZXRVcmwocGFnZV92YWx1ZSkNCiMgICAgICAgIHByaW50ICdwYWdlX3ZhbHVlJyxwYWdlX3ZhbHVlDQogICAgICAgIGlmIHJlZ2V4X2Zvcl90ZXh0IGFuZCBsZW4ocmVnZXhfZm9yX3RleHQpPjA6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcGFnZV92YWx1ZT1yZS5jb21waWxlKHJlZ2V4X2Zvcl90ZXh0KS5maW5kYWxsKHBhZ2VfdmFsdWUpWzBdICNnZXQgdGhlIGpzIHZhcmlhYmxlDQogICAgICAgICAgICBleGNlcHQ6IHJldHVybiAnTk9UUEFDS0VEJw0KDQogICAgICAgIHBhZ2VfdmFsdWU9dW5wYWNrKHBhZ2VfdmFsdWUsaXRlcmF0aW9ucyx0b3RhbF9pdGVyYXRpb24pDQogICAgZXhjZXB0Og0KICAgICAgICBwYWdlX3ZhbHVlPSdVTlBBQ0tFREZBSUxFRCcNCiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YyhmaWxlPXN5cy5zdGRvdXQpDQojICAgIHByaW50ICd1bnBhY2tlZCcscGFnZV92YWx1ZQ0KICAgIGlmICdzYXYxbGl2ZS50dicgaW4gcGFnZV92YWx1ZToNCiAgICAgICAgcGFnZV92YWx1ZT1wYWdlX3ZhbHVlLnJlcGxhY2UoJ3NhdjFsaXZlLnR2Jywnc2F3bGl2ZS50dicpICNxdWljayBmaXggc29tZSBidWcgc29tZXdoZXJlDQojICAgICAgICBwcmludCAnc2F2MSB1bnBhY2tlZCcscGFnZV92YWx1ZQ0KICAgIHJldHVybiBwYWdlX3ZhbHVlDQoNCmRlZiB1bnBhY2soc0phdmFzY3JpcHQsaXRlcmF0aW9uPTEsIHRvdGFsaXRlcmF0aW9ucz0yICApOg0KIyAgICBwcmludCAnaXRlcmF0aW9uJyxpdGVyYXRpb24NCiAgICBpZiBzSmF2YXNjcmlwdC5zdGFydHN3aXRoKCd2YXIgXzB4Y2I4YT0nKToNCiAgICAgICAgYVNwbGl0PXNKYXZhc2NyaXB0LnNwbGl0KCd2YXIgXzB4Y2I4YT0nKQ0KICAgICAgICBzcz0ibXlhcnJheT0iK2FTcGxpdFsxXS5zcGxpdCgiZXZhbCgiKVswXQ0KICAgICAgICBleGVjKHNzKQ0KICAgICAgICBhMT02Mg0KICAgICAgICBjMT1pbnQoYVNwbGl0WzFdLnNwbGl0KCIsNjIsIilbMV0uc3BsaXQoJywnKVswXSkNCiAgICAgICAgcDE9bXlhcnJheVswXQ0KICAgICAgICBrMT1teWFycmF5WzNdDQogICAgICAgIHdpdGggb3BlbigndGVtcCBmaWxlJytzdHIoaXRlcmF0aW9uKSsnLmpzJywgIndiIikgYXMgZmlsZXdyaXRlcjoNCiAgICAgICAgICAgIGZpbGV3cml0ZXIud3JpdGUoc3RyKGsxKSkNCiAgICAgICAgI2FhPTEvMA0KICAgIGVsc2U6DQoNCiAgICAgICAgaWYgInJuIHB9KCciIGluIHNKYXZhc2NyaXB0Og0KICAgICAgICAgICAgYVNwbGl0ID0gc0phdmFzY3JpcHQuc3BsaXQoInJuIHB9KCciKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgYVNwbGl0ID0gc0phdmFzY3JpcHQuc3BsaXQoInJuIEF9KCciKQ0KIyAgICAgICAgcHJpbnQgYVNwbGl0DQoNCiAgICAgICAgcDEsYTEsYzEsazE9KCcnLCcwJywnMCcsJycpDQoNCiAgICAgICAgc3M9InAxLGExLGMxLGsxPSgnIithU3BsaXRbMV0uc3BsaXQoIi5zcGxpIilbMF0rJyknDQogICAgICAgIGV4ZWMoc3MpDQogICAgazE9azEuc3BsaXQoJ3wnKQ0KICAgIGFTcGxpdCA9IGFTcGxpdFsxXS5zcGxpdCgiKSknIikNCiMgICAgcHJpbnQgJyBwIGFycmF5IGlzICcsbGVuKGFTcGxpdCkNCiMgICBwcmludCBsZW4oYVNwbGl0ICkNCg0KICAgICNwPXN0cihhU3BsaXRbMF0rJykpJykjLnJlcGxhY2UoIlxcIiwiIikjLnJlcGxhY2UoJ1xcXFwnLCdcXCcpDQoNCiAgICAjcHJpbnQgYVNwbGl0WzFdDQogICAgI2FTcGxpdCA9IGFTcGxpdFsxXS5zcGxpdCgiLCIpDQogICAgI3ByaW50IGFTcGxpdFswXQ0KICAgICNhID0gaW50KGFTcGxpdFsxXSkNCiAgICAjYyA9IGludChhU3BsaXRbMl0pDQogICAgI2sgPSBhU3BsaXRbM10uc3BsaXQoIi4iKVswXS5yZXBsYWNlKCInIiwgJycpLnNwbGl0KCd8JykNCiAgICAjYT1pbnQoYSkNCiAgICAjYz1pbnQoYykNCg0KICAgICNwPXAucmVwbGFjZSgnXFwnLCAnJykNCiMgICAgcHJpbnQgJ3AgdmFsIGlzICcscFswOjEwMF0sJy4uLi4uLi4uLi4uLicscFstMTAwOl0sbGVuKHApDQojICAgIHByaW50ICdwMSB2YWwgaXMgJyxwMVswOjEwMF0sJy4uLi4uLi4uLi4uLicscDFbLTEwMDpdLGxlbihwMSkNCg0KICAgICNwcmludCBhLGExDQogICAgI3ByaW50IGMsYTENCiAgICAjcHJpbnQgJ2sgdmFsIGlzICcsa1stMTA6XSxsZW4oaykNCiMgICAgcHJpbnQgJ2sxIHZhbCBpcyAnLGsxWy0xMDpdLGxlbihrMSkNCiAgICBlID0gJycNCiAgICBkID0gJycjMzI4MjMNCg0KICAgICNzVW5wYWNrZWQgPSBzdHIoX191bnBhY2socCwgYSwgYywgaywgZSwgZCkpDQogICAgc1VucGFja2VkMSA9IHN0cihfX3VucGFjayhwMSwgYTEsIGMxLCBrMSwgZSwgZCxpdGVyYXRpb24pKQ0KDQogICAgI3ByaW50IHNVbnBhY2tlZFs6MjAwXSsnLi4uLicrc1VucGFja2VkWy0xMDA6XSwgbGVuKHNVbnBhY2tlZCkNCiMgICAgcHJpbnQgc1VucGFja2VkMVs6MjAwXSsnLi4uLicrc1VucGFja2VkMVstMTAwOl0sIGxlbihzVW5wYWNrZWQxKQ0KDQogICAgI2V4ZWMoJ3NVbnBhY2tlZDE9Iicrc1VucGFja2VkMSsnIicpDQogICAgaWYgaXRlcmF0aW9uPj10b3RhbGl0ZXJhdGlvbnM6DQojICAgICAgICBwcmludCAnZmluYWwgcmVzJyxzVW5wYWNrZWQxWzoyMDBdKycuLi4uJytzVW5wYWNrZWQxWy0xMDA6XSwgbGVuKHNVbnBhY2tlZDEpDQogICAgICAgIHJldHVybiBzVW5wYWNrZWQxIy5yZXBsYWNlKCdcXFxcJywgJ1xcJykNCiAgICBlbHNlOg0KIyAgICAgICAgcHJpbnQgJ2ZpbmFsIHJlcyBmb3IgdGhpcyBpdGVyYXRpb24gaXMnLGl0ZXJhdGlvbg0KICAgICAgICByZXR1cm4gdW5wYWNrKHNVbnBhY2tlZDEsaXRlcmF0aW9uKzEpIy5yZXBsYWNlKCdcXCcsICcnKSxpdGVyYXRpb24pIy5yZXBsYWNlKCdcXCcsICcnKTsjdW5wYWNrKHNVbnBhY2tlZC5yZXBsYWNlKCdcXCcsICcnKSkNCg0KZGVmIF9fdW5wYWNrKHAsIGEsIGMsIGssIGUsIGQsIGl0ZXJhdGlvbix2PTEpOg0KDQogICAgI3dpdGggb3BlbignYmVmb3JlIGZpbGUnK3N0cihpdGVyYXRpb24pKycuanMnLCAid2IiKSBhcyBmaWxld3JpdGVyOg0KICAgICMgICAgZmlsZXdyaXRlci53cml0ZShzdHIocCkpDQogICAgd2hpbGUgKGMgPj0gMSk6DQogICAgICAgIGMgPSBjIC0xDQogICAgICAgIGlmIChrW2NdKToNCiAgICAgICAgICAgIGFhPXN0cihfX2l0b2FOZXcoYywgYSkpDQogICAgICAgICAgICBpZiB2PT0xOg0KICAgICAgICAgICAgICAgIHA9cmUuc3ViKCdcXGInICsgYWEgKydcXGInLCBrW2NdLCBwKSMgVEhJUyBJUyBCbG9vZHkgc2xvdyENCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcD1maW5kQW5kUmVwbGFjZVdvcmQocCxhYSxrW2NdKQ0KDQogICAgICAgICAgICAjcD1maW5kQW5kUmVwbGFjZVdvcmQocCxhYSxrW2NdKQ0KDQoNCiAgICAjd2l0aCBvcGVuKCdhZnRlciBmaWxlJytzdHIoaXRlcmF0aW9uKSsnLmpzJywgIndiIikgYXMgZmlsZXdyaXRlcjoNCiAgICAjICAgIGZpbGV3cml0ZXIud3JpdGUoc3RyKHApKQ0KICAgIHJldHVybiBwDQoNCiMNCiNmdW5jdGlvbiBlcXVhbGF2ZW50IHRvIHJlLnN1YignXFxiJyArIGFhICsnXFxiJywga1tjXSwgcCkNCmRlZiBmaW5kQW5kUmVwbGFjZVdvcmQoc291cmNlX3N0ciwgd29yZF90b19maW5kLHJlcGxhY2Vfd2l0aCk6DQogICAgc3BsaXRzPU5vbmUNCiAgICBzcGxpdHM9c291cmNlX3N0ci5zcGxpdCh3b3JkX3RvX2ZpbmQpDQogICAgaWYgbGVuKHNwbGl0cyk+MToNCiAgICAgICAgbmV3X3N0cmluZz1bXQ0KICAgICAgICBjdXJyZW50X2luZGV4PTANCiAgICAgICAgZm9yIGN1cnJlbnRfc3BsaXQgaW4gc3BsaXRzOg0KICAgICAgICAgICAgI3ByaW50ICdoZXJlJyxpDQogICAgICAgICAgICBuZXdfc3RyaW5nLmFwcGVuZChjdXJyZW50X3NwbGl0KQ0KICAgICAgICAgICAgdmFsPXdvcmRfdG9fZmluZCNieSBkZWZhdWx0IGFzc3VtZSBpdCB3YXMgd3JvbmcgdG8gc3BsaXQNCg0KICAgICAgICAgICAgI2lmIGl0cyBmaXJzdCBvbmUgYW5kIGl0ZW0gaXMgYmxhbmsgdGhlbiBjaGVjayBuZXh0IGl0ZW0gaXMgdmFsaWQgb3Igbm90DQogICAgICAgICAgICBpZiBjdXJyZW50X2luZGV4PT1sZW4oc3BsaXRzKS0xOg0KICAgICAgICAgICAgICAgIHZhbD0nJyAjIGxhc3Qgb25lIG5vdGhpbmcgdG8gYXBwZW5kIG5vcm1hbGx5DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGlmIGxlbihjdXJyZW50X3NwbGl0KT09MDogI2lmIGJsYW5rIGNoZWNrIG5leHQgb25lIHdpdGggY3VycmVudCBzcGxpdCB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICBpZiAoIGxlbihzcGxpdHNbY3VycmVudF9pbmRleCsxXSk9PTAgYW5kIHdvcmRfdG9fZmluZFswXS5sb3dlcigpIG5vdCBpbiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwXycpIG9yIChsZW4oc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV0pPjAgIGFuZCBzcGxpdHNbY3VycmVudF9pbmRleCsxXVswXS5sb3dlcigpIG5vdCBpbiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwXycpOiMgZmlyc3QganVzdCBqdXN0IGNoZWNrIG5leHQNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1yZXBsYWNlX3dpdGgNCiAgICAgICAgICAgICAgICAjbm90IGJsYW5rLCB0aGVuIGNoZWNrIGN1cnJlbnQgZW5kdmFsdWUgYW5kIG5leHQgZmlyc3QgdmFsdWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRzW2N1cnJlbnRfaW5kZXhdWy0xXS5sb3dlcigpIG5vdCBpbiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwXycpIGFuZCAoKCBsZW4oc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV0pPT0wIGFuZCB3b3JkX3RvX2ZpbmRbMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKSBvciAobGVuKHNwbGl0c1tjdXJyZW50X2luZGV4KzFdKT4wICBhbmQgc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV1bMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKSk6IyBmaXJzdCBqdXN0IGp1c3QgY2hlY2sgbmV4dA0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsPXJlcGxhY2Vfd2l0aA0KDQogICAgICAgICAgICBuZXdfc3RyaW5nLmFwcGVuZCh2YWwpDQogICAgICAgICAgICBjdXJyZW50X2luZGV4Kz0xDQogICAgICAgICNhYWFhPTEvMA0KICAgICAgICBzb3VyY2Vfc3RyPScnLmpvaW4obmV3X3N0cmluZykNCiAgICByZXR1cm4gc291cmNlX3N0cg0KDQpkZWYgX19pdG9hKG51bSwgcmFkaXgpOg0KIyAgICBwcmludCAnbnVtIHJlZCcsbnVtLCByYWRpeA0KICAgIHJlc3VsdCA9ICIiDQogICAgaWYgbnVtPT0wOiByZXR1cm4gJzAnDQogICAgd2hpbGUgbnVtID4gMDoNCiAgICAgICAgcmVzdWx0ID0gIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiJbbnVtICUgcmFkaXhdICsgcmVzdWx0DQogICAgICAgIG51bSAvPSByYWRpeA0KICAgIHJldHVybiByZXN1bHQNCg0KZGVmIF9faXRvYU5ldyhjYywgYSk6DQogICAgYWE9IiIgaWYgY2MgPCBhIGVsc2UgX19pdG9hTmV3KGludChjYyAvIGEpLGEpDQogICAgY2MgPSAoY2MgJSBhKQ0KICAgIGJiPWNocihjYyArIDI5KSBpZiBjYz4gMzUgZWxzZSBzdHIoX19pdG9hKGNjLDM2KSkNCiAgICByZXR1cm4gYWErYmINCg0KDQpkZWYgZ2V0Q29va2llc1N0cmluZyhjb29raWVKYXIpOg0KICAgIHRyeToNCiAgICAgICAgY29va2llU3RyaW5nPSIiDQogICAgICAgIGZvciBpbmRleCwgY29va2llIGluIGVudW1lcmF0ZShjb29raWVKYXIpOg0KICAgICAgICAgICAgY29va2llU3RyaW5nKz1jb29raWUubmFtZSArICI9IiArIGNvb2tpZS52YWx1ZSArIjsiDQogICAgZXhjZXB0OiBwYXNzDQogICAgI3ByaW50ICdjb29raWVTdHJpbmcnLGNvb2tpZVN0cmluZw0KICAgIHJldHVybiBjb29raWVTdHJpbmcNCg0KDQpkZWYgc2F2ZUNvb2tpZUphcihjb29raWVKYXIsQ09PS0lFRklMRSk6DQogICAgdHJ5Og0KICAgICAgICBjb21wbGV0ZV9wYXRoPW9zLnBhdGguam9pbihwcm9maWxlLENPT0tJRUZJTEUpDQogICAgICAgIGNvb2tpZUphci5zYXZlKGNvbXBsZXRlX3BhdGgsaWdub3JlX2Rpc2NhcmQ9VHJ1ZSkNCiAgICBleGNlcHQ6IHBhc3MNCg0KZGVmIGdldENvb2tpZUphcihDT09LSUVGSUxFKToNCg0KICAgIGNvb2tpZUphcj1Ob25lDQogICAgaWYgQ09PS0lFRklMRToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgY29tcGxldGVfcGF0aD1vcy5wYXRoLmpvaW4ocHJvZmlsZSxDT09LSUVGSUxFKQ0KICAgICAgICAgICAgY29va2llSmFyID0gY29va2llbGliLkxXUENvb2tpZUphcigpDQogICAgICAgICAgICBjb29raWVKYXIubG9hZChjb21wbGV0ZV9wYXRoLGlnbm9yZV9kaXNjYXJkPVRydWUpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIGNvb2tpZUphcj1Ob25lDQoNCiAgICBpZiBub3QgY29va2llSmFyOg0KICAgICAgICBjb29raWVKYXIgPSBjb29raWVsaWIuTFdQQ29va2llSmFyKCkNCg0KICAgIHJldHVybiBjb29raWVKYXINCg0KZGVmIGRvRXZhbChmdW5fY2FsbCxwYWdlX2RhdGEsQ29va2llX0phcixtKToNCiAgICByZXRfdmFsPScnDQogICAgI3ByaW50IGZ1bl9jYWxsDQogICAgaWYgZnVuY3Rpb25zX2RpciBub3QgaW4gc3lzLnBhdGg6DQogICAgICAgIHN5cy5wYXRoLmFwcGVuZChmdW5jdGlvbnNfZGlyKQ0KDQojICAgIHByaW50IGZ1bl9jYWxsDQogICAgdHJ5Og0KICAgICAgICBweV9maWxlPSdpbXBvcnQgJytmdW5fY2FsbC5zcGxpdCgnLicpWzBdDQojICAgICAgICBwcmludCBweV9maWxlLHN5cy5wYXRoDQogICAgICAgIGV4ZWMoIHB5X2ZpbGUpDQojICAgICAgICBwcmludCAnZG9uZScNCiAgICBleGNlcHQ6DQogICAgICAgICNwcmludCAnZXJyb3IgaW4gaW1wb3J0Jw0KICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKGZpbGU9c3lzLnN0ZG91dCkNCiMgICAgcHJpbnQgJ3JldF92YWw9JytmdW5fY2FsbA0KICAgIGV4ZWMgKCdyZXRfdmFsPScrZnVuX2NhbGwpDQojICAgIHByaW50IHJldF92YWwNCiAgICAjZXhlYygncmV0X3ZhbD0xKzEnKQ0KICAgIHRyeToNCiAgICAgICAgcmV0dXJuIHN0cihyZXRfdmFsKQ0KICAgIGV4Y2VwdDogcmV0dXJuIHJldF92YWwNCg0KZGVmIGRvRXZhbEZ1bmN0aW9uKGZ1bl9jYWxsLHBhZ2VfZGF0YSxDb29raWVfSmFyLG0pOg0KIyAgICBwcmludCAnZG9FdmFsRnVuY3Rpb24nDQogICAgdHJ5Og0KICAgICAgICBnbG9iYWwgZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXINCiAgICAgICAgZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXI9Z0xTUHJvRHluYW1pY0NvZGVOdW1iZXIrMQ0KICAgICAgICByZXRfdmFsPScnDQogICAgICAgIHByaW50ICdkb29vb2RvbycNCiAgICAgICAgaWYgZnVuY3Rpb25zX2RpciBub3QgaW4gc3lzLnBhdGg6DQogICAgICAgICAgICBzeXMucGF0aC5hcHBlbmQoZnVuY3Rpb25zX2RpcikNCg0KICAgICAgICBmaWxlbmFtZT0nTFNQcm9keW5hbWljQ29kZSVzLnB5JyVzdHIoZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXIpDQogICAgICAgIGZpbGVuYW1ld2l0aHBhdGg9b3MucGF0aC5qb2luKGZ1bmN0aW9uc19kaXIsZmlsZW5hbWUpDQogICAgICAgIGY9b3BlbihmaWxlbmFtZXdpdGhwYXRoLCJ3YiIpDQogICAgICAgIGYud3JpdGUoIiMgLSotIGNvZGluZzogdXRmLTggLSotXG4iKQ0KICAgICAgICBmLndyaXRlKGZ1bl9jYWxsLmVuY29kZSgidXRmLTgiKSk7DQogICAgICAgIGYuY2xvc2UoKQ0KICAgICAgICBwcmludCAnYmVmb3JlIGRvJw0KICAgICAgICBMU1Byb2R5bmFtaWNDb2RlID0gaW1wb3J0X2J5X3N0cmluZyhmaWxlbmFtZS5zcGxpdCgnLicpWzBdLGZpbGVuYW1ld2l0aHBhdGgpDQogICAgICAgIHByaW50ICdhZnRlcicNCiAgICAgICAgIA0KICAgICAgICByZXRfdmFsPUxTUHJvZHluYW1pY0NvZGUuR2V0TFNQcm9EYXRhKHBhZ2VfZGF0YSxDb29raWVfSmFyLG0pDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybiBzdHIocmV0X3ZhbCkNCiAgICAgICAgZXhjZXB0OiByZXR1cm4gcmV0X3ZhbA0KICAgIGV4Y2VwdDogdHJhY2ViYWNrLnByaW50X2V4YygpDQogICAgcmV0dXJuICIiDQoNCmRlZiBpbXBvcnRfYnlfc3RyaW5nKGZ1bGxfbmFtZSxmaWxlbmFtZXdpdGhwYXRoKToNCiAgICB0cnk6DQogICAgICAgIA0KICAgICAgICBpbXBvcnQgaW1wb3J0bGliDQogICAgICAgIHJldHVybiBpbXBvcnRsaWIuaW1wb3J0X21vZHVsZShmdWxsX25hbWUsIHBhY2thZ2U9Tm9uZSkNCiAgICBleGNlcHQ6DQogICAgICAgIGltcG9ydCBpbXANCiAgICAgICAgcmV0dXJuIGltcC5sb2FkX3NvdXJjZShmdWxsX25hbWUsZmlsZW5hbWV3aXRocGF0aCkNCg0KDQpkZWYgZ2V0R29vZ2xlUmVjYXB0Y2hhUmVzcG9uc2UoY2FwdGNoYWtleSwgY2osdHlwZT0xKTogIzEgZm9yIGdldCwgMiBmb3IgcG9zdCwgMyBmb3IgcmF3cG9zdA0KIyAgICAjaGVhZGVycz1bKCdVc2VyLUFnZW50JywnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBydjoxNC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzE0LjAuMScpXQ0KIyAgICBodG1sX3RleHQ9Z2V0VXJsKHVybCxub3JlZGlyPVRydWUsIGNvb2tpZUphcj1jaixoZWFkZXJzPWhlYWRlcnMpDQogIyAgIHByaW50ICdodG1sX3RleHQnLGh0bWxfdGV4dA0KICAgIHJlY2FwQ2hhbGxlbmdlPSIiDQogICAgc29sdXRpb249IiINCiMgICAgY2FwX3JlZz0icmVjYXAuKj9cP2s9KC4qPylcIiIgICAgDQojICAgIG1hdGNoID1yZS5maW5kYWxsKGNhcF9yZWcsIGh0bWxfdGV4dCkNCiAgICANCiAgICAgICAgDQojICAgIHByaW50ICdtYXRjaCcsbWF0Y2gNCiAgICBjYXB0Y2hhPUZhbHNlDQogICAgY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGw9Tm9uZQ0KICAgIHNvbHV0aW9uPU5vbmUNCiAgICBpZiBsZW4oY2FwdGNoYWtleSk+MDogI25ldyBzaGlueSBjYXB0Y2hhIQ0KICAgICAgICBjYXB0Y2hhX3VybD1jYXB0Y2hha2V5DQogICAgICAgIGlmIG5vdCBjYXB0Y2hhX3VybC5zdGFydHN3aXRoKCdodHRwJyk6DQogICAgICAgICAgICBjYXB0Y2hhX3VybD0naHR0cDovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkvY2hhbGxlbmdlP2s9JytjYXB0Y2hhX3VybCsnJmFqYXg9MScNCiMgICAgICAgIHByaW50ICdjYXB0Y2hhX3VybCcsY2FwdGNoYV91cmwNCiAgICAgICAgY2FwdGNoYT1UcnVlDQoNCiAgICAgICAgY2FwX2NoYWxsX3JlZz0nY2hhbGxlbmdlLio/XCcoLio/KVwnJw0KICAgICAgICBjYXBfaW1hZ2VfcmVnPSdcJyguKj8pXCcnDQogICAgICAgIGNhcHRjaGFfc2NyaXB0PWdldFVybChjYXB0Y2hhX3VybCxjb29raWVKYXI9Y2opDQogICAgICAgIHJlY2FwQ2hhbGxlbmdlPXJlLmZpbmRhbGwoY2FwX2NoYWxsX3JlZywgY2FwdGNoYV9zY3JpcHQpWzBdDQogICAgICAgIGNhcHRjaGFfcmVsb2FkPSdodHRwOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS9yZWxvYWQ/Yz0nOw0KICAgICAgICBjYXB0Y2hhX2s9Y2FwdGNoYV91cmwuc3BsaXQoJ2s9JylbMV0NCiAgICAgICAgY2FwdGNoYV9yZWxvYWQrPXJlY2FwQ2hhbGxlbmdlKycmaz0nK2NhcHRjaGFfaysnJnJlYXNvbj1pJnR5cGU9aW1hZ2UmbGFuZz1lbicNCiAgICAgICAgY2FwdGNoYV9yZWxvYWRfanM9Z2V0VXJsKGNhcHRjaGFfcmVsb2FkLGNvb2tpZUphcj1jaikNCiAgICAgICAgY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGw9cmUuZmluZGFsbChjYXBfaW1hZ2VfcmVnLCBjYXB0Y2hhX3JlbG9hZF9qcylbMF0NCiAgICAgICAgY2FwdGNoYV9pbWFnZV91cmw9J2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpL2ltYWdlP2M9JytjYXB0Y2hhX3JlbG9hZF9yZXNwb25zZV9jaGFsbA0KICAgICAgICBpZiBub3QgY2FwdGNoYV9pbWFnZV91cmwuc3RhcnRzd2l0aCgiaHR0cCIpOg0KICAgICAgICAgICAgY2FwdGNoYV9pbWFnZV91cmw9J2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLycrY2FwdGNoYV9pbWFnZV91cmwNCiAgICAgICAgaW1wb3J0IHJhbmRvbQ0KICAgICAgICBuPXJhbmRvbS5yYW5kcmFuZ2UoMTAwLDEwMDAsNSkNCiAgICAgICAgbG9jYWxfY2FwdGNoYSA9IG9zLnBhdGguam9pbihwcm9maWxlLHN0cihuKSArImNhcHRjaGEuaW1nIiApDQogICAgICAgIGxvY2FsRmlsZSA9IG9wZW4obG9jYWxfY2FwdGNoYSwgIndiIikNCiAgICAgICAgbG9jYWxGaWxlLndyaXRlKGdldFVybChjYXB0Y2hhX2ltYWdlX3VybCxjb29raWVKYXI9Y2opKQ0KICAgICAgICBsb2NhbEZpbGUuY2xvc2UoKQ0KICAgICAgICBzb2x2ZXIgPSBJbnB1dFdpbmRvdyhjYXB0Y2hhPWxvY2FsX2NhcHRjaGEpDQogICAgICAgIHNvbHV0aW9uID0gc29sdmVyLmdldCgpDQogICAgICAgIG9zLnJlbW92ZShsb2NhbF9jYXB0Y2hhKQ0KDQogICAgaWYgY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGw6DQogICAgICAgIGlmIHR5cGU9PTE6DQogICAgICAgICAgICByZXR1cm4gJ3JlY2FwdGNoYV9jaGFsbGVuZ2VfZmllbGQ9Jyt1cmxsaWIucXVvdGVfcGx1cyhjYXB0Y2hhX3JlbG9hZF9yZXNwb25zZV9jaGFsbCkrJyZyZWNhcHRjaGFfcmVzcG9uc2VfZmllbGQ9Jyt1cmxsaWIucXVvdGVfcGx1cyhzb2x1dGlvbikNCiAgICAgICAgZWxpZiB0eXBlPT0yOg0KICAgICAgICAgICAgcmV0dXJuICdyZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkOicrY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGwrJyxyZWNhcHRjaGFfcmVzcG9uc2VfZmllbGQ6Jytzb2x1dGlvbg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuICdyZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGwpKycmcmVjYXB0Y2hhX3Jlc3BvbnNlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoc29sdXRpb24pDQogICAgZWxzZToNCiAgICAgICAgcmV0dXJuICcnDQogICAgICAgIA0KDQpkZWYgZ2V0VXJsKHVybCwgY29va2llSmFyPU5vbmUscG9zdD1Ob25lLCB0aW1lb3V0PTIwLCBoZWFkZXJzPU5vbmUsIG5vcmVkaXI9RmFsc2UpOg0KDQoNCiAgICBjb29raWVfaGFuZGxlciA9IHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3Nvcihjb29raWVKYXIpDQoNCiAgICBpZiBub3JlZGlyOg0KICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihOb1JlZGlyZWN0aW9uLGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkNCiAgICBlbHNlOg0KICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihjb29raWVfaGFuZGxlciwgdXJsbGliMi5IVFRQQmFzaWNBdXRoSGFuZGxlcigpLCB1cmxsaWIyLkhUVFBIYW5kbGVyKCkpDQogICAgI29wZW5lciA9IHVybGxpYjIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQ0KICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwpDQogICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMzMuMC4xNzUwLjE1NCBTYWZhcmkvNTM3LjM2JykNCiAgICBpZiBoZWFkZXJzOg0KICAgICAgICBmb3IgaCxodiBpbiBoZWFkZXJzOg0KICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoaCxodikNCg0KICAgIHJlc3BvbnNlID0gb3BlbmVyLm9wZW4ocmVxLHBvc3QsdGltZW91dD10aW1lb3V0KQ0KICAgIGxpbms9cmVzcG9uc2UucmVhZCgpDQogICAgcmVzcG9uc2UuY2xvc2UoKQ0KICAgIHJldHVybiBsaW5rOw0KDQpkZWYgZ2V0X2RlY29kZShzdHIscmVnPU5vbmUpOg0KICAgIGlmIHJlZzoNCiAgICAgICAgc3RyPXJlLmZpbmRhbGwocmVnLCBzdHIpWzBdDQogICAgczEgPSB1cmxsaWIudW5xdW90ZShzdHJbMDogbGVuKHN0ciktMV0pOw0KICAgIHQgPSAnJzsNCiAgICBmb3IgaSBpbiByYW5nZSggbGVuKHMxKSk6DQogICAgICAgIHQgKz0gY2hyKG9yZChzMVtpXSkgLSBzMVtsZW4oczEpLTFdKTsNCiAgICB0PXVybGxpYi51bnF1b3RlKHQpDQojICAgIHByaW50IHQNCiAgICByZXR1cm4gdA0KDQpkZWYgamF2YXNjcmlwdFVuRXNjYXBlKHN0cik6DQogICAganM9cmUuZmluZGFsbCgndW5lc2NhcGVcKFwnKC4qPylcJycsc3RyKQ0KIyAgICBwcmludCAnanMnLGpzDQogICAgaWYgKG5vdCBqcz09Tm9uZSkgYW5kIGxlbihqcyk+MDoNCiAgICAgICAgZm9yIGogaW4ganM6DQogICAgICAgICAgICAjcHJpbnQgdXJsbGliLnVucXVvdGUoaikNCiAgICAgICAgICAgIHN0cj1zdHIucmVwbGFjZShqICx1cmxsaWIudW5xdW90ZShqKSkNCiAgICByZXR1cm4gc3RyDQoNCmlpZD0wDQpkZWYgYXNrQ2FwdGNoYShtLGh0bWxfcGFnZSwgY29va2llSmFyKToNCiAgICBnbG9iYWwgaWlkDQogICAgaWlkKz0xDQogICAgZXhwcmU9IG1bJ2V4cHJlcyddDQogICAgcGFnZV91cmwgPSBtWydwYWdlJ10NCiAgICBjYXB0Y2hhX3JlZ2V4PXJlLmNvbXBpbGUoJ1wkTGl2ZVN0cmVhbUNhcHRjaGFcWyhbXlxdXSopXF0nKS5maW5kYWxsKGV4cHJlKVswXQ0KDQogICAgY2FwdGNoYV91cmw9cmUuY29tcGlsZShjYXB0Y2hhX3JlZ2V4KS5maW5kYWxsKGh0bWxfcGFnZSlbMF0NCiMgICAgcHJpbnQgZXhwcmUsY2FwdGNoYV9yZWdleCxjYXB0Y2hhX3VybA0KICAgIGlmIG5vdCBjYXB0Y2hhX3VybC5zdGFydHN3aXRoKCJodHRwIik6DQogICAgICAgIHBhZ2VfPSdodHRwOi8vJysiIi5qb2luKHBhZ2VfdXJsLnNwbGl0KCcvJylbMjozXSkNCiAgICAgICAgaWYgY2FwdGNoYV91cmwuc3RhcnRzd2l0aCgiLyIpOg0KICAgICAgICAgICAgY2FwdGNoYV91cmw9cGFnZV8rY2FwdGNoYV91cmwNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGNhcHRjaGFfdXJsPXBhZ2VfKycvJytjYXB0Y2hhX3VybA0KDQogICAgbG9jYWxfY2FwdGNoYSA9IG9zLnBhdGguam9pbihwcm9maWxlLCBzdHIoaWlkKSsiY2FwdGNoYS5qcGciICkNCiAgICBsb2NhbEZpbGUgPSBvcGVuKGxvY2FsX2NhcHRjaGEsICJ3YiIpDQojICAgIHByaW50ICcgYyBjYXB1cmwnLGNhcHRjaGFfdXJsDQogICAgcmVxID0gdXJsbGliMi5SZXF1ZXN0KGNhcHRjaGFfdXJsKQ0KICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgcnY6MTQuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xNC4wLjEnKQ0KICAgIGlmICdyZWZlcmVyJyBpbiBtOg0KICAgICAgICByZXEuYWRkX2hlYWRlcignUmVmZXJlcicsIG1bJ3JlZmVyZXInXSkNCiAgICBpZiAnYWdlbnQnIGluIG06DQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgbVsnYWdlbnQnXSkNCiAgICBpZiAnc2V0Y29va2llJyBpbiBtOg0KIyAgICAgICAgcHJpbnQgJ2FkZGluZyBjb29raWUnLG1bJ3NldGNvb2tpZSddDQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCBtWydzZXRjb29raWUnXSkNCg0KICAgICNjb29raWVfaGFuZGxlciA9IHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3Nvcihjb29raWVKYXIpDQogICAgI29wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkNCiAgICAjb3BlbmVyID0gdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpDQogICAgdXJsbGliMi51cmxvcGVuKHJlcSkNCiAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXEpDQoNCiAgICBsb2NhbEZpbGUud3JpdGUocmVzcG9uc2UucmVhZCgpKQ0KICAgIHJlc3BvbnNlLmNsb3NlKCkNCiAgICBsb2NhbEZpbGUuY2xvc2UoKQ0KICAgIHNvbHZlciA9IElucHV0V2luZG93KGNhcHRjaGE9bG9jYWxfY2FwdGNoYSkNCiAgICBzb2x1dGlvbiA9IHNvbHZlci5nZXQoKQ0KICAgIHJldHVybiBzb2x1dGlvbg0KDQpkZWYgYXNrQ2FwdGNoYU5ldyhpbWFnZXJlZ2V4LGh0bWxfcGFnZSxjb29raWVKYXIsbSk6DQogICAgZ2xvYmFsIGlpZA0KICAgIGlpZCs9MQ0KDQoNCiAgICBpZiBub3QgaW1hZ2VyZWdleD09Jyc6DQogICAgICAgIGlmIGh0bWxfcGFnZS5zdGFydHN3aXRoKCJodHRwIik6DQogICAgICAgICAgICBwYWdlXz1nZXRVcmwoaHRtbF9wYWdlLGNvb2tpZUphcj1jb29raWVKYXIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwYWdlXz1odG1sX3BhZ2UNCiAgICAgICAgY2FwdGNoYV91cmw9cmUuY29tcGlsZShpbWFnZXJlZ2V4KS5maW5kYWxsKGh0bWxfcGFnZSlbMF0NCiAgICBlbHNlOg0KICAgICAgICBjYXB0Y2hhX3VybD1odG1sX3BhZ2UNCiAgICAgICAgaWYgJ29uZXBsYXkudHYvZW1iZWQnIGluIGh0bWxfcGFnZToNCiAgICAgICAgICAgIGltcG9ydCBvbmVwbGF5DQogICAgICAgICAgICBwYWdlXz1nZXRVcmwoaHRtbF9wYWdlLGNvb2tpZUphcj1jb29raWVKYXIpDQogICAgICAgICAgICBjYXB0Y2hhX3VybD1vbmVwbGF5LmdldENhcHRjaGFVcmwocGFnZV8pDQoNCiAgICBsb2NhbF9jYXB0Y2hhID0gb3MucGF0aC5qb2luKHByb2ZpbGUsIHN0cihpaWQpKyJjYXB0Y2hhLmpwZyIgKQ0KICAgIGxvY2FsRmlsZSA9IG9wZW4obG9jYWxfY2FwdGNoYSwgIndiIikNCiMgICAgcHJpbnQgJyBjIGNhcHVybCcsY2FwdGNoYV91cmwNCiAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QoY2FwdGNoYV91cmwpDQogICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBydjoxNC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzE0LjAuMScpDQogICAgaWYgJ3JlZmVyZXInIGluIG06DQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdSZWZlcmVyJywgbVsncmVmZXJlciddKQ0KICAgIGlmICdhZ2VudCcgaW4gbToNCiAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItYWdlbnQnLCBtWydhZ2VudCddKQ0KICAgIGlmICdhY2NlcHQnIGluIG06DQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdBY2NlcHQnLCBtWydhY2NlcHQnXSkNCiAgICBpZiAnc2V0Y29va2llJyBpbiBtOg0KIyAgICAgICAgcHJpbnQgJ2FkZGluZyBjb29raWUnLG1bJ3NldGNvb2tpZSddDQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCBtWydzZXRjb29raWUnXSkNCg0KICAgICNjb29raWVfaGFuZGxlciA9IHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3Nvcihjb29raWVKYXIpDQogICAgI29wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkNCiAgICAjb3BlbmVyID0gdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpDQogICAgI3VybGxpYjIudXJsb3BlbihyZXEpDQogICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQ0KDQogICAgbG9jYWxGaWxlLndyaXRlKHJlc3BvbnNlLnJlYWQoKSkNCiAgICByZXNwb25zZS5jbG9zZSgpDQogICAgbG9jYWxGaWxlLmNsb3NlKCkNCiAgICBzb2x2ZXIgPSBJbnB1dFdpbmRvdyhjYXB0Y2hhPWxvY2FsX2NhcHRjaGEpDQogICAgc29sdXRpb24gPSBzb2x2ZXIuZ2V0KCkNCiAgICByZXR1cm4gc29sdXRpb24NCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIEZ1bmN0aW9uICA6IEdVSUVkaXRFeHBvcnROYW1lICAgICAgICAgICAgICAgICAgICAgICAgICMNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KIyBQYXJhbWV0ZXIgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjDQojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMNCiMgbmFtZSAgICAgICAgc3VnZXN0ZWQgbmFtZSBmb3IgZXhwb3J0ICAgICAgICAgICAgICAgICAgIw0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIA0KIyBSZXR1cm5zICAgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjDQojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMNCiMgbmFtZSAgICAgICAgbmFtZSBvZiBleHBvcnQgZXhjbHVkaW5nIGFueSBleHRlbnNpb24gICAgIw0KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmRlZiBUYWtlSW5wdXQobmFtZSwgaGVhZG5hbWUpOg0KDQoNCiAgICBrYiA9IHhibWMuS2V5Ym9hcmQoJ2RlZmF1bHQnLCAnaGVhZGluZycsIFRydWUpDQogICAga2Iuc2V0RGVmYXVsdChuYW1lKQ0KICAgIGtiLnNldEhlYWRpbmcoaGVhZG5hbWUpDQogICAga2Iuc2V0SGlkZGVuSW5wdXQoRmFsc2UpDQogICAgcmV0dXJuIGtiLmdldFRleHQoKQ0KDQogICANCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQpjbGFzcyBJbnB1dFdpbmRvdyh4Ym1jZ3VpLldpbmRvd0RpYWxvZyk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgIHNlbGYuY3B0bG9jID0ga3dhcmdzLmdldCgnY2FwdGNoYScpDQogICAgICAgIHNlbGYuaW1nID0geGJtY2d1aS5Db250cm9sSW1hZ2UoMzM1LDMwLDYyNCw2MCxzZWxmLmNwdGxvYykNCiAgICAgICAgc2VsZi5hZGRDb250cm9sKHNlbGYuaW1nKQ0KICAgICAgICBzZWxmLmtiZCA9IHhibWMuS2V5Ym9hcmQoKQ0KDQogICAgZGVmIGdldChzZWxmKToNCiAgICAgICAgc2VsZi5zaG93KCkNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBzZWxmLmtiZC5kb01vZGFsKCkNCiAgICAgICAgaWYgKHNlbGYua2JkLmlzQ29uZmlybWVkKCkpOg0KICAgICAgICAgICAgdGV4dCA9IHNlbGYua2JkLmdldFRleHQoKQ0KICAgICAgICAgICAgc2VsZi5jbG9zZSgpDQogICAgICAgICAgICByZXR1cm4gdGV4dA0KICAgICAgICBzZWxmLmNsb3NlKCkNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCmRlZiBnZXRFcG9jVGltZSgpOg0KICAgIGltcG9ydCB0aW1lDQogICAgcmV0dXJuIHN0cihpbnQodGltZS50aW1lKCkqMTAwMCkpDQoNCmRlZiBnZXRFcG9jVGltZTIoKToNCiAgICBpbXBvcnQgdGltZQ0KICAgIHJldHVybiBzdHIoaW50KHRpbWUudGltZSgpKSkNCg0KZGVmIGdldF9wYXJhbXMoKToNCiAgICAgICAgcGFyYW09W10NCiAgICAgICAgcGFyYW1zdHJpbmc9c3lzLmFyZ3ZbMl0NCiAgICAgICAgaWYgbGVuKHBhcmFtc3RyaW5nKT49MjoNCiAgICAgICAgICAgIHBhcmFtcz1zeXMuYXJndlsyXQ0KICAgICAgICAgICAgY2xlYW5lZHBhcmFtcz1wYXJhbXMucmVwbGFjZSgnPycsJycpDQogICAgICAgICAgICBpZiAocGFyYW1zW2xlbihwYXJhbXMpLTFdPT0nLycpOg0KICAgICAgICAgICAgICAgIHBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQ0KICAgICAgICAgICAgcGFpcnNvZnBhcmFtcz1jbGVhbmVkcGFyYW1zLnNwbGl0KCcmJykNCiAgICAgICAgICAgIHBhcmFtPXt9DQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOg0KICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXt9DQogICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9cGFpcnNvZnBhcmFtc1tpXS5zcGxpdCgnPScpDQogICAgICAgICAgICAgICAgaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOg0KICAgICAgICAgICAgICAgICAgICBwYXJhbVtzcGxpdHBhcmFtc1swXV09c3BsaXRwYXJhbXNbMV0NCiAgICAgICAgcmV0dXJuIHBhcmFtDQoNCg0KZGVmIGdldEZhdm9yaXRlcygpOg0KICAgICAgICBpdGVtcyA9IGpzb24ubG9hZHMob3BlbihmYXZvcml0ZXMpLnJlYWQoKSkNCiAgICAgICAgdG90YWwgPSBsZW4oaXRlbXMpDQogICAgICAgIGZvciBpIGluIGl0ZW1zOg0KICAgICAgICAgICAgbmFtZSA9IGlbMF0NCiAgICAgICAgICAgIHVybCA9IGlbMV0NCiAgICAgICAgICAgIGljb25pbWFnZSA9IGlbMl0NCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBmYW5BcnQgPSBpWzNdDQogICAgICAgICAgICAgICAgaWYgZmFuQXJ0ID09IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygndXNlX3RodW1iJykgPT0gInRydWUiOg0KICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSBpY29uaW1hZ2UNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSBmYW5hcnQNCiAgICAgICAgICAgIHRyeTogcGxheWxpc3QgPSBpWzVdDQogICAgICAgICAgICBleGNlcHQ6IHBsYXlsaXN0ID0gTm9uZQ0KICAgICAgICAgICAgdHJ5OiByZWdleHMgPSBpWzZdDQogICAgICAgICAgICBleGNlcHQ6IHJlZ2V4cyA9IE5vbmUNCg0KICAgICAgICAgICAgaWYgaVs0XSA9PSAwOg0KICAgICAgICAgICAgICAgIGFkZExpbmsodXJsLG5hbWUsaWNvbmltYWdlLGZhbkFydCwnJywnJywnJywnZmF2JyxwbGF5bGlzdCxyZWdleHMsdG90YWwpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCxpWzRdLGljb25pbWFnZSxmYW5hcnQsJycsJycsJycsJycsJ2ZhdicpDQoNCg0KZGVmIGFkZEZhdm9yaXRlKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQsbW9kZSxwbGF5bGlzdD1Ob25lLHJlZ2V4cz1Ob25lKToNCiAgICAgICAgZmF2TGlzdCA9IFtdDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICMgc2VlbXMgdGhhdCBhZnRlcg0KICAgICAgICAgICAgbmFtZSA9IG5hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGZhdm9yaXRlcyk9PUZhbHNlOg0KICAgICAgICAgICAgYWRkb25fbG9nKCdNYWtpbmcgRmF2b3JpdGVzIEZpbGUnKQ0KICAgICAgICAgICAgZmF2TGlzdC5hcHBlbmQoKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQsbW9kZSxwbGF5bGlzdCxyZWdleHMpKQ0KICAgICAgICAgICAgYSA9IG9wZW4oZmF2b3JpdGVzLCAidyIpDQogICAgICAgICAgICBhLndyaXRlKGpzb24uZHVtcHMoZmF2TGlzdCkpDQogICAgICAgICAgICBhLmNsb3NlKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGFkZG9uX2xvZygnQXBwZW5kaW5nIEZhdm9yaXRlcycpDQogICAgICAgICAgICBhID0gb3BlbihmYXZvcml0ZXMpLnJlYWQoKQ0KICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMoYSkNCiAgICAgICAgICAgIGRhdGEuYXBwZW5kKChuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0LG1vZGUpKQ0KICAgICAgICAgICAgYiA9IG9wZW4oZmF2b3JpdGVzLCAidyIpDQogICAgICAgICAgICBiLndyaXRlKGpzb24uZHVtcHMoZGF0YSkpDQogICAgICAgICAgICBiLmNsb3NlKCkNCg0KDQpkZWYgcm1GYXZvcml0ZShuYW1lKToNCiAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMob3BlbihmYXZvcml0ZXMpLnJlYWQoKSkNCiAgICAgICAgZm9yIGluZGV4IGluIHJhbmdlKGxlbihkYXRhKSk6DQogICAgICAgICAgICBpZiBkYXRhW2luZGV4XVswXT09bmFtZToNCiAgICAgICAgICAgICAgICBkZWwgZGF0YVtpbmRleF0NCiAgICAgICAgICAgICAgICBiID0gb3BlbihmYXZvcml0ZXMsICJ3IikNCiAgICAgICAgICAgICAgICBiLndyaXRlKGpzb24uZHVtcHMoZGF0YSkpDQogICAgICAgICAgICAgICAgYi5jbG9zZSgpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Db250YWluZXIuUmVmcmVzaCIpDQoNCmRlZiB1cmxzb2x2ZXIodXJsKToNCiAgICBpbXBvcnQgdXJscmVzb2x2ZXINCiAgICBob3N0ID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybCkNCiAgICBpZiBob3N0Og0KICAgICAgICByZXNvbHZlciA9IHVybHJlc29sdmVyLnJlc29sdmUodXJsKQ0KICAgICAgICByZXNvbHZlZCA9IHJlc29sdmVyDQogICAgICAgIGlmIGlzaW5zdGFuY2UocmVzb2x2ZWQsbGlzdCk6DQogICAgICAgICAgICBmb3IgayBpbiByZXNvbHZlZDoNCiAgICAgICAgICAgICAgICBxdWFsaXR5ID0gYWRkb24uZ2V0U2V0dGluZygncXVhbGl0eScpDQogICAgICAgICAgICAgICAgaWYga1sncXVhbGl0eSddID09ICdIRCcgIDoNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSBrWyd1cmwnXQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYga1sncXVhbGl0eSddID09ICdTRCcgOg0KICAgICAgICAgICAgICAgICAgICByZXNvbHZlciA9IGtbJ3VybCddDQogICAgICAgICAgICAgICAgZWxpZiBrWydxdWFsaXR5J10gPT0gJzEwODBwJyBhbmQgYWRkb24uZ2V0U2V0dGluZygnMTA4MHBxdWFsaXR5JykgPT0gJ3RydWUnIDoNCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSBrWyd1cmwnXQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmVzb2x2ZXIgPSByZXNvbHZlZA0KICAgIGVsc2U6DQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKE11bmRvRHJhZ29uQmFsbCxVcmxyZXNvbHZlciBkb25vdCBzdXBwb3J0IHRoaXMgZG9tYWluLiAtICw1MDAwKSIpDQogICAgICAgIHJlc29sdmVyPXVybA0KICAgIHJldHVybiByZXNvbHZlcg0KZGVmIHRyeXBsYXkodXJsLGxpc3RpdGVtLHBkaWFsb2d1ZT1Ob25lKTogICAgDQoNCiAgICBpZiB1cmwubG93ZXIoKS5zdGFydHN3aXRoKCdwbHVnaW4nKSBhbmQgJ3lvdXR1YmUnIG5vdCBpbiAgdXJsLmxvd2VyKCk6DQogICAgICAgIHByaW50ICdwbGF5aW5nIHZpYSBydW5wbHVnaW4nDQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ1hCTUMuUnVuUGx1Z2luKCcrdXJsKycpJykgDQogICAgICAgIGZvciBpIGluIHJhbmdlKDgpOg0KICAgICAgICAgICAgeGJtYy5zbGVlcCg1MDApICMjc2xlZXAgZm9yIDEwIHNlY29uZHMsIGhhbGYgZWFjaCB0aW1lDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgI3ByaW50ICdjb25kaScNCiAgICAgICAgICAgICAgICBpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCJQbGF5ZXIuSGFzTWVkaWEiKSBhbmQgeGJtYy5QbGF5ZXIoKS5pc1BsYXlpbmcoKToNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICBwcmludCAncmV0dXJuaW5nIG5vdycNCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgaW1wb3J0ICBDdXN0b21QbGF5ZXIsdGltZQ0KDQogICAgcGxheWVyID0gQ3VzdG9tUGxheWVyLk15WEJNQ1BsYXllcigpDQogICAgcGxheWVyLnBkaWFsb2d1ZT1wZGlhbG9ndWUNCiAgICBzdGFydCA9IHRpbWUudGltZSgpIA0KICAgICN4Ym1jLlBsYXllcigpLnBsYXkoIGxpdmVMaW5rLGxpc3RpdGVtKQ0KICAgIHByaW50ICdnb2luZyB0byBwbGF5Jw0KICAgIGltcG9ydCB0aW1lDQogICAgYmVmb3Jlc3RhcnQ9dGltZS50aW1lKCkNCiAgICBwbGF5ZXIucGxheSggdXJsLCBsaXN0aXRlbSkNCiAgICB4Ym1jLnNsZWVwKDEwMDApDQogICAgDQogICAgdHJ5Og0KICAgICAgICB3aGlsZSBwbGF5ZXIuaXNfYWN0aXZlOg0KICAgICAgICAgICAgeGJtYy5zbGVlcCg0MDApDQogICAgICAgICAgIA0KICAgICAgICAgICAgaWYgcGxheWVyLnVybHBsYXllZDoNCiAgICAgICAgICAgICAgICBwcmludCAneWVzIHBsYXllZCcNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICAgICAgaWYgdGltZS50aW1lKCktYmVmb3Jlc3RhcnQ+NDogcmV0dXJuIEZhbHNlDQogICAgICAgICAgICAjeGJtYy5zbGVlcCgxMDAwKQ0KICAgIGV4Y2VwdDogcGFzcw0KICAgIHByaW50ICdub3QgcGxheWVkJyx1cmwNCiAgICByZXR1cm4gRmFsc2UNCmRlZiBwbGF5X3BsYXlsaXN0KG5hbWUsIG11X3BsYXlsaXN0LHF1ZXVlVmlkZW89Tm9uZSk6DQogICAgICAgIHBsYXlsaXN0ID0geGJtYy5QbGF5TGlzdCh4Ym1jLlBMQVlMSVNUX1ZJREVPKQ0KICAgICAgICAjcHJpbnQgJ211X3BsYXlsaXN0JyxtdV9wbGF5bGlzdA0KICAgICAgICBpZiAnJCRMU1BsYXlPbmx5T25lJCQnIGluIG11X3BsYXlsaXN0WzBdOg0KICAgICAgICAgICAgbXVfcGxheWxpc3RbMF09bXVfcGxheWxpc3RbMF0ucmVwbGFjZSgnJCRMU1BsYXlPbmx5T25lJCQnLCcnKQ0KICAgICAgICAgICAgaW1wb3J0IHVybHBhcnNlDQogICAgICAgICAgICBuYW1lcyA9IFtdDQogICAgICAgICAgICBpbG9vcD0wDQogICAgICAgICAgICBwcm9ncmVzcyA9IHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQ0KICAgICAgICAgICAgcHJvZ3Jlc3MuY3JlYXRlKCdQcm9ncmVzcycsICdUcnlpbmcgTXVsdGlwbGUgTGlua3MnKQ0KICAgICAgICAgICAgZm9yIGkgaW4gbXVfcGxheWxpc3Q6DQogICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICBpZiAnJCRsc25hbWU9JyBpbiBpOg0KICAgICAgICAgICAgICAgICAgICBkX25hbWU9aS5zcGxpdCgnJCRsc25hbWU9JylbMV0uc3BsaXQoJyZyZWdleHMnKVswXQ0KICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBtdV9wbGF5bGlzdFtpbG9vcF09aS5zcGxpdCgnJCRsc25hbWU9JylbMF0rKCcmcmVnZXhzJytpLnNwbGl0KCcmcmVnZXhzJylbMV0gaWYgJyZyZWdleHMnIGluIGkgZWxzZSAnJykgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRfbmFtZT11cmxwYXJzZS51cmxwYXJzZShpKS5uZXRsb2MNCiAgICAgICAgICAgICAgICAgICAgaWYgZF9uYW1lID09ICcnOg0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMuYXBwZW5kKG5hbWUpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKQ0KICAgICAgICAgICAgICAgIGluZGV4PWlsb29wDQogICAgICAgICAgICAgICAgaWxvb3ArPTENCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwbGF5bmFtZT1uYW1lc1tpbmRleF0NCiAgICAgICAgICAgICAgICBpZiBwcm9ncmVzcy5pc2NhbmNlbGVkKCk6IHJldHVybiANCiAgICAgICAgICAgICAgICBwcm9ncmVzcy51cGRhdGUoIGlsb29wL2xlbihtdV9wbGF5bGlzdCkqMTAwLCIiLCAiTGluayMlZCIlKGlsb29wKSxwbGF5bmFtZSAgKQ0KICAgICAgICAgICAgICAgIHByaW50ICdhdXRvIHBsYXluYW1leHgnLHBsYXluYW1lDQogICAgICAgICAgICAgICAgaWYgIiZtb2RlPTE5IiBpbiBtdV9wbGF5bGlzdFtpbmRleF06DQogICAgICAgICAgICAgICAgICAgICAgICAjcGxheXNldHJlc29sdmVkICh1cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykpLG5hbWUsaWNvbmltYWdlLFRydWUpDQogICAgICAgICAgICAgICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0ocGxheW5hbWUsIGljb25JbWFnZT1pY29uaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkNCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lfSkNCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpDQogICAgICAgICAgICAgICAgICAgIHVybHRvcGxheT11cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykucmVwbGFjZSgnOycsJycpKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UGF0aCh1cmx0b3BsYXkpDQogICAgICAgICAgICAgICAgICAgICN4Ym1jLlBsYXllcigpLnBsYXkodXJsdG9wbGF5LGxpeikNCiAgICAgICAgICAgICAgICAgICAgcGxheWVkPXRyeXBsYXkodXJsdG9wbGF5LGxpeikNCiAgICAgICAgICAgICAgICBlbGlmICIkZG9yZWdleCIgaW4gbXVfcGxheWxpc3RbaW5kZXhdIDoNCiMgICAgICAgICAgICAgICAgICAgIHByaW50IG11X3BsYXlsaXN0W2luZGV4XQ0KICAgICAgICAgICAgICAgICAgICBzZXBhdGUgPSBtdV9wbGF5bGlzdFtpbmRleF0uc3BsaXQoJyZyZWdleHM9JykNCiMgICAgICAgICAgICAgICAgICAgIHByaW50IHNlcGF0ZQ0KICAgICAgICAgICAgICAgICAgICB1cmwsc2V0cmVzb2x2ZWQgPSBnZXRSZWdleFBhcnNlZChzZXBhdGVbMV0sIHNlcGF0ZVswXSkNCiAgICAgICAgICAgICAgICAgICAgdXJsMiA9IHVybC5yZXBsYWNlKCc7JywnJykNCiAgICAgICAgICAgICAgICAgICAgbGl6ID0geGJtY2d1aS5MaXN0SXRlbShwbGF5bmFtZSwgaWNvbkltYWdlPWljb25pbWFnZSwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSdWaWRlbycsIGluZm9MYWJlbHM9eydUaXRsZSc6cGxheW5hbWV9KQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoIklzUGxheWFibGUiLCJ0cnVlIikNCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldFBhdGgodXJsMikNCiAgICAgICAgICAgICAgICAgICAgI3hibWMuUGxheWVyKCkucGxheSh1cmwyLGxpeikNCiAgICAgICAgICAgICAgICAgICAgcGxheWVkPXRyeXBsYXkodXJsMixsaXopDQoNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB1cmwgPSBtdV9wbGF5bGlzdFtpbmRleF0NCiAgICAgICAgICAgICAgICAgICAgdXJsPXVybC5zcGxpdCgnJnJlZ2V4cz0nKVswXQ0KICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRJbmZvKHR5cGU9J1ZpZGVvJywgaW5mb0xhYmVscz17J1RpdGxlJzpwbGF5bmFtZX0pDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UGF0aCh1cmwpDQogICAgICAgICAgICAgICAgICAgICN4Ym1jLlBsYXllcigpLnBsYXkodXJsLGxpeikNCiAgICAgICAgICAgICAgICAgICAgcGxheWVkPXRyeXBsYXkodXJsLGxpeikNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3BsYXllZCcscGxheWVkDQogICAgICAgICAgICAgICAgcHJpbnQgJ3BsYXllZCcscGxheWVkDQogICAgICAgICAgICAgICAgaWYgcGxheWVkOiByZXR1cm4NCiAgICAgICAgICAgIHJldHVybiAgICAgDQogICAgICAgIGlmIGFkZG9uLmdldFNldHRpbmcoJ2Fza19wbGF5bGlzdF9pdGVtcycpID09ICd0cnVlJyBhbmQgbm90IHF1ZXVlVmlkZW8gOg0KICAgICAgICAgICAgaW1wb3J0IHVybHBhcnNlDQogICAgICAgICAgICBuYW1lcyA9IFtdDQogICAgICAgICAgICBpbG9vcD0wDQogICAgICAgICAgICBmb3IgaSBpbiBtdV9wbGF5bGlzdDoNCiAgICAgICAgICAgICAgICBpZiAnJCRsc25hbWU9JyBpbiBpOg0KICAgICAgICAgICAgICAgICAgICBkX25hbWU9aS5zcGxpdCgnJCRsc25hbWU9JylbMV0uc3BsaXQoJyZyZWdleHMnKVswXQ0KICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBtdV9wbGF5bGlzdFtpbG9vcF09aS5zcGxpdCgnJCRsc25hbWU9JylbMF0rKCcmcmVnZXhzJytpLnNwbGl0KCcmcmVnZXhzJylbMV0gaWYgJyZyZWdleHMnIGluIGkgZWxzZSAnJykgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRfbmFtZT11cmxwYXJzZS51cmxwYXJzZShpKS5uZXRsb2MNCiAgICAgICAgICAgICAgICAgICAgaWYgZF9uYW1lID09ICcnOg0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMuYXBwZW5kKG5hbWUpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpbG9vcCs9MQ0KICAgICAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQ0KICAgICAgICAgICAgaW5kZXggPSBkaWFsb2cuc2VsZWN0KCdDaG9vc2UgYSB2aWRlbyBzb3VyY2UnLCBuYW1lcykNCiAgICAgICAgICAgIGlmIGluZGV4ID49IDA6DQogICAgICAgICAgICAgICAgcGxheW5hbWU9bmFtZXNbaW5kZXhdDQogICAgICAgICAgICAgICAgcHJpbnQgJ3BsYXluYW1leHgnLHBsYXluYW1lDQogICAgICAgICAgICAgICAgaWYgIiZtb2RlPTE5IiBpbiBtdV9wbGF5bGlzdFtpbmRleF06DQogICAgICAgICAgICAgICAgICAgICAgICAjcGxheXNldHJlc29sdmVkICh1cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykpLG5hbWUsaWNvbmltYWdlLFRydWUpDQogICAgICAgICAgICAgICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0ocGxheW5hbWUsIGljb25JbWFnZT1pY29uaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkNCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lfSkNCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpDQogICAgICAgICAgICAgICAgICAgIHVybHRvcGxheT11cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykucmVwbGFjZSgnOycsJycpKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UGF0aCh1cmx0b3BsYXkpDQogICAgICAgICAgICAgICAgICAgIHhibWMuUGxheWVyKCkucGxheSh1cmx0b3BsYXksbGl6KQ0KICAgICAgICAgICAgICAgIGVsaWYgIiRkb3JlZ2V4IiBpbiBtdV9wbGF5bGlzdFtpbmRleF0gOg0KIyAgICAgICAgICAgICAgICAgICAgcHJpbnQgbXVfcGxheWxpc3RbaW5kZXhdDQogICAgICAgICAgICAgICAgICAgIHNlcGF0ZSA9IG11X3BsYXlsaXN0W2luZGV4XS5zcGxpdCgnJnJlZ2V4cz0nKQ0KIyAgICAgICAgICAgICAgICAgICAgcHJpbnQgc2VwYXRlDQogICAgICAgICAgICAgICAgICAgIHVybCxzZXRyZXNvbHZlZCA9IGdldFJlZ2V4UGFyc2VkKHNlcGF0ZVsxXSwgc2VwYXRlWzBdKQ0KICAgICAgICAgICAgICAgICAgICB1cmwyID0gdXJsLnJlcGxhY2UoJzsnLCcnKQ0KICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRJbmZvKHR5cGU9J1ZpZGVvJywgaW5mb0xhYmVscz17J1RpdGxlJzpwbGF5bmFtZX0pDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UGF0aCh1cmwyKQ0KICAgICAgICAgICAgICAgICAgICB4Ym1jLlBsYXllcigpLnBsYXkodXJsMixsaXopDQoNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB1cmwgPSBtdV9wbGF5bGlzdFtpbmRleF0NCiAgICAgICAgICAgICAgICAgICAgdXJsPXVybC5zcGxpdCgnJnJlZ2V4cz0nKVswXQ0KICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRJbmZvKHR5cGU9J1ZpZGVvJywgaW5mb0xhYmVscz17J1RpdGxlJzpwbGF5bmFtZX0pDQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQ0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UGF0aCh1cmwpDQogICAgICAgICAgICAgICAgICAgIHhibWMuUGxheWVyKCkucGxheSh1cmwsbGl6KQ0KICAgICAgICBlbGlmIG5vdCBxdWV1ZVZpZGVvOg0KICAgICAgICAgICAgI3BsYXlsaXN0ID0geGJtYy5QbGF5TGlzdCgxKSAjIDEgbWVhbnMgdmlkZW8NCiAgICAgICAgICAgIHBsYXlsaXN0LmNsZWFyKCkNCiAgICAgICAgICAgIGl0ZW0gPSAwDQogICAgICAgICAgICBmb3IgaSBpbiBtdV9wbGF5bGlzdDoNCiAgICAgICAgICAgICAgICBpdGVtICs9IDENCiAgICAgICAgICAgICAgICBpbmZvID0geGJtY2d1aS5MaXN0SXRlbSgnJXMpICVzJyAlKHN0cihpdGVtKSxuYW1lKSkNCiAgICAgICAgICAgICAgICAjIERvbid0IGRvIHRoaXMgYXMgcmVnZXggcGFyc2VkIG1pZ2h0IHRha2UgbG9uZ2VyDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBpZiAiJGRvcmVnZXgiIGluIGk6DQogICAgICAgICAgICAgICAgICAgICAgICBzZXBhdGUgPSBpLnNwbGl0KCcmcmVnZXhzPScpDQojICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgc2VwYXRlDQogICAgICAgICAgICAgICAgICAgICAgICB1cmwsc2V0cmVzb2x2ZWQgPSBnZXRSZWdleFBhcnNlZChzZXBhdGVbMV0sIHNlcGF0ZVswXSkNCiAgICAgICAgICAgICAgICAgICAgZWxpZiAiJm1vZGU9MTkiIGluIGk6DQogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmxzb2x2ZXIoaS5yZXBsYWNlKCcmbW9kZT0xOScsJycpLnJlcGxhY2UoJzsnLCcnKSkgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYgdXJsOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYWRkKHVybCwgaW5mbykNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYWRkKGksIGluZm8pDQogICAgICAgICAgICAgICAgICAgIHBhc3MgI3hibWMuUGxheWVyKCkucGxheSh1cmwpDQoNCiAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ3BsYXlsaXN0LnBsYXlvZmZzZXQodmlkZW8sMCknKQ0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUpDQogICAgICAgICAgICAgICAgcGxheWxpc3QuYWRkKG11X3BsYXlsaXN0LCBsaXN0aXRlbSkNCg0KDQpkZWYgZG93bmxvYWRfZmlsZShuYW1lLCB1cmwpOg0KICAgICAgICANCiAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnc2F2ZV9sb2NhdGlvbicpID09ICIiOg0KICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oJ011bmRvRHJhZ29uQmFsbCcsJ0Nob29zZSBhIGxvY2F0aW9uIHRvIHNhdmUgZmlsZXMuJywxNTAwMCwiK2ljb24rIikiKQ0KICAgICAgICAgICAgYWRkb24ub3BlblNldHRpbmdzKCkNCiAgICAgICAgcGFyYW1zID0geyd1cmwnOiB1cmwsICdkb3dubG9hZF9wYXRoJzogYWRkb24uZ2V0U2V0dGluZygnc2F2ZV9sb2NhdGlvbicpfQ0KICAgICAgICBkb3dubG9hZGVyLmRvd25sb2FkKG5hbWUsIHBhcmFtcykNCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQ0KICAgICAgICByZXQgPSBkaWFsb2cueWVzbm8oJ011bmRvRHJhZ29uQmFsbCcsICdEbyB5b3Ugd2FudCB0byBhZGQgdGhpcyBmaWxlIGFzIGEgc291cmNlPycpDQogICAgICAgIGlmIHJldDoNCiAgICAgICAgICAgIGFkZFNvdXJjZShvcy5wYXRoLmpvaW4oYWRkb24uZ2V0U2V0dGluZygnc2F2ZV9sb2NhdGlvbicpLCBuYW1lKSkNCg0KZGVmIF9zZWFyY2godXJsLG5hbWUpOg0KICAgIyBwcmludCB1cmwsbmFtZQ0KICAgIHBsdWdpbnNlYXJjaHVybHMgPSBbJ3BsdWdpbjovL3BsdWdpbi52aWRlby5nZW5lc2lzLz9hY3Rpb249c2hvd3Nfc2VhcmNoJyxcDQogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby5nZW5lc2lzLz9hY3Rpb249bW92aWVzX3NlYXJjaCcsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uc2FsdHMvP21vZGU9c2VhcmNoJmFtcDtzZWN0aW9uPU1vdmllcycsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uc2FsdHMvP21vZGU9c2VhcmNoJmFtcDtzZWN0aW9uPVRWJyxcDQogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby5tdWNobW92aWVzLmhkLz9hY3Rpb249bW92aWVzX3NlYXJjaCcsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udmlvb3ouY28vP2FjdGlvbj1yb290X3NlYXJjaCcsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ub3Jvcm90di8/YWN0aW9uPXNob3dzX3NlYXJjaCcsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ueWlmeW1vdmllcy5oZC8/YWN0aW9uPW1vdmllc19zZWFyY2gnLFwNCiAgICAgICAgICAgICAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmNhcnRvb25oZHR3by8/ZGVzY3JpcHRpb24mYW1wO2ZhbmFydCZhbXA7aWNvbmltYWdlJmFtcDttb2RlPTMmYW1wO25hbWU9U2VhcmNoJmFtcDt1cmw9dXJsJyxcDQogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL2tvZGlvbi9zZWFyY2gvbGlzdC8nLFwNCiAgICAgICAgICAgICAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmRhaWx5bW90aW9uX2NvbS8/bW9kZT1zZWFyY2gmYW1wO3VybCcsXA0KICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udmltZW8va29kaW9uL3NlYXJjaC9saXN0LydcDQogICAgICAgICAgICAgXQ0KICAgIG5hbWVzID0gWydHZW5zaXMgVFYnLCdHZW5lc2lzIE1vdmllJywnU2FsdCBtb3ZpZScsJ3NhbHQgVFYnLCdNdWNobW92aWVzJywndmlvb3onLCdPUm9yb1RWJyxcDQogICAgICAgICAgICAgJ1lpZnltb3ZpZXMnLCdjYXJ0b29uSEQnLCdZb3V0dWJlJywnRGFpbHlNb3Rpb24nLCdWaW1lbyddDQogICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQ0KICAgIGluZGV4ID0gZGlhbG9nLnNlbGVjdCgnQ2hvb3NlIGEgdmlkZW8gc291cmNlJywgbmFtZXMpDQoNCiAgICBpZiBpbmRleCA+PSAwOg0KICAgICAgICB1cmwgPSBwbHVnaW5zZWFyY2h1cmxzW2luZGV4XQ0KIyAgICAgICAgcHJpbnQgJ3VybCcsdXJsDQogICAgICAgIHBsdWdpbnF1ZXJ5YnlKU09OKHVybCkNCg0KZGVmIGFkZERpcihuYW1lLHVybCxtb2RlLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24sZ2VucmUsZGF0ZSxjcmVkaXRzLHNob3djb250ZXh0PUZhbHNlLHJlZ2V4cz1Ob25lLHJlZ191cmw9Tm9uZSxhbGxpbmZvPXt9KToNCg0KDQoNCiAgICAgICAgaWYgcmVnZXhzIGFuZCBsZW4ocmVnZXhzKT4wOg0KICAgICAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSsiJnJlZ2V4cz0iK3JlZ2V4cw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KQ0KICAgICAgICANCiAgICAgICAgb2s9VHJ1ZQ0KICAgICAgICBpZiBkYXRlID09ICcnOg0KICAgICAgICAgICAgZGF0ZSA9IE5vbmUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uICs9ICdcblxuRGF0ZTogJXMnICVkYXRlDQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpDQogICAgICAgIGlmIGxlbihhbGxpbmZvKSA8MSA6DQogICAgICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lLCAiUGxvdCI6IGRlc2NyaXB0aW9uLCAiR2VucmUiOiBnZW5yZSwgImRhdGVhZGRlZCI6IGRhdGUsICJjcmVkaXRzIjogY3JlZGl0cyB9KQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPSBhbGxpbmZvKQ0KICAgICAgICBsaXouc2V0UHJvcGVydHkoIkZhbmFydF9JbWFnZSIsIGZhbmFydCkNCiAgICAgICAgaWYgc2hvd2NvbnRleHQ6DQogICAgICAgICAgICBjb250ZXh0TWVudSA9IFtdDQogICAgICAgICAgICBwYXJlbnRhbGJsb2NrID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWQnKQ0KICAgICAgICAgICAgcGFyZW50YWxibG9jaz0gcGFyZW50YWxibG9jaz09InRydWUiDQogICAgICAgICAgICBwYXJlbnRhbGJsb2NrZWRwaW4gPWFkZG9uLmdldFNldHRpbmcoJ3BhcmVudGFsYmxvY2tlZHBpbicpDQojICAgICAgICAgICAgcHJpbnQgJ3BhcmVudGFsYmxvY2tlZHBpbicscGFyZW50YWxibG9ja2VkcGluDQogICAgICAgICAgICBpZiBsZW4ocGFyZW50YWxibG9ja2VkcGluKT4wOg0KICAgICAgICAgICAgICAgIGlmIHBhcmVudGFsYmxvY2s6DQogICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0FjdGl2YXIgem9uYSBQcmVtaXVtJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT01NSZuYW1lPSVzKScgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdEZXNhY3RpdmFyIHpvbmEgUHJlbWl1bScsJ1hCTUMuUnVuUGx1Z2luKCVzP21vZGU9NTYmbmFtZT0lcyknICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgc2hvd2NvbnRleHQgPT0gJ3NvdXJjZSc6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiBuYW1lIGluIHN0cihTT1VSQ0VTKToNCiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnUmVtb3ZlIGZyb20gU291cmNlcycsJ1hCTUMuUnVuUGx1Z2luKCVzP21vZGU9OCZuYW1lPSVzKScgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxpZiBzaG93Y29udGV4dCA9PSAnZG93bmxvYWQnOg0KICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0Rvd25sb2FkJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9OSZuYW1lPSVzKScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpDQogICAgICAgICAgICBlbGlmIHNob3djb250ZXh0ID09ICdmYXYnOg0KICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0JvcnJhciBkZSBGYXZvcml0b3MgTXVuZG9EcmFnb25CYWxsJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT02Jm5hbWU9JXMpJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkNCiAgICAgICAgICAgIGlmIHNob3djb250ZXh0ID09ICchIXVwZGF0ZSc6DQogICAgICAgICAgICAgICAgZmF2X3BhcmFtczIgPSAoDQogICAgICAgICAgICAgICAgICAgICclcz91cmw9JXMmbW9kZT0xNyZyZWdleHM9JXMnDQogICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHJlZ191cmwpLCByZWdleHMpDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdbQ09MT1IgZ3JlZW5dU2UgbW9kaWZpY28gbW9kbyBwcmVtaXVtWy9DT0xPUl0nLCdYQk1DLlJ1blBsdWdpbiglcyknICVmYXZfcGFyYW1zMikpDQogICAgICAgICAgICBpZiBub3QgbmFtZSBpbiBGQVY6DQogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnQWdyZWdhciBhIEZhdm9yaXRvcyBkZSBNdW5kb0RyYWdvbkJhbGwnLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTUmbmFtZT0lcyZ1cmw9JXMmaWNvbmltYWdlPSVzJmZhbmFydD0lcyZmYXZfbW9kZT0lcyknDQogICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSksIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZSksIHVybGxpYi5xdW90ZV9wbHVzKGZhbmFydCksIG1vZGUpKSkNCiAgICAgICAgICAgIGxpei5hZGRDb250ZXh0TWVudUl0ZW1zKGNvbnRleHRNZW51KQ0KICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpDQogICAgICAgIHJldHVybiBvaw0KZGVmIHl0ZGxfZG93bmxvYWQodXJsLHRpdGxlLG1lZGlhX3R5cGU9J3ZpZGVvJyk6DQogICAgIyBwbGF5IGluIHhibWMgd2hpbGUgcGxheWluZyBnbyBiYWNrIHRvIGNvbnRleHRNZW51KGMpIHRvICIhIURvd25sb2FkISEiDQogICAgIyBUcmlhbCB5YXNjZWVuOiBzZXBlcmF0ZSB8VXNlci1BZ2VudD0NCiAgICBpbXBvcnQgeW91dHViZWRsDQogICAgDQogICAgaWYgbm90IHVybCA9PSAnJzoNCiAgICAgICAgaWYgbWVkaWFfdHlwZT09ICdhdWRpbyc6DQogICAgICAgICAgICB5b3V0dWJlZGwuc2luZ2xlX1lEKHVybCxkb3dubG9hZD1UcnVlLGF1ZGlvPVRydWUpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB5b3V0dWJlZGwuc2luZ2xlX1lEKHVybCxkb3dubG9hZD1UcnVlKQ0KICAgIGVsaWYgeGJtYy5QbGF5ZXIoKS5pc1BsYXlpbmcoKSA9PSBUcnVlIDoNCiAgICAgICAgaW1wb3J0IFlEU3RyZWFtRXh0cmFjdG9yDQogICAgICAgIGlmIFlEU3RyZWFtRXh0cmFjdG9yLmlzRG93bmxvYWRpbmcoKSA9PSBUcnVlOg0KDQogICAgICAgICAgICBZRFN0cmVhbUV4dHJhY3Rvci5tYW5hZ2VEb3dubG9hZHMoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgeGJtY191cmwgPSB4Ym1jLlBsYXllcigpLmdldFBsYXlpbmdGaWxlKCkNCg0KICAgICAgICAgICAgeGJtY191cmwgPSB4Ym1jX3VybC5zcGxpdCgnfFVzZXItQWdlbnQ9JylbMF0NCiAgICAgICAgICAgIGluZm8gPSB7J3VybCc6eGJtY191cmwsJ3RpdGxlJzp0aXRsZSwnbWVkaWFfdHlwZSc6bWVkaWFfdHlwZX0NCiAgICAgICAgICAgIHlvdXR1YmVkbC5zaW5nbGVfWUQoJycsZG93bmxvYWQ9VHJ1ZSxkbF9pbmZvPWluZm8pDQogICAgZWxzZToNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oRE9XTkxPQUQsRmlyc3QgUGxheSBbQ09MT1IgeWVsbG93XVdISUxFIHBsYXlpbmcgZG93bmxvYWRbL0NPTE9SXSAsMTAwMDApIikNCg0KIyMgTHVuYXRpeHogUHNldWRvVFYgZmVhdHVyZQ0KZGVmIGFzY2lpKHN0cmluZyk6DQogICAgaWYgaXNpbnN0YW5jZShzdHJpbmcsIGJhc2VzdHJpbmcpOg0KICAgICAgICBpZiBpc2luc3RhbmNlKHN0cmluZywgdW5pY29kZSk6DQogICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5lbmNvZGUoJ2FzY2lpJywgJ2lnbm9yZScpDQogICAgcmV0dXJuIHN0cmluZw0KZGVmIHVuaShzdHJpbmcsIGVuY29kaW5nID0gJ3V0Zi04Jyk6DQogICAgaWYgaXNpbnN0YW5jZShzdHJpbmcsIGJhc2VzdHJpbmcpOg0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShzdHJpbmcsIHVuaWNvZGUpOg0KICAgICAgICAgICAgc3RyaW5nID0gdW5pY29kZShzdHJpbmcsIGVuY29kaW5nLCAnaWdub3JlJykNCiAgICByZXR1cm4gc3RyaW5nDQpkZWYgcmVtb3ZlTm9uQXNjaWkocyk6IHJldHVybiAiIi5qb2luKGZpbHRlcihsYW1iZGEgeDogb3JkKHgpPDEyOCwgcykpDQoNCmRlZiBzZW5kSlNPTiggY29tbWFuZCk6DQogICAgZGF0YSA9ICcnDQogICAgdHJ5Og0KICAgICAgICBkYXRhID0geGJtYy5leGVjdXRlSlNPTlJQQyh1bmkoY29tbWFuZCkpDQogICAgZXhjZXB0IFVuaWNvZGVFbmNvZGVFcnJvcjoNCiAgICAgICAgZGF0YSA9IHhibWMuZXhlY3V0ZUpTT05SUEMoYXNjaWkoY29tbWFuZCkpDQoNCiAgICByZXR1cm4gdW5pKGRhdGEpDQoNCmRlZiBwbHVnaW5xdWVyeWJ5SlNPTih1cmwsZ2l2ZV9tZV9yZXN1bHQ9Tm9uZSxwbGF5bGlzdD1GYWxzZSk6DQogICAgaWYgJ2F1ZGlvJyBpbiB1cmw6DQogICAgICAgIGpzb25fcXVlcnkgPSB1bmkoJ3sianNvbnJwYyI6IjIuMCIsIm1ldGhvZCI6IkZpbGVzLkdldERpcmVjdG9yeSIsInBhcmFtcyI6IHsiZGlyZWN0b3J5IjoiJXMiLCJtZWRpYSI6InZpZGVvIiwgInByb3BlcnRpZXMiOiBbInRpdGxlIiwgImFsYnVtIiwgImFydGlzdCIsICJkdXJhdGlvbiIsInRodW1ibmFpbCIsICJ5ZWFyIl19LCAiaWQiOiAxfScpICV1cmwNCiAgICBlbHNlOg0KICAgICAgICBqc29uX3F1ZXJ5ID0gdW5pKCd7Impzb25ycGMiOiIyLjAiLCJtZXRob2QiOiJGaWxlcy5HZXREaXJlY3RvcnkiLCJwYXJhbXMiOnsiZGlyZWN0b3J5IjoiJXMiLCJtZWRpYSI6InZpZGVvIiwicHJvcGVydGllcyI6WyAicGxvdCIsInBsYXljb3VudCIsImRpcmVjdG9yIiwgImdlbnJlIiwidm90ZXMiLCJkdXJhdGlvbiIsInRyYWlsZXIiLCJwcmVtaWVyZWQiLCJ0aHVtYm5haWwiLCJ0aXRsZSIsInllYXIiLCJkYXRlYWRkZWQiLCJmYW5hcnQiLCJyYXRpbmciLCJzZWFzb24iLCJlcGlzb2RlIiwic3R1ZGlvIiwibXBhYSJdfSwiaWQiOjF9JykgJXVybA0KICAgIGpzb25fZm9sZGVyX2RldGFpbCA9IGpzb24ubG9hZHMoc2VuZEpTT04oanNvbl9xdWVyeSkpDQogICAgI3ByaW50IGpzb25fZm9sZGVyX2RldGFpbA0KICAgIGlmIGdpdmVfbWVfcmVzdWx0Og0KICAgICAgICByZXR1cm4ganNvbl9mb2xkZXJfZGV0YWlsDQogICAgaWYganNvbl9mb2xkZXJfZGV0YWlsLmhhc19rZXkoJ2Vycm9yJyk6DQogICAgICAgIHJldHVybg0KICAgIGVsc2U6DQoNCiAgICAgICAgZm9yIGkgaW4ganNvbl9mb2xkZXJfZGV0YWlsWydyZXN1bHQnXVsnZmlsZXMnXSA6DQogICAgICAgICAgICBtZXRhID17fQ0KICAgICAgICAgICAgdXJsID0gaVsnZmlsZSddDQogICAgICAgICAgICBuYW1lID0gcmVtb3ZlTm9uQXNjaWkoaVsnbGFiZWwnXSkNCiAgICAgICAgICAgIHRodW1ibmFpbCA9IHJlbW92ZU5vbkFzY2lpKGlbJ3RodW1ibmFpbCddKQ0KICAgICAgICAgICAgZmFuYXJ0ID0gcmVtb3ZlTm9uQXNjaWkoaVsnZmFuYXJ0J10pDQogICAgICAgICAgICBtZXRhID0gZGljdCgoayx2KSBmb3IgaywgdiBpbiBpLml0ZXJpdGVtcygpIGlmIG5vdCB2ID09ICcwJyBvciBub3QgdiA9PSAtMSBvciB2ID09ICcnKQ0KICAgICAgICAgICAgbWV0YS5wb3AoImZpbGUiLCBOb25lKQ0KICAgICAgICAgICAgaWYgaVsnZmlsZXR5cGUnXSA9PSAnZmlsZSc6DQogICAgICAgICAgICAgICAgaWYgcGxheWxpc3Q6DQogICAgICAgICAgICAgICAgICAgIHBsYXlfcGxheWxpc3QobmFtZSx1cmwscXVldWVWaWRlbz0nMScpDQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgYWRkTGluayh1cmwsbmFtZSx0aHVtYm5haWwsZmFuYXJ0LCcnLCcnLCcnLCcnLE5vbmUsJycsdG90YWw9bGVuKGpzb25fZm9sZGVyX2RldGFpbFsncmVzdWx0J11bJ2ZpbGVzJ10pLGFsbGluZm89bWV0YSkNCiAgICAgICAgICAgICAgICAgICAgI3hibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MDApIikNCiAgICAgICAgICAgICAgICAgICAgaWYgaVsndHlwZSddIGFuZCBpWyd0eXBlJ10gPT0gJ3R2c2hvdycgOg0KICAgICAgICAgICAgICAgICAgICAgICAgeGJtY3BsdWdpbi5zZXRDb250ZW50KGludChzeXMuYXJndlsxXSksICd0dnNob3dzJykNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpWydlcGlzb2RlJ10gPiAwIDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCAnZXBpc29kZXMnKQ0KDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCw1Myx0aHVtYm5haWwsZmFuYXJ0LCcnLCcnLCcnLCcnLGFsbGluZm89bWV0YSkNCiAgICAgICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ0KDQpkZWYgYWRkTGluayh1cmwsbmFtZSxpY29uaW1hZ2UsZmFuYXJ0LGRlc2NyaXB0aW9uLGdlbnJlLGRhdGUsc2hvd2NvbnRleHQscGxheWxpc3QscmVnZXhzLHRvdGFsLHNldENvb2tpZT0iIixhbGxpbmZvPXt9KToNCiAgICAgICAgI3ByaW50ICd1cmwsbmFtZScsdXJsLG5hbWUsaWNvbmltYWdlDQogICAgICAgIGNvbnRleHRNZW51ID1bXQ0KICAgICAgICBwYXJlbnRhbGJsb2NrID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWQnKQ0KICAgICAgICBwYXJlbnRhbGJsb2NrPSBwYXJlbnRhbGJsb2NrPT0idHJ1ZSINCiAgICAgICAgcGFyZW50YWxibG9ja2VkcGluID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWRwaW4nKQ0KIyAgICAgICAgcHJpbnQgJ3BhcmVudGFsYmxvY2tlZHBpbicscGFyZW50YWxibG9ja2VkcGluDQogICAgICAgIGlmIGxlbihwYXJlbnRhbGJsb2NrZWRwaW4pPjA6DQogICAgICAgICAgICBpZiBwYXJlbnRhbGJsb2NrOg0KICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0FjdGl2YXIgbW9kbyBwcmVtaXVtJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT01NSZuYW1lPSVzKScgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnRGVzYWN0aXZhciBtb2RvIHByZW1pdW0nLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTU2Jm5hbWU9JXMpJyAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbmFtZSA9IG5hbWUuZW5jb2RlKCd1dGYtOCcpDQogICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICBvayA9IFRydWUNCiAgICAgICAgaXNGb2xkZXI9RmFsc2UNCiAgICAgICAgaWYgcmVnZXhzOg0KICAgICAgICAgICAgbW9kZSA9ICcxNycNCiAgICAgICAgICAgIGlmICdsaXN0cmVwZWF0JyBpbiByZWdleHM6DQogICAgICAgICAgICAgICAgaXNGb2xkZXI9VHJ1ZQ0KIyAgICAgICAgICAgICAgICBwcmludCAnc2V0dGluZyBhcyBmb2xkZXIgaW4gbGluaycNCiAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ1tDT0xPUiB3aGl0ZV0hIURvd25sb2FkIEN1cnJlbnRseSBQbGF5aW5nISFbL0NPTE9SXScsJ1hCTUMuUnVuUGx1Z2luKCVzP3VybD0lcyZtb2RlPTIxJm5hbWU9JXMpJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXModXJsKSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkNCiAgICAgICAgZWxpZiAgKGFueSh4IGluIHVybCBmb3IgeCBpbiByZXNvbHZlX3VybCkgYW5kICB1cmwuc3RhcnRzd2l0aCgnaHR0cCcpKSBvciB1cmwuZW5kc3dpdGgoJyZtb2RlPTE5Jyk6DQogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyZtb2RlPTE5JywnJykNCiAgICAgICAgICAgIG1vZGUgPSAnMTknDQogICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdbQ09MT1Igd2hpdGVdISFEb3dubG9hZCBDdXJyZW50bHkgUGxheWluZyEhWy9DT0xPUl0nLCdYQk1DLlJ1blBsdWdpbiglcz91cmw9JXMmbW9kZT0yMSZuYW1lPSVzKScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpDQogICAgICAgIGVsaWYgdXJsLmVuZHN3aXRoKCcmbW9kZT0xOCcpOg0KICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCcmbW9kZT0xOCcsJycpDQogICAgICAgICAgICBtb2RlID0gJzE4Jw0KICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnW0NPTE9SIHdoaXRlXSEhRG93bmxvYWQhIVsvQ09MT1JdJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9MjMmbmFtZT0lcyknDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQ0KICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnZGxhdWRpb29ubHknKSA9PSAndHJ1ZSc6DQogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnISFEb3dubG9hZCBbQ09MT1Igc2VhYmx1ZV1BdWRpbyEhWy9DT0xPUl0nLCdYQk1DLlJ1blBsdWdpbiglcz91cmw9JXMmbW9kZT0yNCZuYW1lPSVzKScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQ0KICAgICAgICBlbGlmIHVybC5zdGFydHN3aXRoKCdtYWduZXQ6P3h0PScpOg0KICAgICAgICAgICAgaWYgJyYnIGluIHVybCBhbmQgbm90ICcmYW1wOycgaW4gdXJsIDoNCiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnJicsJyZhbXA7JykNCiAgICAgICAgICAgIHVybCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ucHVsc2FyL3BsYXk/dXJpPScgKyB1cmwNCiAgICAgICAgICAgIG1vZGUgPSAnMTInDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBtb2RlID0gJzEyJw0KICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnW0NPTE9SIHdoaXRlXSEhRG93bmxvYWQgQ3VycmVudGx5IFBsYXlpbmchIVsvQ09MT1JdJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9MjEmbmFtZT0lcyknDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQ0KICAgICAgICBpZiAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheS8/dmlkZW9faWQ9JyBpbiB1cmw6DQogICAgICAgICAgICAgIHl0X2F1ZGlvX3VybCA9IHVybC5yZXBsYWNlKCdwbHVnaW46Ly9wbHVnaW4udmlkZW8ueW91dHViZS9wbGF5Lz92aWRlb19pZD0nLCdodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PScpDQogICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJyEhRG93bmxvYWQgW0NPTE9SIGJsdWVdQXVkaW8hIVsvQ09MT1JdJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9MjQmbmFtZT0lcyknDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHl0X2F1ZGlvX3VybCksIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpDQogICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj8iDQogICAgICAgIHBsYXlfbGlzdCA9IEZhbHNlDQogICAgICAgIGlmIHBsYXlsaXN0Og0KICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnYWRkX3BsYXlsaXN0JykgPT0gImZhbHNlIiBhbmQgJyQkTFNQbGF5T25seU9uZSQkJyBub3QgaW4gcGxheWxpc3RbMF0gOg0KICAgICAgICAgICAgICAgIHUgKz0gInVybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrbW9kZQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICB1ICs9ICJtb2RlPTEzJm5hbWU9JXMmcGxheWxpc3Q9JXMiICUodXJsbGliLnF1b3RlX3BsdXMobmFtZSksIHVybGxpYi5xdW90ZV9wbHVzKHN0cihwbGF5bGlzdCkucmVwbGFjZSgnLCcsJ3x8JykpKQ0KICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lICsgJ1tDT0xPUiBtYWdlbnRhXSAoJyArIHN0cihsZW4ocGxheWxpc3QpKSArICcgaXRlbXMgKVsvQ09MT1JdJw0KICAgICAgICAgICAgICAgIHBsYXlfbGlzdCA9IFRydWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHUgKz0gInVybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrbW9kZQ0KICAgICAgICBpZiByZWdleHM6DQogICAgICAgICAgICB1ICs9ICImcmVnZXhzPSIrcmVnZXhzDQogICAgICAgIGlmIG5vdCBzZXRDb29raWUgPT0gJyc6DQogICAgICAgICAgICB1ICs9ICImc2V0Q29va2llPSIrdXJsbGliLnF1b3RlX3BsdXMoc2V0Q29va2llKQ0KICAgICAgICBpZiBpY29uaW1hZ2UgYW5kICBub3QgaWNvbmltYWdlID09ICcnOg0KICAgICAgICAgICAgdSArPSAiJmljb25pbWFnZT0iK3VybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZSkNCiAgICAgICAgICAgIA0KICAgICAgICBpZiBkYXRlID09ICcnOg0KICAgICAgICAgICAgZGF0ZSA9IE5vbmUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uICs9ICdcblxuRGF0ZTogJXMnICVkYXRlDQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdFZpZGVvLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkNCiAgICAgICAgI2lmIGlzRm9sZGVyOg0KICAgICAgICBpZiBhbGxpbmZvPT1Ob25lIG9yIGxlbihhbGxpbmZvKSA8MToNCiAgICAgICAgICAgIGxpei5zZXRJbmZvKHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUsICJQbG90IjogZGVzY3JpcHRpb24sICJHZW5yZSI6IGdlbnJlLCAiZGF0ZWFkZGVkIjogZGF0ZSB9KQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPWFsbGluZm8pDQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiRmFuYXJ0X0ltYWdlIiwgZmFuYXJ0KQ0KICAgICAgICANCiAgICAgICAgaWYgKG5vdCBwbGF5X2xpc3QpIGFuZCBub3QgYW55KHggaW4gdXJsIGZvciB4IGluIGdfaWdub3JlU2V0UmVzb2x2ZWQpIGFuZCBub3QgJyRQTEFZRVJQUk9YWSQ9JyBpbiB1cmw6IyAgKG5vdCB1cmwuc3RhcnRzd2l0aCgncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3RlcicpKToNCiAgICAgICAgICAgIGlmIHJlZ2V4czoNCiAgICAgICAgICAgICAgICAjcHJpbnQgdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpDQogICAgICAgICAgICAgICAgaWYgJyRweUZ1bmN0aW9uOnBsYXltZWRpYSgnIG5vdCBpbiB1cmxsaWIudW5xdW90ZV9wbHVzKHJlZ2V4cykgYW5kICdub3RwbGF5YWJsZScgbm90IGluIHVybGxpYi51bnF1b3RlX3BsdXMocmVnZXhzKSBhbmQgJ2xpc3RyZXBlYXQnIG5vdCBpbiAgdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpIDoNCiAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdzZXR0aW5nIGlzcGxheWFibGUnLHVybCwgdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpLHVybA0KICAgICAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ0lzUGxheWFibGUnLCAndHJ1ZScpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgnSXNQbGF5YWJsZScsICd0cnVlJykNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGFkZG9uX2xvZyggJ05PVCBzZXR0aW5nIGlzcGxheWFibGUnK3VybCkNCiAgICAgICAgaWYgc2hvd2NvbnRleHQ6DQogICAgICAgICAgICAjY29udGV4dE1lbnUgPSBbXQ0KICAgICAgICAgICAgaWYgc2hvd2NvbnRleHQgPT0gJ2Zhdic6DQogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAoJ0JvcnJhZG8gZGUgRmF2b3J0aXRvcyBkZSBNdW5kb0RyYWdvbkJhbGwnLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTYmbmFtZT0lcyknDQogICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpDQogICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICBlbGlmIG5vdCBuYW1lIGluIEZBVjoNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGZhdl9wYXJhbXMgPSAoDQogICAgICAgICAgICAgICAgICAgICAgICAnJXM/bW9kZT01Jm5hbWU9JXMmdXJsPSVzJmljb25pbWFnZT0lcyZmYW5hcnQ9JXMmZmF2X21vZGU9MCcNCiAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpLCB1cmxsaWIucXVvdGVfcGx1cyhmYW5hcnQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgZmF2X3BhcmFtcyA9ICgNCiAgICAgICAgICAgICAgICAgICAgICAgICclcz9tb2RlPTUmbmFtZT0lcyZ1cmw9JXMmaWNvbmltYWdlPSVzJmZhbmFydD0lcyZmYXZfbW9kZT0wJw0KICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSksIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZS5lbmNvZGUoInV0Zi04IikpLCB1cmxsaWIucXVvdGVfcGx1cyhmYW5hcnQuZW5jb2RlKCJ1dGYtOCIpKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICBpZiBwbGF5bGlzdDoNCiAgICAgICAgICAgICAgICAgICAgZmF2X3BhcmFtcyArPSAncGxheWxpc3Q9Jyt1cmxsaWIucXVvdGVfcGx1cyhzdHIocGxheWxpc3QpLnJlcGxhY2UoJywnLCd8fCcpKQ0KICAgICAgICAgICAgICAgIGlmIHJlZ2V4czoNCiAgICAgICAgICAgICAgICAgICAgZmF2X3BhcmFtcyArPSAiJnJlZ2V4cz0iK3JlZ2V4cw0KICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0FncmVnYXIgYSBmYXZvcml0b3MgZGUgTXVuZG9EcmFnb25CYWxsJywnWEJNQy5SdW5QbHVnaW4oJXMpJyAlZmF2X3BhcmFtcykpDQogICAgICAgICAgICBsaXouYWRkQ29udGV4dE1lbnVJdGVtcyhjb250ZXh0TWVudSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgbm90IHBsYXlsaXN0IGlzIE5vbmU6DQogICAgICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnYWRkX3BsYXlsaXN0JykgPT0gImZhbHNlIjoNCiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3RfbmFtZSA9IG5hbWUuc3BsaXQoJykgJylbMV0NCiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnVfID0gWw0KICAgICAgICAgICAgICAgICAgICAgICAgKCdQbGF5ICcrcGxheWxpc3RfbmFtZSsnIFBsYXlMaXN0JywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT0xMyZuYW1lPSVzJnBsYXlsaXN0PSVzKScNCiAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhwbGF5bGlzdF9uYW1lKSwgdXJsbGliLnF1b3RlX3BsdXMoc3RyKHBsYXlsaXN0KS5yZXBsYWNlKCcsJywnfHwnKSkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICAgICAgbGl6LmFkZENvbnRleHRNZW51SXRlbXMoY29udGV4dE1lbnVfKQ0KICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgI3ByaW50ICdhZGRpbmcnLG5hbWUNCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeix0b3RhbEl0ZW1zPXRvdGFsLGlzRm9sZGVyPWlzRm9sZGVyKQ0KDQogICAgICAgICNwcmludCAnYWRkZWQnLG5hbWUNCiAgICAgICAgcmV0dXJuIG9rDQoNCiAgICAgICAgDQpkZWYgcGxheXNldHJlc29sdmVkKHVybCxuYW1lLGljb25pbWFnZSxzZXRyZXNvbHZlZD1UcnVlLHJlZz1Ob25lKToNCiAgICBwcmludCAncGxheXNldHJlc29sdmVkJyx1cmwsc2V0cmVzb2x2ZWQNCiAgICBpZiB1cmw9PU5vbmU6IA0KICAgICAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQogICAgICAgIHJldHVybg0KICAgIGlmIHNldHJlc29sdmVkOg0KICAgICAgICBzZXRyZXM9VHJ1ZQ0KICAgICAgICBpZiAnJCRMU0RpcmVjdCQkJyBpbiB1cmw6DQogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyQkTFNEaXJlY3QkJCcsJycpDQogICAgICAgICAgICBzZXRyZXM9RmFsc2UNCiAgICAgICAgaWYgcmVnIGFuZCAnbm90cGxheWFibGUnIGluIHJlZzoNCiAgICAgICAgICAgIHNldHJlcz1GYWxzZQ0KDQogICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPWljb25pbWFnZSwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQ0KICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSdWaWRlbycsIGluZm9MYWJlbHM9eydUaXRsZSc6bmFtZX0pDQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQ0KICAgICAgICBsaXouc2V0UGF0aCh1cmwpDQogICAgICAgIGlmIG5vdCBzZXRyZXM6DQogICAgICAgICAgICB4Ym1jLlBsYXllcigpLnBsYXkodXJsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgeGJtY3BsdWdpbi5zZXRSZXNvbHZlZFVybChpbnQoc3lzLmFyZ3ZbMV0pLCBUcnVlLCBsaXopDQogICAgICAgICAgIA0KICAgIGVsc2U6DQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ1hCTUMuUnVuUGx1Z2luKCcrdXJsKycpJykNCg0KDQojIyBUaGFua3MgdG8gZGFzY2hhY2thLCBhbiBlcGcgc2NyYXBlciBmb3IgaHR0cDovL2kudGVsZWJveS5jaC9wcm9ncmFtbS9zdGF0aW9uX3NlbGVjdC5waHANCiMjICBodHRwOi8vZm9ydW0ueGJtYy5vcmcvcG9zdC5waHA/cD05MzYyMjgmcG9zdGNvdW50PTEwNzYNCmRlZiBnZXRlcGcobGluayk6DQogICAgICAgIHVybD11cmxsaWIudXJsb3BlbihsaW5rKQ0KICAgICAgICBzb3VyY2U9dXJsLnJlYWQoKQ0KICAgICAgICB1cmwuY2xvc2UoKQ0KICAgICAgICBzb3VyY2UyID0gc291cmNlLnNwbGl0KCJKZXR6dCIpDQogICAgICAgIHNvdXJjZTMgPSBzb3VyY2UyWzFdLnNwbGl0KCdwcm9ncmFtbS9kZXRhaWwucGhwP2NvbnN0X2lkPScpDQogICAgICAgIHNvdXJjZXVocnplaXQgPSBzb3VyY2UzWzFdLnNwbGl0KCc8YnIgLz48YSBocmVmPSIvJykNCiAgICAgICAgbm93dGltZSA9IHNvdXJjZXVocnplaXRbMF1bNDA6bGVuKHNvdXJjZXVocnplaXRbMF0pXQ0KICAgICAgICBzb3VyY2V0aXRsZSA9IHNvdXJjZTNbMl0uc3BsaXQoIjwvYT48L3A+PC9kaXY+IikNCiAgICAgICAgbm93dGl0bGUgPSBzb3VyY2V0aXRsZVswXVsxNzpsZW4oc291cmNldGl0bGVbMF0pXQ0KICAgICAgICBub3d0aXRsZSA9IG5vd3RpdGxlLmVuY29kZSgndXRmLTgnKQ0KICAgICAgICByZXR1cm4gIiAgLSAiK25vd3RpdGxlKyIgLSAiK25vd3RpbWUNCg0KDQpkZWYgZ2V0X2VwZyh1cmwsIHJlZ2V4KToNCiAgICAgICAgZGF0YSA9IG1ha2VSZXF1ZXN0KHVybCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaXRlbSA9IHJlLmZpbmRhbGwocmVnZXgsIGRhdGEpWzBdDQogICAgICAgICAgICByZXR1cm4gaXRlbQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBhZGRvbl9sb2coJ3JlZ2V4IGZhaWxlZCcpDQogICAgICAgICAgICBhZGRvbl9sb2cocmVnZXgpDQogICAgICAgICAgICByZXR1cm4NCg0KICAgIA0KIyNub3QgYSBnZW5lcmljIGltcGxlbWVuYXRpb24gYXMgaXQgbmVlZHMgdG8gY29udmVydCAgICAgICAgICAgIA0KZGVmIGQyeChkLCByb290PSJyb290IixuZXN0ZWQ9MCk6DQoNCiAgICBvcCA9IGxhbWJkYSB0YWc6ICc8JyArIHRhZyArICc+Jw0KICAgIGNsID0gbGFtYmRhIHRhZzogJzwvJyArIHRhZyArICc+XG4nDQoNCiAgICBtbCA9IGxhbWJkYSB2LHhtbDogeG1sICsgb3Aoa2V5KSArIHN0cih2KSArIGNsKGtleSkNCiAgICB4bWwgPSBvcChyb290KSArICdcbicgaWYgcm9vdCBlbHNlICIiDQoNCiAgICBmb3Iga2V5LHZsIGluIGQuaXRlcml0ZW1zKCk6DQogICAgICAgIHZ0eXBlID0gdHlwZSh2bCkNCiAgICAgICAgaWYgbmVzdGVkPT0wOiBrZXk9J3JlZ2V4JyAjZW5mb3JjaW5nIGFsbCB0b3AgbGV2ZWwgdGFncyB0byBiZSBuYW1lZCBhcyByZWdleA0KICAgICAgICBpZiB2dHlwZSBpcyBsaXN0OiANCiAgICAgICAgICAgIGZvciB2IGluIHZsOg0KICAgICAgICAgICAgICAgIHY9ZXNjYXBlKHYpDQogICAgICAgICAgICAgICAgeG1sID0gbWwodix4bWwpICAgICAgICAgDQogICAgICAgIA0KICAgICAgICBpZiB2dHlwZSBpcyBkaWN0OiANCiAgICAgICAgICAgIHhtbCA9IG1sKCdcbicgKyBkMngodmwsTm9uZSxuZXN0ZWQrMSkseG1sKSAgICAgICAgIA0KICAgICAgICBpZiB2dHlwZSBpcyBub3QgbGlzdCBhbmQgdnR5cGUgaXMgbm90IGRpY3Q6IA0KICAgICAgICAgICAgaWYgbm90IHZsIGlzIE5vbmU6IHZsPWVzY2FwZSh2bCkNCiAgICAgICAgICAgICNwcmludCByZXByKHZsKQ0KICAgICAgICAgICAgaWYgdmwgaXMgTm9uZToNCiAgICAgICAgICAgICAgICB4bWwgPSBtbCh2bCx4bWwpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICN4bWwgPSBtbChlc2NhcGUodmwuZW5jb2RlKCJ1dGYtOCIpKSx4bWwpDQogICAgICAgICAgICAgICAgeG1sID0gbWwodmwuZW5jb2RlKCJ1dGYtOCIpLHhtbCkNCg0KICAgIHhtbCArPSBjbChyb290KSBpZiByb290IGVsc2UgIiINCg0KICAgIHJldHVybiB4bWwNCnhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCAnbW92aWVzJykNCg0KdHJ5Og0KICAgIHhibWNwbHVnaW4uYWRkU29ydE1ldGhvZChpbnQoc3lzLmFyZ3ZbMV0pLCB4Ym1jcGx1Z2luLlNPUlRfTUVUSE9EX1VOU09SVEVEKQ0KZXhjZXB0Og0KICAgIHBhc3MNCnRyeToNCiAgICB4Ym1jcGx1Z2luLmFkZFNvcnRNZXRob2QoaW50KHN5cy5hcmd2WzFdKSwgeGJtY3BsdWdpbi5TT1JUX01FVEhPRF9MQUJFTCkNCmV4Y2VwdDoNCiAgICBwYXNzDQp0cnk6DQogICAgeGJtY3BsdWdpbi5hZGRTb3J0TWV0aG9kKGludChzeXMuYXJndlsxXSksIHhibWNwbHVnaW4uU09SVF9NRVRIT0RfREFURSkNCmV4Y2VwdDoNCiAgICBwYXNzDQp0cnk6DQogICAgeGJtY3BsdWdpbi5hZGRTb3J0TWV0aG9kKGludChzeXMuYXJndlsxXSksIHhibWNwbHVnaW4uU09SVF9NRVRIT0RfR0VOUkUpDQpleGNlcHQ6DQogICAgcGFzcw0KDQpwYXJhbXM9Z2V0X3BhcmFtcygpDQoNCnVybD1Ob25lDQpuYW1lPU5vbmUNCm1vZGU9Tm9uZQ0KcGxheWxpc3Q9Tm9uZQ0KaWNvbmltYWdlPU5vbmUNCmZhbmFydD1GQU5BUlQNCnBsYXlsaXN0PU5vbmUNCmZhdl9tb2RlPU5vbmUNCnJlZ2V4cz1Ob25lDQoNCnRyeToNCiAgICB1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKS5kZWNvZGUoJ3V0Zi04JykNCmV4Y2VwdDoNCiAgICBwYXNzDQp0cnk6DQogICAgbmFtZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sibmFtZSJdKQ0KZXhjZXB0Og0KICAgIHBhc3MNCnRyeToNCiAgICBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQ0KZXhjZXB0Og0KICAgIHBhc3MNCnRyeToNCiAgICBmYW5hcnQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImZhbmFydCJdKQ0KZXhjZXB0Og0KICAgIHBhc3MNCnRyeToNCiAgICBtb2RlPWludChwYXJhbXNbIm1vZGUiXSkNCmV4Y2VwdDoNCiAgICBwYXNzDQp0cnk6DQogICAgcGxheWxpc3Q9ZXZhbCh1cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sicGxheWxpc3QiXSkucmVwbGFjZSgnfHwnLCcsJykpDQpleGNlcHQ6DQogICAgcGFzcw0KdHJ5Og0KICAgIGZhdl9tb2RlPWludChwYXJhbXNbImZhdl9tb2RlIl0pDQpleGNlcHQ6DQogICAgcGFzcw0KdHJ5Og0KICAgIHJlZ2V4cz1wYXJhbXNbInJlZ2V4cyJdDQpleGNlcHQ6DQogICAgcGFzcw0KcGxheWl0ZW09JycNCnRyeToNCiAgICBwbGF5aXRlbT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sicGxheWl0ZW0iXSkNCmV4Y2VwdDoNCiAgICBwYXNzDQogICAgDQphZGRvbl9sb2coIk1vZGU6ICIrc3RyKG1vZGUpKQ0KDQoNCmlmIG5vdCB1cmwgaXMgTm9uZToNCiAgICBhZGRvbl9sb2coIlVSTDogIitzdHIodXJsLmVuY29kZSgndXRmLTgnKSkpDQphZGRvbl9sb2coIk5hbWU6ICIrc3RyKG5hbWUpKQ0KDQppZiBub3QgcGxheWl0ZW0gPT0nJzoNCiAgICBzPWdldFNvdXAoJycsZGF0YT1wbGF5aXRlbSkNCiAgICBuYW1lLHVybCxyZWdleHM9Z2V0SXRlbXMocyxOb25lLGRvbnRMaW5rPVRydWUpDQogICAgbW9kZT0xMTcgDQppZiBtb2RlPT1Ob25lOg0KDQogICAgaW1wb3J0IHhibWMNCiAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihNdW5kb0RyYWdvbkJhbGwsVWx0aW1hIFZlcnNpb246IDAuMC4xLCA3MDAwLCIraWNvbisiKSIpDQoNCg0KICAgIGFkZG9uX2xvZygiZ2V0U291cmNlcyIpDQogICAgZ2V0U291cmNlcygpDQogICAgI2ZpbGUgPSAnaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9hcGVydHVyYV8yMDE3MTAvYXBlcnR1cmEubXAzJw0KICAgICN4Ym1jLlBsYXllcigpLnBsYXkoZmlsZSkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoJDQogICAgX19hZGRvbl9fID0geGJtY2FkZG9uLkFkZG9uKCkNCiAgICBfX2FkZG9ubmFtZV9fID0gX19hZGRvbl9fLmdldEFkZG9uSW5mbygnbmFtZScpDQoNCiANCiAgICBsaW5lMSA9ICJFc3RlIGFkZG9uIGVzIGdyYXR1aXRvLiBNdW5kbyBEcmFnb24gQmFsbCBubyBjb250aWVuZSBuaW5nw7puIGFyY2hpdm8gY29uIGNvcHlyaWdodCBlbiBzdSBzZXJ2aWRvci4iDQogICAgbGluZTIgPSAiTG9zIGVubGFjZXMgYWwgY29udGVuaWRvIHNvbiByZWNvbGVjdGFkb3MgZGUgaW50ZXJuZXQsIE11bmRvIERyYWdvbiBCYWxsIG5vIHNlIGhhY2VuIHJlc3BvbnNhYmxlcyBkZSBkaWNobyBjb250ZW5pZG8uICINCiAgICBsaW5lMyA9ICJOaSBkZWwgdXNvIG5vIHJlc3BvbnNhYmxlIGRlbCBtaXNtby4gRWwgY29weXJpZ2h0IGRlIGxhcyBpbcOhZ2VuZXMgcGVydGVuZWNlIGEgc3VzIHJlc3BlY3Rpdm9zIGF1dG9yZXMgeS9vIHByb2R1Y3RvcmFzL2Rpc3RyaWJ1aWRvcmFzLiINCiAgICB4Ym1jZ3VpLkRpYWxvZygpLm9rKF9fYWRkb25uYW1lX18sIGxpbmUxLCBsaW5lMiwgbGluZTMpDQoJDQoNCgkNCmVsaWYgbW9kZT09MToNCiAgICBhZGRvbl9sb2coImdldERhdGEiKQ0KCQ0KDQogICAgDQogICAgZGF0YT1Ob25lDQogICAgDQogICAgaWYgcmVnZXhzIGFuZCBsZW4ocmVnZXhzKT4wOg0KICAgICAgICBkYXRhLHNldHJlc29sdmVkPWdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgdXJsKQ0KICAgICAgICAjcHJpbnQgZGF0YQ0KICAgICAgICAjdXJsPScnDQogICAgICAgIGlmIGRhdGEuc3RhcnRzd2l0aCgnaHR0cCcpIG9yIGRhdGEuc3RhcnRzd2l0aCgnc21iJykgb3IgZGF0YS5zdGFydHN3aXRoKCduZnMnKSBvciBkYXRhLnN0YXJ0c3dpdGgoJy8nKToNCiAgICAgICAgICAgIHVybD1kYXRhDQogICAgICAgICAgICBkYXRhPU5vbmUNCiAgICAgICAgI2NyZWF0ZSB4bWwgaGVyZQ0KICAgIA0KICAgIGdldERhdGEodXJsLGZhbmFydCxkYXRhKQ0KICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkNCg0KDQoNCmVsaWYgbW9kZT09MjoNCiAgICBhZGRvbl9sb2coImdldENoYW5uZWxJdGVtcyIpDQogICAgZ2V0Q2hhbm5lbEl0ZW1zKG5hbWUsdXJsLGZhbmFydCkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09MzoNCiAgICBhZGRvbl9sb2coImdldFN1YkNoYW5uZWxJdGVtcyIpDQogICAgZ2V0U3ViQ2hhbm5lbEl0ZW1zKG5hbWUsdXJsLGZhbmFydCkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09NDoNCiAgICBhZGRvbl9sb2coImdldEZhdm9yaXRlcyIpDQogICAgZ2V0RmF2b3JpdGVzKCkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09NToNCiAgICBhZGRvbl9sb2coImFkZEZhdm9yaXRlIikNCiAgICB0cnk6DQogICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCdcXCAnKVsxXQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KICAgIHRyeToNCiAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJyAgLSAnKVswXQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KICAgIGFkZEZhdm9yaXRlKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQsZmF2X21vZGUpDQoNCmVsaWYgbW9kZT09NjoNCiAgICBhZGRvbl9sb2coInJtRmF2b3JpdGUiKQ0KICAgIHRyeToNCiAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJ1xcICcpWzFdDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogICAgdHJ5Og0KICAgICAgICBuYW1lID0gbmFtZS5zcGxpdCgnICAtICcpWzBdDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogICAgcm1GYXZvcml0ZShuYW1lKQ0KDQplbGlmIG1vZGU9PTc6DQogICAgU3BvcnRzRGV2aWwoKQ0KICAgIER1dGNoKCkNCgkNCmVsaWYgbW9kZT09ODoNCiAgICBhZGRvbl9sb2coInJtU291cmNlIikNCiAgICBybVNvdXJjZShuYW1lKQ0KDQplbGlmIG1vZGU9PTk6DQogICAgYWRkb25fbG9nKCJkb3dubG9hZF9maWxlIikNCiAgICBkb3dubG9hZF9maWxlKG5hbWUsIHVybCkNCg0KZWxpZiBtb2RlPT0xMDoNCiAgICBhZGRvbl9sb2coImdldENvbW11bml0eVNvdXJjZXMiKQ0KICAgIGdldENvbW11bml0eVNvdXJjZXMoKQ0KDQplbGlmIG1vZGU9PTExOg0KICAgIGFkZG9uX2xvZygiYWRkU291cmNlIikNCiAgICBhZGRTb3VyY2UodXJsKQ0KDQplbGlmIG1vZGU9PTEyOg0KICAgIGFkZG9uX2xvZygic2V0UmVzb2x2ZWRVcmwiKQ0KICAgIGlmIG5vdCB1cmwuc3RhcnRzd2l0aCgicGx1Z2luOi8vcGx1Z2luIikgb3Igbm90IGFueSh4IGluIHVybCBmb3IgeCBpbiBnX2lnbm9yZVNldFJlc29sdmVkKTojbm90IHVybC5zdGFydHN3aXRoKCJwbHVnaW46Ly9wbHVnaW4udmlkZW8uZjRtVGVzdGVyIikgOg0KICAgICAgICBzZXRyZXM9VHJ1ZQ0KICAgICAgICBpZiAnJCRMU0RpcmVjdCQkJyBpbiB1cmw6DQogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyQkTFNEaXJlY3QkJCcsJycpDQogICAgICAgICAgICBzZXRyZXM9RmFsc2UNCiAgICAgICAgaXRlbSA9IHhibWNndWkuTGlzdEl0ZW0ocGF0aD11cmwpDQogICAgICAgIGlmIG5vdCBzZXRyZXM6DQogICAgICAgICAgICB4Ym1jLlBsYXllcigpLnBsYXkodXJsKQ0KICAgICAgICBlbHNlOiANCiAgICAgICAgICAgIHhibWNwbHVnaW4uc2V0UmVzb2x2ZWRVcmwoaW50KHN5cy5hcmd2WzFdKSwgVHJ1ZSwgaXRlbSkNCiAgICBlbHNlOg0KIyAgICAgICAgcHJpbnQgJ05vdCBzZXR0aW5nIHNldFJlc29sdmVkVXJsJw0KICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCdYQk1DLlJ1blBsdWdpbignK3VybCsnKScpDQoNCg0KZWxpZiBtb2RlPT0xMzoNCiAgICBhZGRvbl9sb2coInBsYXlfcGxheWxpc3QiKQ0KICAgIHBsYXlfcGxheWxpc3QobmFtZSwgcGxheWxpc3QpDQoNCmVsaWYgbW9kZT09MTQ6DQogICAgYWRkb25fbG9nKCJnZXRfeG1sX2RhdGFiYXNlIikNCiAgICBnZXRfeG1sX2RhdGFiYXNlKHVybCkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09MTU6DQogICAgYWRkb25fbG9nKCJicm93c2VfeG1sX2RhdGFiYXNlIikNCiAgICBnZXRfeG1sX2RhdGFiYXNlKHVybCwgVHJ1ZSkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09MTY6DQogICAgYWRkb25fbG9nKCJicm93c2VfY29tbXVuaXR5IikNCiAgICBnZXRDb21tdW5pdHlTb3VyY2VzKHVybCxicm93c2U9VHJ1ZSkNCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQoNCmVsaWYgbW9kZT09MTcgb3IgbW9kZT09MTE3Og0KICAgIGFkZG9uX2xvZygiZ2V0UmVnZXhQYXJzZWQiKQ0KDQogICAgZGF0YT1Ob25lDQogICAgaWYgcmVnZXhzIGFuZCAnbGlzdHJlcGVhdCcgaW4gdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpOg0KICAgICAgICBsaXN0cmVwZWF0LHJldCxtLHJlZ2V4cywgY29va2llSmFyID1nZXRSZWdleFBhcnNlZChyZWdleHMsIHVybCkNCiAgICAgICAgI3ByaW50IGxpc3RyZXBlYXQscmV0LG0scmVnZXhzDQogICAgICAgIGQ9JycNCiMgICAgICAgIHByaW50ICdtIGlzJyAsIG0NCiMgICAgICAgIHByaW50ICdyZWdleHMnLHJlZ2V4cw0KICAgICAgICByZWdleG5hbWU9bVsnbmFtZSddDQogICAgICAgIGV4aXN0aW5nX2xpc3Q9cmVnZXhzLnBvcChyZWdleG5hbWUpDQogIyAgICAgICBwcmludCAnZmluYWwgcmVnZXhzJyxyZWdleHMscmVnZXhuYW1lDQogICAgICAgIHVybD0nJw0KICAgICAgICBpbXBvcnQgY29weQ0KICAgICAgICBsbj0nJw0KICAgICAgICBybnVtYmVyPTANCiAgICAgICAgZm9yIG9iaiBpbiByZXQ6DQogICAgICAgICAgICAjcHJpbnQgJ29iaicsb2JqDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcm51bWJlcis9MQ0KICAgICAgICAgICAgICAgIG5ld2NvcHk9Y29weS5kZWVwY29weShyZWdleHMpDQogICAgIyAgICAgICAgICAgIHByaW50ICduZXdjb3B5JyxuZXdjb3B5LCBsZW4obmV3Y29weSkNCiAgICAgICAgICAgICAgICBsaXN0cmVwZWF0VD1saXN0cmVwZWF0DQogICAgICAgICAgICAgICAgaT0wDQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKG9iaikpOg0KICAgICMgICAgICAgICAgICAgICAgcHJpbnQgJ2kgaXMgJyxpLCBsZW4ob2JqKSwgbGVuKG5ld2NvcHkpDQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihuZXdjb3B5KT4wOg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZV9rZXlPLCB0aGVfdmFsdWVPIGluIG5ld2NvcHkuaXRlcml0ZW1zKCk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlX3ZhbHVlTyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZV9rZXksIHRoZV92YWx1ZSBpbiB0aGVfdmFsdWVPLml0ZXJpdGVtcygpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlX3ZhbHVlIGlzIG5vdCBOb25lOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICAna2V5IGFuZCB2YWwnLHRoZV9rZXksIHRoZV92YWx1ZQ0KICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnYWEnDQogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddJw0KICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCByZXByKG9ialtpXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0eXBlKHRoZV92YWx1ZSkgaXMgZGljdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZV9rZXlsLCB0aGVfdmFsdWVsIGluIHRoZV92YWx1ZS5pdGVyaXRlbXMoKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZV92YWx1ZWwgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPU5vbmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9iaix0dXBsZSk6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqW2ldLmRlY29kZSgndXRmLTgnKSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqW2ldIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqLmRlY29kZSgndXRmLTgnKSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPSBvYmoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nIGluIHRoZV92YWx1ZWw6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZV92YWx1ZWw9dGhlX3ZhbHVlbC5yZXBsYWNlKCdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddW0RFXScsIHVuZXNjYXBlKHZhbCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlX3ZhbHVlW3RoZV9rZXlsXT10aGVfdmFsdWVsLnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ10nLCB2YWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdmaXJzdCBzZWMnLHRoZV92YWx1ZVt0aGVfa2V5bF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9Tm9uZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9iaix0dXBsZSk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1vYmpbaV0uZGVjb2RlKCd1dGYtOCcpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1vYmpbaV0gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPSBvYmouZGVjb2RlKCd1dGYtOCcpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddW0RFXScgaW4gdGhlX3ZhbHVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdmb3VuZCBERScsdGhlX3ZhbHVlLnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ11bREVdJywgdW5lc2NhcGUodmFsKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZV92YWx1ZT10aGVfdmFsdWUucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nLCB1bmVzY2FwZSh2YWwpKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZV92YWx1ZU9bdGhlX2tleV09dGhlX3ZhbHVlLnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ10nLCB2YWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnc2Vjb25kIHNlYyB2YWwnLHRoZV92YWx1ZU9bdGhlX2tleV0NCg0KICAgICAgICAgICAgICAgICAgICB2YWw9Tm9uZQ0KICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9iaix0dXBsZSk6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW9ialtpXS5kZWNvZGUoJ3V0Zi04JykNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9b2JqW2ldDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW9iai5kZWNvZGUoJ3V0Zi04JykNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW9iag0KICAgICAgICAgICAgICAgICAgICBpZiAnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nIGluIGxpc3RyZXBlYXRUOg0KICAgICAgICAgICAgICAgICAgICAgICAgbGlzdHJlcGVhdFQ9bGlzdHJlcGVhdFQucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nLHZhbCkNCiAgICAgICAgICAgICAgICAgICAgbGlzdHJlcGVhdFQ9bGlzdHJlcGVhdFQucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXScsZXNjYXBlKHZhbCkpDQojICAgICAgICAgICAgICAgICAgICBwcmludCBsaXN0cmVwZWF0VA0KICAgICAgICAgICAgICAgIGxpc3RyZXBlYXRUPWxpc3RyZXBlYXRULnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cigwKSArICddJyxzdHIocm51bWJlcikpIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgaWYgY29va2llSmFyIGFuZCAnWycgKyByZWdleG5hbWUrJy5jb29raWVzXScgaW4gbGlzdHJlcGVhdFQ6DQogICAgICAgICAgICAgICAgICAgICAgICBsaXN0cmVwZWF0VD1saXN0cmVwZWF0VC5yZXBsYWNlKCdbJyArIHJlZ2V4bmFtZSsnLmNvb2tpZXNdJyxnZXRDb29raWVzU3RyaW5nKGNvb2tpZUphcikpIA0KICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICNuZXdjb3B5ID0gdXJsbGliLnF1b3RlKHJlcHIobmV3Y29weSkpDQogICAgIyAgICAgICAgICAgIHByaW50ICduZXcgcmVnZXggbGlzdCcsIHJlcHIobmV3Y29weSksIHJlcHIobGlzdHJlcGVhdFQpDQogICAgIyAgICAgICAgICAgIGFkZExpbmsobGlzdGxpbmtULGxpc3R0aXRsZVQuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSxsaXN0dGh1bWJuYWlsVCwnJywnJywnJywnJyxUcnVlLE5vbmUsbmV3Y29weSwgbGVuKHJldCkpDQogICAgICAgICAgICAgICAgcmVnZXhfeG1sPScnDQojICAgICAgICAgICAgICAgIHByaW50ICduZXdjb3B5JyxuZXdjb3B5DQogICAgICAgICAgICAgICAgaWYgbGVuKG5ld2NvcHkpPjA6DQogICAgICAgICAgICAgICAgICAgIHJlZ2V4X3htbD1kMngobmV3Y29weSwnbHNwcm9yb290JykNCiAgICAgICAgICAgICAgICAgICAgcmVnZXhfeG1sPXJlZ2V4X3htbC5zcGxpdCgnPGxzcHJvcm9vdD4nKVsxXS5zcGxpdCgnPC9sc3Byb3Jvb3QnKVswXQ0KICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjbG4rPSdcbjxpdGVtPiVzXG4lczwvaXRlbT4nJShsaXN0cmVwZWF0VC5lbmNvZGUoInV0Zi04IikscmVnZXhfeG1sKSAgIA0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgbG4rPSdcbjxpdGVtPiVzXG4lczwvaXRlbT4nJShsaXN0cmVwZWF0VCxyZWdleF94bWwpDQogICAgICAgICAgICAgICAgZXhjZXB0OiBsbis9J1xuPGl0ZW0+JXNcbiVzPC9pdGVtPiclKGxpc3RyZXBlYXRULmVuY29kZSgidXRmLTgiKSxyZWdleF94bWwpDQogICAgICAgICAgICBleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoZmlsZT1zeXMuc3Rkb3V0KQ0KIyAgICAgICAgICAgIHByaW50IHJlcHIobG4pDQojICAgICAgICAgICAgcHJpbnQgbmV3Y29weQ0KICAgICAgICAgICAgICAgIA0KIyAgICAgICAgICAgIGxuKz0nPC9pdGVtPicNCiAgICAgICAgDQogICAgICAgIGFkZG9uX2xvZyhyZXByKGxuKSkNCiAgICAgICAgZ2V0RGF0YSgnJywnJyxsbikNCiAgICAgICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ0KICAgIGVsc2U6DQogICAgICAgIHVybCxzZXRyZXNvbHZlZCA9IGdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgdXJsKQ0KICAgICAgICBwcmludCByZXByKHVybCksc2V0cmVzb2x2ZWQsJ2ltaGVyZScNCiAgICAgICAgaWYgbm90IChyZWdleHMgYW5kICdub3RwbGF5YWJsZScgaW4gcmVnZXhzIGFuZCBub3QgdXJsKTogICAgICAgIA0KICAgICAgICAgICAgaWYgdXJsOg0KICAgICAgICAgICAgICAgIGlmICckUExBWUVSUFJPWFkkPScgaW4gdXJsOg0KICAgICAgICAgICAgICAgICAgICB1cmwscHJveHk9dXJsLnNwbGl0KCckUExBWUVSUFJPWFkkPScpDQogICAgICAgICAgICAgICAgICAgIHByaW50ICdwcm94eScscHJveHkNCiAgICAgICAgICAgICAgICAgICAgI0phaXJveCBtb2QgZm9yIHByb3h5IGF1dGgNCiAgICAgICAgICAgICAgICAgICAgcHJveHl1c2VyID0gTm9uZQ0KICAgICAgICAgICAgICAgICAgICBwcm94eXBhc3MgPSBOb25lDQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihwcm94eSkgPiAwIGFuZCAnQCcgaW4gcHJveHk6DQogICAgICAgICAgICAgICAgICAgICAgICBwcm94eSA9IHByb3h5LnNwbGl0KCc6JykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5dXNlciA9IHByb3h5WzBdDQogICAgICAgICAgICAgICAgICAgICAgICBwcm94eXBhc3MgPSBwcm94eVsxXS5zcGxpdCgnQCcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICBwcm94eWlwID0gcHJveHlbMV0uc3BsaXQoJ0AnKVsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCA9IHByb3h5WzJdDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBwcm94eWlwLHBvcnQ9cHJveHkuc3BsaXQoJzonKQ0KDQogICAgICAgICAgICAgICAgICAgIHBsYXltZWRpYXdpdGhwcm94eSh1cmwsbmFtZSxpY29uaW1hZ2UscHJveHlpcCxwb3J0LCBwcm94eXVzZXIscHJveHlwYXNzKSAjamFpcm94DQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcGxheXNldHJlc29sdmVkKHVybCxuYW1lLGljb25pbWFnZSxzZXRyZXNvbHZlZCxyZWdleHMpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKE11bmRvRHJhZ29uQmFsbCxGYWlsZWQgdG8gZXh0cmFjdCByZWdleC4gLSAiKyJ0aGlzIisiLDQwMDAsIitpY29uKyIpIikNCmVsaWYgbW9kZT09MTg6DQogICAgYWRkb25fbG9nKCJ5b3V0dWJlZGwiKQ0KICAgIHRyeToNCiAgICAgICAgaW1wb3J0IHlvdXR1YmVkbA0KICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKE11bmRvRHJhZ29uQmFsbCxQbGVhc2UgW0NPTE9SIHllbGxvd11pbnN0YWxsIFlvdXR1YmUtZGxbL0NPTE9SXSBtb2R1bGUgLDEwMDAwLCIiKSIpDQogICAgc3RyZWFtX3VybD15b3V0dWJlZGwuc2luZ2xlX1lEKHVybCkNCiAgICBwbGF5c2V0cmVzb2x2ZWQoc3RyZWFtX3VybCxuYW1lLGljb25pbWFnZSkNCmVsaWYgbW9kZT09MTk6DQogICAgYWRkb25fbG9nKCJHZW5lc2lzY29tbW9ucmVzb2x2ZXJzIikNCiAgICBwbGF5c2V0cmVzb2x2ZWQgKHVybHNvbHZlcih1cmwpLG5hbWUsaWNvbmltYWdlLFRydWUpDQoNCmVsaWYgbW9kZT09MjE6DQogICAgYWRkb25fbG9nKCJkb3dubG9hZCBjdXJyZW50IGZpbGUgdXNpbmcgeW91dHViZS1kbCBzZXJ2aWNlIikNCiAgICBtdHlwZT0ndmlkZW8nDQogICAgaWYgJ1ttcDNdJyBpbiBuYW1lOg0KICAgICAgICBtdHlwZT0nYXVkaW8nDQogICAgICAgIG5hbWU9bmFtZS5yZXBsYWNlKCdbbXAzXScsJycpDQogICAgeXRkbF9kb3dubG9hZCgnJyxuYW1lLCBtdHlwZSkNCmVsaWYgbW9kZT09MjM6DQogICAgYWRkb25fbG9nKCJnZXQgaW5mbyB0aGVuIGRvd25sb2FkIikNCiAgICBtdHlwZT0ndmlkZW8nDQogICAgaWYgJ1ttcDNdJyBpbiBuYW1lOg0KICAgICAgICBtdHlwZT0nYXVkaW8nDQogICAgICAgIG5hbWU9bmFtZS5yZXBsYWNlKCdbbXAzXScsJycpDQogICAgeXRkbF9kb3dubG9hZCh1cmwsbmFtZSxtdHlwZSkNCmVsaWYgbW9kZT09MjQ6DQogICAgYWRkb25fbG9nKCJBdWRpbyBvbmx5IHlvdXR1YmUgZG93bmxvYWQiKQ0KICAgIHl0ZGxfZG93bmxvYWQodXJsLG5hbWUsJ2F1ZGlvJykNCmVsaWYgbW9kZT09MjU6DQogICAgYWRkb25fbG9nKCJTZWFyY2hpbiBPdGhlciBwbHVnaW5zIikNCiAgICBfc2VhcmNoKHVybCxuYW1lKQ0KICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkNCmVsaWYgbW9kZT09NTU6DQogICAgYWRkb25fbG9nKCJlbmFibGVkIGxvY2siKQ0KICAgIHBhcmVudGFsYmxvY2tlZHBpbiA9YWRkb24uZ2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkcGluJykNCiAgICBrZXlib2FyZCA9IHhibWMuS2V5Ym9hcmQoJycsJ2ludHJvZHV6Y2EgbGEgY29udHJhc2XDsWEnKQ0KICAgIGtleWJvYXJkLmRvTW9kYWwoKQ0KICAgIGlmIG5vdCAoa2V5Ym9hcmQuaXNDb25maXJtZWQoKSA9PSBGYWxzZSk6DQogICAgICAgIG5ld1N0ciA9IGtleWJvYXJkLmdldFRleHQoKQ0KICAgICAgICBpZiBuZXdTdHI9PXBhcmVudGFsYmxvY2tlZHBpbjoNCiAgICAgICAgICAgIGFkZG9uLnNldFNldHRpbmcoJ3BhcmVudGFsYmxvY2tlZCcsICJmYWxzZSIpDQogICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihNdW5kb0RyYWdvbkJhbGwsIE1vZG8gcHJlbWl1bSBPbiw1MDAwLCIraWNvbisiKSIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihNdW5kb0RyYWdvbkJhbGwsIG9sdmlkbyBsYSBjbGF2ZT8/ICw1MDAwLCIraWNvbisiKSIpDQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ0KZWxpZiBtb2RlPT01NjoNCiAgICBhZGRvbl9sb2coImRpc2FibGUgbG9jayIpDQogICAgYWRkb24uc2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkJywgInRydWUiKQ0KICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKE11bmRvRHJhZ29uQmFsbCwgTW9kbyBwcmVtaXVtIE9mZiw1MDAwLCIraWNvbisiKSIpDQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ0KDQplbGlmIG1vZGU9PTUzOg0KICAgIGFkZG9uX2xvZygiUmVxdWVzdGluZyBKU09OLVJQQyBJdGVtcyIpDQogICAgcGx1Z2lucXVlcnlieUpTT04odXJsKQ0KICAgICN4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpDQppZiBub3Qgdmlld21vZGU9PU5vbmU6DQogICBwcmludCAnc2V0dGluZyB2aWV3IG1vZGUnDQogICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJDb250YWluZXIuU2V0Vmlld01vZGUoJXMpIiV2aWV3bW9kZSkNCiAgICA=')