import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 if 86 - 86: oO0o
 if 12 - 12: OOO0o0o / o0oO0 + i111I * O0Oo0oO0o . II1iI . i1iIii1Ii1II
 if 1 - 1: O0Oooo00
 if 87 - 87: i1IIi11111i / I11i1i11i1I % oo / i1IIi11111i / ooO0OO000o * i111I
 I1i1i1ii = [ ]
 I1i1i1ii . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 I1i1i1ii . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 I1i1i1ii . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 I1i1i1ii . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 I1i1i1ii . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas 2017-2018' , 'action' : 'ultim' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas hasta 2016' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return I1i1i1ii
 if 44 - 44: i111I / Ii11111i - ooO0OO000o - i11iIiiIii % I11i1i11i1I
def O0OoOoo00o ( url , post = None , txheaders = None ) :
 if txheaders == None :
  txheaders = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( url , post , txheaders )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 return II
 if 63 - 63: oO0o % ii1I
o0oOo0Ooo0O = [
 [ '%s.0' % OO00O0O0O00Oo for OO00O0O0O00Oo in xrange ( 18 , 50 ) ] ,
 [ '37.0.2062.103' , '37.0.2062.120' , '37.0.2062.124' , '38.0.2125.101' , '38.0.2125.104' , '38.0.2125.111' , '39.0.2171.71' , '39.0.2171.95' , '39.0.2171.99' , '40.0.2214.93' , '40.0.2214.111' ,
 '40.0.2214.115' , '42.0.2311.90' , '42.0.2311.135' , '42.0.2311.152' , '43.0.2357.81' , '43.0.2357.124' , '44.0.2403.155' , '44.0.2403.157' , '45.0.2454.101' , '45.0.2454.85' , '46.0.2490.71' ,
 '46.0.2490.80' , '46.0.2490.86' , '47.0.2526.73' , '47.0.2526.80' , '48.0.2564.116' , '49.0.2623.112' , '50.0.2661.86' ] ,
 [ '11.0' ] ,
 [ '8.0' , '9.0' , '10.0' , '10.6' ] ]
IIIiiiiiIii = [ 'Windows NT 10.0' , 'Windows NT 7.0' , 'Windows NT 6.3' , 'Windows NT 6.2' , 'Windows NT 6.1' , 'Windows NT 6.0' , 'Windows NT 5.1' , 'Windows NT 5.0' ]
OO = [ '; WOW64' , '; Win64; IA64' , '; Win64; x64' , '' ]
oO0O = [ 'Mozilla/5.0 ({win_ver}{feature}; rv:{br_ver}) Gecko/20100101 Firefox/{br_ver}' ,
 'Mozilla/5.0 ({win_ver}{feature}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{br_ver} Safari/537.36' ,
 'Mozilla/5.0 ({win_ver}{feature}; Trident/7.0; rv:{br_ver}) like Gecko' ,
 'Mozilla/5.0 (compatible; MSIE {br_ver}; {win_ver}{feature}; Trident/6.0)' ]
if 70 - 70: Ii11111i % Ii11111i . i1IIi11111i % iiI1i1 * OOO0o0o % i111I
def iiI1IiI ( ) :
 import random
 IIooOoOoo0O = random . randrange ( len ( oO0O ) )
 OooO0 = { 'win_ver' : random . choice ( IIIiiiiiIii ) , 'feature' : random . choice ( OO ) , 'br_ver' : random . choice ( o0oOo0Ooo0O [ IIooOoOoo0O ] ) }
 II11iiii1Ii = oO0O [ IIooOoOoo0O ] . format ( ** OooO0 )
 return II11iiii1Ii
 if 70 - 70: i111I / OO0O0O % oo % i11iIiiIii . I11i11Ii
def O0o0Oo ( headers ) :
 return '|%s' % '&' . join ( [ '%s=%s' % ( Oo00OOOOO , urllib . quote_plus ( headers [ Oo00OOOOO ] ) ) for Oo00OOOOO in headers ] )
 if 85 - 85: oo . O0Oooo00 - iiI1i1 % oo % ooO0OO000o
 if 81 - 81: iiI1i1 + ooO0OO000o % O0Oooo00 * Iii1I1
def oOOo0oo ( string ) :
 Oo00OOOOO = 'sYti87g4Ut0_z'
 string = base64 . urlsafe_b64decode ( string )
 o0oo0o0O00OO = [ ]
 for OO00O0O0O00Oo in xrange ( len ( string ) ) :
  o0oO = Oo00OOOOO [ OO00O0O0O00Oo % len ( Oo00OOOOO ) ]
  I1i1iii = chr ( ord ( string [ OO00O0O0O00Oo ] ) - ord ( o0oO ) % 256 )
  o0oo0o0O00OO . append ( I1i1iii )
 i1iiI11I = "" . join ( o0oo0o0O00OO )
 return i1iiI11I
 if 29 - 29: iiiii
def iI ( user , cole , peli ) :
 if 28 - 28: O0Oo0oO0o - i1IIi11111i . i1IIi11111i + oO0o - iiiii + Iii1I1
 import xbmc
 xbmc . log ( 'USER=%s\nCOLE=%s\nPELI=%s' % ( user , cole , peli ) )
 if 95 - 95: iiI1i1 % i111I . Iii1I1
 I1i1I = 'http://diskokosmiko.mx'
 oOO00oOO = peli
 OoOo = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 iIo00O = '%s/%s/' % ( I1i1I , user )
 OOO0OOO00oo = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 Iii111II = '%s/%s' % ( I1i1I , OoOo )
 OOO0OOO00oo [ 'referer' ] = iIo00O
 OOO0OOO00oo [ 'connection' ] = 'keep-alive'
 OOoO00o = urllib2 . Request ( Iii111II , None , OOO0OOO00oo )
 II111iiii = urllib2 . urlopen ( OOoO00o )
 II = II111iiii . read ( )
 II111iiii . close ( )
 iiii11I = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , II )
 Ooo0OO0oOO = 0
 try :
  iiii11I = iiii11I [ 0 ]
 except :
  Ooo0OO0oOO = 1
 if Ooo0OO0oOO == 0 :
  ii11i1 = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( I1i1I , oOO00oOO )
  IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( oOO00oOO , iiii11I )
  OOO0OOO00oo [ 'referer' ] = Iii111II
  OOO0OOO00oo [ 'connection' ] = 'keep-alive'
  OOoO00o = urllib2 . Request ( ii11i1 , IIIii1II1II , OOO0OOO00oo )
  try :
   II111iiii = urllib2 . urlopen ( OOoO00o )
   II = II111iiii . read ( )
   II111iiii . close ( )
   i1I1iI = re . findall ( 'DownloadUrl":"([^"]+)' , II )
   oo0OooOOo0 = i1I1iI [ 0 ]
  except :
   oo0OooOOo0 = 'tmp'
 else :
  oo0OooOOo0 = ''
 return oo0OooOOo0 . strip ( )
 if 92 - 92: O0Oooo00 . II1iI + OOO0o0o
def IiII1I11i1I1I ( server , user , cole , peli ) :
 oO0Oo = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 IIIii1II1II = None
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( oO0Oo , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 o00OO00OoO = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 OOOO0OOoO0O0 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , II )
 O0Oo000ooO00 = 'http://%s%s' % ( server , OOOO0OOoO0O0 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 iiii11I = OOOO0OOoO0O0 . group ( 2 )
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iiii11I )
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( O0Oo000ooO00 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 import time
 oO0 = str ( int ( time . time ( ) ) ) + '404'
 Iii111II = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , oO0 )
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = None
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( Iii111II , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 Ii1iIiII1ii1 = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 ooOooo000oOO = o00OO00OoO . split ( ';' )
 Oo0oOOo = Ii1iIiII1ii1 . split ( ';' )
 for Oo0OoO00oOO0o in Oo0oOOo :
  if Oo0OoO00oOO0o not in ooOooo000oOO :
   ooOooo000oOO . append ( Oo0OoO00oOO0o )
 Oo0oOOo = [ ]
 for Oo0OoO00oOO0o in ooOooo000oOO :
  if 'path=/' not in Oo0OoO00oOO0o and 'HttpOnly' not in Oo0OoO00oOO0o :
   Oo0oOOo . append ( Oo0OoO00oOO0o )
 o00OO00OoO = '; ' . join ( Oo0oOOo ) . replace ( '  ' , ' ' )
 ii11i1 = 'http://%s/action/Account/Login' % server
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Accept' ] = '*/*'
 oOOoo0Oo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOoo0Oo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOoo0Oo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOoo0Oo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = '__RequestVerificationToken=%s&UserName=addoncine&Password=a1b2c3d4' % iiii11I
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( ii11i1 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 Ii1iIiII1ii1 = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 ooOooo000oOO = o00OO00OoO . split ( ';' )
 Oo0oOOo = Ii1iIiII1ii1 . split ( ';' )
 for Oo0OoO00oOO0o in Oo0oOOo :
  if Oo0OoO00oOO0o not in ooOooo000oOO :
   ooOooo000oOO . append ( Oo0OoO00oOO0o )
 Oo0oOOo = [ ]
 for Oo0OoO00oOO0o in ooOooo000oOO :
  if 'path=/' not in Oo0OoO00oOO0o and 'HttpOnly' not in Oo0OoO00oOO0o :
   Oo0oOOo . append ( Oo0OoO00oOO0o )
 o00OO00OoO = '; ' . join ( Oo0oOOo ) . replace ( '  ' , ' ' )
 Ii1iIiII1ii1 = ''
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iiii11I )
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( O0Oo000ooO00 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 OOOO0OOoO0O0 = re . search ( 'DownloadUrl":"(.*?)"' , II )
 return OOOO0OOoO0O0 . group ( 1 )
 if 80 - 80: i111I + O0Oo0oO0o - O0Oo0oO0o % O0Oooo00
def OoOO0oo0o ( bas ) :
 II11i1I11Ii1i = O0OoOoo00o ( '%sbas/base.enl' % IiII )
 II11i1I11Ii1i = II11i1I11Ii1i . split ( '.' )
 O000O0oOO0 = 0
 if len ( II11i1I11Ii1i ) >= 6 :
  if II11i1I11Ii1i [ 4 ] == 'gd' :
   II11i1I11Ii1i = 'https://goo.gl/%s' % II11i1I11Ii1i [ 5 ]
   try :
    II = O0OoOoo00o ( II11i1I11Ii1i )
    O000O0oOO0 = 1
   except : pass
  elif II11i1I11Ii1i [ 4 ] == 'gh' :
   O0ooo0O0oo0 = II11i1I11Ii1i [ 5 ]
   try :
    II11i1I11Ii1i = iI ( II11i1I11Ii1i [ 1 ] , II11i1I11Ii1i [ 2 ] , II11i1I11Ii1i [ 6 ] )
    try :
     II = O0OoOoo00o ( II11i1I11Ii1i )
    except : pass
   except : pass
   II11i1I11Ii1i = 'https://raw.githubusercontent.com/%s/base.cmp' % O0ooo0O0oo0
   try :
    II = O0OoOoo00o ( II11i1I11Ii1i )
    O000O0oOO0 = 1
   except : pass
 if O000O0oOO0 == 0 :
  if II11i1I11Ii1i [ 0 ] == 'dk' :
   II11i1I11Ii1i = iI ( II11i1I11Ii1i [ 1 ] , II11i1I11Ii1i [ 2 ] , II11i1I11Ii1i [ 3 ] )
  II = O0OoOoo00o ( II11i1I11Ii1i )
 II = zlib . decompress ( II )
 oo0oOo = open ( bas , 'wb' )
 oo0oOo . write ( II )
 oo0oOo . close ( )
 o000O0o = sqlite3 . connect ( bas )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select version from version" )
 oO0OOoo0OO = iI1iII1 . fetchone ( )
 oO0OOoo0OO = oO0OOoo0OO [ 0 ]
 iI1iII1 . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 O0 = iI1iII1 . fetchall ( )
 ii1ii1ii = len ( O0 )
 iI1iII1 . execute ( "select faffid from pelis where faffid<0;" )
 O0 = iI1iII1 . fetchall ( )
 ii1ii1ii += len ( O0 )
 o000O0o . close ( )
 oooooOoo0ooo = 'Vers. %s (%s películas distintas)' % ( oO0OOoo0OO , ii1ii1ii )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
 if 6 - 6: II1iI - i1iIii1Ii1II + OO0O0O - I11i1i11i1I - i11iIiiIii
 if 79 - 79: oO0o - Iii1I1 * iiI1i1 + oO0o % Iii1I1 * Iii1I1
 if 61 - 61: ooO0OO000o
def O0OOO ( bas ) :
 import xbmc
 II11iIiIIIiI = ''
 if os . path . isfile ( bas ) :
  try :
   o000O0o = sqlite3 . connect ( bas )
   iI1iII1 = o000O0o . cursor ( )
   iI1iII1 . execute ( "Select vrsp from version" )
   o0o = iI1iII1 . fetchone ( )
   o000O0o . close ( )
   II11iIiIIIiI = o0o [ 0 ]
  except : pass
  if 84 - 84: Iii1I1
  oO0OOoo0OO = ''
  try :
   oO0OOoo0OO = O0OoOoo00o ( '%sbas/base.max' % IiII )
  except : pass
  if 74 - 74: o0oO0 - I11i11Ii - Ii11111i . i1iIii1Ii1II - i1IIi11111i
  if oO0OOoo0OO != '' :
   try :
    o000O0o = sqlite3 . connect ( bas )
    iI1iII1 = o000O0o . cursor ( )
    iI1iII1 . execute ( "Select version from version" )
    o0o = iI1iII1 . fetchone ( )
    o000O0o . close ( )
    o0o = str ( o0o [ 0 ] )
    if o0o != oO0OOoo0OO :
     OoOO0oo0o ( bas )
   except :
    OoOO0oo0o ( bas )
 else :
  OoOO0oo0o ( bas )
  if 73 - 73: Ii11111i - ii1I - ii1I - O0Oooo00 . i1iIii1Ii1II + o0oO0
 o000O0o = sqlite3 . connect ( bas )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select vrsp,pdata from version" )
 o0o = iI1iII1 . fetchone ( )
 o000O0o . close ( )
 if II11iIiIIIiI != o0o [ 0 ] :
  if 81 - 81: O0Oooo00 * i111I - I11i1i11i1I . ooO0OO000o % II1iI / I11i11Ii
  import xbmc , xbmcaddon
  iIIiIi1iIII1 = xbmcaddon . Addon ( )
  Ooo = xbmc . translatePath ( iIIiIi1iIII1 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  OOOOo = o0o [ 1 ] . split ( '\n' )
  II = base64 . b64decode ( OOOOo [ 0 ] )
  II = zlib . decompress ( II )
  if not os . path . isfile ( '%s/noactualizar.txt' % Ooo ) :
   oo0oOo = open ( '%s/addon.py' % ( Ooo ) , 'wb' )
   oo0oOo . write ( II )
   oo0oOo . close ( )
   II = base64 . b64decode ( OOOOo [ 1 ] )
   II = zlib . decompress ( II )
   oo0oOo = open ( '%s/addon.xml' % ( Ooo ) , 'wb' )
   oo0oOo . write ( II )
   oo0oOo . close ( )
   if 76 - 76: iiI1i1
def I1iIIii ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = oOOo0oo ( user )
 peli = oOOo0oo ( peli )
 if server == 'sc' :
  iii1i = peli . split ( ' ' )
  I11i1ii1 = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + iii1i [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  I11i1ii1 = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 O0Oooo0O = base64 . b64decode ( 'c291cmNl' )
 O0o = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 OoOooO = base64 . b64decode ( 'dXJscw==' )
 II111iiiI1Ii = base64 . b64decode ( 'c3VibWl0' )
 o0O0OOO0Ooo = base64 . b64decode ( 'bG9xdWVz' )
 iiIiI = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 I1 = { O0Oooo0O : O0o , OoOooO : I11i1ii1 , II111iiiI1Ii : o0O0OOO0Ooo }
 if 86 - 86: oO0o - i1iIii1Ii1II - iiI1i1 * O0Oooo00
 oooo0O0 = urllib2 . HTTPHandler ( )
 oOOO = urllib2 . build_opener ( oooo0O0 )
 II = urllib . urlencode ( I1 )
 iIII1 = urllib2 . Request ( iiIiI , data = II )
 o0oO0OOoO00OO0o = oOOO . open ( iIII1 )
 oooooOoo0ooo = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 38 - 38: O0Oo0oO0o % II1iI % OOO0o0o % iiI1i1 - Ii11111i
def i1Ii ( s ) :
 return base64 . urlsafe_b64encode ( s )
 if 14 - 14: O0Oooo00
def I1iI1iIi111i ( ) :
 iiIi1IIi1I = ''
 if 84 - 84: oo * ooO0OO000o + Ii11111i
 O0ooO0Oo00o = base64 . b64decode ( 'IzAzIzQzIzI1IzE3' )
 if 77 - 77: OO0O0O * iiI1i1
 if 95 - 95: I11i11Ii + i11iIiiIii
 iIo00O = base64 . b64decode ( 'aHR0cDovL3d3dy5jdWFsZXNtaWlwLmNvbS8=' )
 OOoO00o = O0OoOoo00o ( iIo00O , None )
 I1Ii = re . search ( '<b>Tu IP real es (.*?)<b' , OOoO00o )
 if I1Ii :
  I1Ii = I1Ii . group ( 1 )
  if 94 - 94: i1iIii1Ii1II - ooO0OO000o . O0Oo0oO0o % II1iI . i11iIiiIii + Iii1I1
  iIo00O = base64 . b64decode ( 'aHR0cHM6Ly9nZW9pcHRvb2wuY29tL2VzLz9pcD0=' ) + I1Ii
  OOoO00o = O0OoOoo00o ( iIo00O , None )
  if 26 - 26: II1iI - OO0O0O - I11i11Ii / iiI1i1 . oO0o % OO0O0O
  OOiIiIIi1 = re . search ( base64 . b64decode ( 'UG9zdGFsOltcc1xTXSo/PHNwYW4+KC4qPyk8' ) , OOoO00o )
  if OOiIiIIi1 :
   OOiIiIIi1 = OOiIiIIi1 . group ( 1 )
   iiIi1IIi1I = '#' + OOiIiIIi1 [ : 2 ]
 iiIi1IIi1I = iiIi1IIi1I in O0ooO0Oo00o
 return iiIi1IIi1I
 if 7 - 7: oo - Ii11111i - i111I + oo
def iI1I11iiI1i ( encoded , code ) :
 oO0o0Ooooo = ""
 OOo0oO00ooO00 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
 OOo0oO00ooO00 = OOo0oO00ooO00 [ : : - 1 ]
 oOO0O00oO0Ooo = 0
 for IIooOoOoo0O in range ( 0 , len ( encoded ) - 1 ) :
  while oOO0O00oO0Ooo <= len ( encoded ) - 1 :
   oO0Oo0O0o = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo ] )
   OOI1iI1ii1II = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 1 ] )
   O0O0OOOOoo = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 2 ] )
   oOooO0 = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 3 ] )
   oOO0O00oO0Ooo += 4
   Ii1I1Ii = ( ( oO0Oo0O0o << 2 ) | ( OOI1iI1ii1II >> 4 ) )
   OOoO0 = ( ( ( OOI1iI1ii1II & 15 ) << 4 ) | ( O0O0OOOOoo >> 2 ) )
   OO0Oooo0oOO0O = ( ( O0O0OOOOoo & 3 ) << 6 ) | oOooO0
   Ii1I1Ii = Ii1I1Ii ^ code
   oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( Ii1I1Ii )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OOoO0 )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OO0Oooo0oOO0O )
 return oO0o0Ooooo
 if 62 - 62: I11i11Ii
def O00o0OO0 ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 if 35 - 35: i111I % oo / I11i1i11i1I + OO0O0O . iiiii . I11i11Ii
 O0OOO ( Oo0O )
 if 71 - 71: i1IIi11111i * ooO0OO000o * i111I
 oOOo0 = server . split ( '_' )
 server = oOOo0 [ 0 ]
 if len ( oOOo0 ) > 1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  o000O0o . commit ( )
  II1I1iiIII = oOOo0 [ 1 ] . split ( '.' )
  for oOOo0O00o in II1I1iiIII :
   iI1iII1 . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( oOOo0O00o , ) )
  o000O0o . commit ( )
  o000O0o . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = oOOo0oo ( user )
 pel = oOOo0oo ( pel )
 cole = oOOo0oo ( cole )
 if 8 - 8: iiI1i1
 if 49 - 49: I11i11Ii - II1iI
 if 74 - 74: OO0O0O * o0oO0 + oO0o / ii1I / ooO0OO000o . Ii11111i
 if 62 - 62: iiiii * I11i11Ii
 if 58 - 58: oO0o % OOO0o0o
 if 50 - 50: I11i1i11i1I . OOO0o0o
 if 97 - 97: Iii1I1 + oO0o
 if 89 - 89: OOO0o0o + iiI1i1 * II1iI * i1iIii1Ii1II
 if 37 - 37: iiiii - Iii1I1 - OOO0o0o
 if 77 - 77: O0Oo0oO0o * OO0O0O
 if 98 - 98: I11i11Ii % i1iIii1Ii1II * iiiii
 try :
  iIo00O = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  OoiIIiIi1 = O0OoOoo00o ( iIo00O )
 except : pass
 if 74 - 74: O0Oooo00 + OOO0o0o
 if server == 'kb' :
  oo0OooOOo0 = IiII1I11i1I1I ( 'kbagi.com' , user , cole , pel )
  oO00O000oO0 = xbmcgui . ListItem ( path = oo0OooOOo0 . strip ( ) )
  O0OoOO0o ( oO00O000oO0 , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , oO00O000oO0 )
 elif server == 'dk' :
  oo0OooOOo0 = iI ( user , cole , pel )
  if oo0OooOOo0 == '' :
   try :
    iIo00O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    OoiIIiIi1 = O0OoOoo00o ( iIo00O )
   except : pass
   oooooOoo0ooo = 'La película ya no existe'
   oO00O000oO0 = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , oO00O000oO0 )
   ooooo0O0000oo = xbmcgui . Dialog ( )
   ooooo0O0000oo . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
  if oo0OooOOo0 == 'tmp' :
   oooooOoo0ooo = 'Servidor temporalmente caído'
   oO00O000oO0 = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , oO00O000oO0 )
   ooooo0O0000oo = xbmcgui . Dialog ( )
   ooooo0O0000oo . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   oO00O000oO0 = xbmcgui . ListItem ( path = oo0OooOOo0 . strip ( ) )
   O0OoOO0o ( oO00O000oO0 , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , oO00O000oO0 )
 elif server == 'sc' :
  iiIiI = 'sg'
  iIii1II11 = pel . split ( ' ' )
  OooOo0ooo = pel . split ( ' ' )
  if 71 - 71: I11i1i11i1I + i1iIii1Ii1II
  if 28 - 28: O0Oo0oO0o
  import datetime
  I11ii1IIiIi = datetime . datetime . today ( ) . weekday ( )
  for OoOOo0OOoO in range ( I11ii1IIiIi ) :
   iIii1II11 . append ( iIii1II11 . pop ( 0 ) )
   OooOo0ooo . append ( OooOo0ooo . pop ( 0 ) )
   if 72 - 72: i1iIii1Ii1II
  while 1 == 1 :
   if not OooOo0ooo :
    oooooOoo0ooo = 'Película en preparación'
    oO00O000oO0 = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , oO00O000oO0 )
    ooooo0O0000oo = xbmcgui . Dialog ( )
    ooooo0O0000oo . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for II11Ii1iI1iII in iIii1II11 :
    OooOo0ooo . remove ( II11Ii1iI1iII )
    if len ( II11Ii1iI1iII ) == 12 :
     iiIiI = 'sc'
     iIo00O = 'http://streamcloud.eu/%s' % II11Ii1iI1iII
     II = O0OoOoo00o ( iIo00O )
     if ( "<h1>File Not Found</h1>" in II ) or ( "<h1>Archivo no encontrado</h1>" in II ) or ( II == 'Not Found' ) :
      II = ''
     else :
      if II != '' : break
    elif len ( II11Ii1iI1iII ) == 16 :
     iiIiI = 'sg'
     iIo00O = 'https://streamango.com/embed/%s' % II11Ii1iI1iII
     Oo0o00OO0000 = { 'User-Agent' : iiI1IiI ( ) }
     II = O0OoOoo00o ( iIo00O , txheaders = Oo0o00OO0000 )
     if ( '>Sorry!<' in II ) :
      II = ''
     else :
      if II != '' : break
   iIii1II11 = OooOo0ooo
   if II == '' :
    try :
     iIo00O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     OoiIIiIi1 = O0OoOoo00o ( iIo00O )
    except : pass
    oooooOoo0ooo = 'La película ya no existe'
    oO00O000oO0 = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , oO00O000oO0 )
    ooooo0O0000oo = xbmcgui . Dialog ( )
    ooooo0O0000oo . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   if iiIiI == 'sc' :
    oo0OooOOo0 = re . findall ( 'file\: "([^"]+)"' , II , flags = re . DOTALL )
    if not oo0OooOOo0 :
     IIIii1II1II = ""
     I1i = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , II , flags = re . DOTALL )
     for O00Oooo , i11I in I1i :
      IIIii1II1II += O00Oooo + "=" + i11I + "&"
     IIIii1II1II = IIIii1II1II . replace ( "op=download1" , "op=download2" )
     II = O0OoOoo00o ( iIo00O , post = IIIii1II1II )
     if 'id="justanotice"' in II :
      return [ ]
     oo0OooOOo0 = re . findall ( 'file\: "([^"]+)"' , II , flags = re . DOTALL )
    try :
     oo0OooOOo0 = oo0OooOOo0 [ 0 ]
     oO00O000oO0 = xbmcgui . ListItem ( path = oo0OooOOo0 )
     O0OoOO0o ( oO00O000oO0 , tit , pid )
     xbmcplugin . setResolvedUrl ( o0O , True , oO00O000oO0 )
     break
    except :
     pass
   elif iiIiI == 'sg' :
    o00Oo0oooooo = re . search ( '''srces\.push\({type:"video/mp4",src:\w+\('([^']+)',(\d+)''' , II )
    if o00Oo0oooooo :
     O0oO0 = iI1I11iiI1i ( o00Oo0oooooo . group ( 1 ) , int ( o00Oo0oooooo . group ( 2 ) ) )
     if O0oO0 :
      O0oO0 = "http:%s" % O0oO0 if O0oO0 . startswith ( "//" ) else O0oO0
      O0oO0 = O0oO0 . split ( "/" )
      if not O0oO0 [ - 1 ] . isdigit ( ) :
       O0oO0 [ - 1 ] = re . sub ( '[^\d]' , '' , O0oO0 [ - 1 ] )
      O0oO0 = "/" . join ( O0oO0 )
      Oo0o00OO0000 . update ( { 'Referer' : iIo00O } )
      oo0OooOOo0 = O0oO0 + O0o0Oo ( Oo0o00OO0000 )
      import xbmc
      xbmc . log ( 'JJSG = ' + oo0OooOOo0 )
      try :
       oO00O000oO0 = xbmcgui . ListItem ( path = oo0OooOOo0 )
       O0OoOO0o ( oO00O000oO0 , tit , pid )
       xbmcplugin . setResolvedUrl ( o0O , True , oO00O000oO0 )
       break
      except :
       pass
       if 7 - 7: I11i11Ii
def I1ii1iIiii1I ( ) :
 O0OOO ( Oo0O )
 I1i1i1ii = i1I1ii1II1iII ( )
 IIIii11 = [ ]
 for iiIiIIIiiI in I1i1i1ii :
  iiI1IIIi = '%s/%s.png' % ( IiIi11iIIi1Ii , iiIiIIIiiI [ 'ico' ] )
  II11IiIi11 = xbmcgui . ListItem ( label = iiIiIIIiiI [ 'title' ] , iconImage = iiI1IIIi )
  iIo00O = '{0}?action={1}' . format ( Oo , iiIiIIIiiI [ 'action' ] )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 18 - 18: II1iI - i11iIiiIii / ooO0OO000o . O0Oo0oO0o
 if 55 - 55: ii1I % ooO0OO000o + II1iI * OO0O0O
 if 81 - 81: i1IIi11111i % ii1I . OO0O0O
 if 4 - 4: i11iIiiIii % iiI1i1 % ii1I / i1IIi11111i
 if 6 - 6: O0Oooo00 / I11i11Ii % O0Oo0oO0o - I11i11Ii
 if 31 - 31: O0Oo0oO0o
def i1 ( pid , cur ) :
 OOO0000oO = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 O0 = cur . fetchall ( )
 if O0 :
  iI1i111I1Ii = [ ]
  for o0o in O0 :
   iI1i111I1Ii . append ( o0o [ 0 ] )
  OOO0000oO = ', ' . join ( iI1i111I1Ii )
 return OOO0000oO
 if 25 - 25: I11i1i11i1I - O0Oooo00
def Ii1I ( pid , cur ) :
 o0OO0o0o00o = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 O0 = cur . fetchall ( )
 if O0 :
  for o0o in O0 :
   o0OO0o0o00o . append ( o0o [ 0 ] )
 return o0OO0o0o00o
 if 100 - 100: i111I / I11i1i11i1I / o0oO0
def oOoOOo0O ( cur , row , listitem , tit ) :
 OOOooo = row [ 0 ]
 OooO0OO = row [ 7 ]
 o0OOo0o0O0O = row [ 8 ]
 o0 = row [ 9 ]
 OO0o0oOOO0O = row [ 12 ]
 iII1i11 = row [ 15 ]
 OOO0000oO = i1 ( OOOooo , cur )
 OooIiIIII1i11I = Ii1I ( OOOooo , cur )
 if 86 - 86: Ii11111i . Iii1I1 - iiiii . iiI1i1 + i1iIii1Ii1II
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : o0OOo0o0O0O , 'director' : OO0o0oOOO0O , 'plot' : o0 , 'genre' : OOO0000oO , 'cast' : OooIiIIII1i11I , 'rating' : iII1i11 } )
 if 57 - 57: OOO0o0o . ii1I . i1IIi11111i * i11iIiiIii + I11i1i11i1I . i1IIi11111i
def O0OoOO0o ( listitem , tit , pid ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 o0o = iI1iII1 . fetchone ( )
 oOoOOo0O ( iI1iII1 , o0o , listitem , tit )
 o000O0o . close ( )
 if 57 - 57: I11i1i11i1I
def I11Iiii1I ( rows = [ ] , tipo2 = False , zid = '' , nota = False , mvta = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 90 - 90: OO0O0O % oo
 if 73 - 73: Iii1I1 * O0Oooo00 + i1iIii1Ii1II + oo
 if 40 - 40: ooO0OO000o . oO0o * I11i1i11i1I + O0Oo0oO0o + O0Oo0oO0o
 if 9 - 9: II1iI % iiiii . i111I % II1iI
 if 32 - 32: i11iIiiIii
 if 31 - 31: OO0O0O / iiI1i1 / o0oO0
 if 41 - 41: Ii11111i
 if 10 - 10: Ii11111i / Ii11111i / I11i1i11i1I . I11i1i11i1I
 if 98 - 98: Ii11111i / I11i11Ii . Iii1I1 + iiI1i1
 if 43 - 43: ooO0OO000o . i111I / o0oO0
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 if 20 - 20: I11i11Ii
 IIIii11 = [ ]
 o0oO000oo = 0
 o00o0 = 0
 for o0o in rows :
  OOOooo = o0o [ 0 ]
  iiIiI = o0o [ 1 ]
  II1I = o0o [ 2 ]
  II1I1I1Ii = o0o [ 3 ]
  iii1i = o0o [ 4 ]
  OOOOoO00o0O = o0o [ 5 ]
  I1I1I1IIi1III = o0o [ 6 ]
  II11IiiIII = o0o [ 7 ]
  o0OOo0o0O0O = o0o [ 8 ]
  o0 = o0o [ 9 ]
  o0OOOo = o0o [ 11 ]
  OO0o0oOOO0O = o0o [ 12 ]
  iII1i11 = o0o [ 15 ]
  ii1iiIiIII1ii = o0o [ 21 ]
  oO0o0oooO0oO = o0o [ 22 ]
  OOO0000oO = i1 ( OOOooo , iI1iII1 )
  OooIiIIII1i11I = Ii1I ( OOOooo , iI1iII1 )
  if 19 - 19: i11iIiiIii + iiiii - Ii11111i - II1iI
  if II11IiiIII != o00o0 :
   o00o0 = II11IiiIII
   o0oO000oo += 1
   if 21 - 21: Iii1I1 % i1IIi11111i . I11i11Ii / ooO0OO000o + i1IIi11111i
  OOOO0O00o = I1I1I1IIi1III
  if ii1iiIiIII1ii == None :
   ii1iiIiIII1ii = o0OOOo
  else :
   if ii1iiIiIII1ii . startswith ( '/' ) :
    ii1iiIiIII1ii = 'https://image.tmdb.org/t/p/w500%s' % ii1iiIiIII1ii
  if oO0o0oooO0oO == None :
   oO0o0oooO0oO = o0OOOo
  else :
   if oO0o0oooO0oO . startswith ( '/' ) :
    oO0o0oooO0oO = 'https://image.tmdb.org/t/p/original%s' % oO0o0oooO0oO
  if OOOOoO00o0O == 'S' :
   if iiIiI == 'sc' :
    I1I1I1IIi1III = '[COLOR lightskyblue]%s (HD)[/COLOR]' % I1I1I1IIi1III
   else :
    I1I1I1IIi1III = '[COLOR khaki]%s (HD)[/COLOR]' % I1I1I1IIi1III
  if OOOOoO00o0O == '3D' :
   I1I1I1IIi1III = '[COLOR limegreen]%s (3D)[/COLOR]' % I1I1I1IIi1III
  if tipo2 :
   I1I1I1IIi1III = '[COLOR orange]%s[/COLOR] %s' % ( o0OOo0o0O0O , I1I1I1IIi1III )
  if nota :
   I1I1I1IIi1III = '%s [COLOR blue](%s)[/COLOR]' % ( I1I1I1IIi1III , iII1i11 )
  if mvta == True :
   I1I1I1IIi1III = '%s. %s' % ( str ( o0oO000oo ) , I1I1I1IIi1III )
  II11IiIi11 = xbmcgui . ListItem ( label = I1I1I1IIi1III , iconImage = o0OOOo )
  oOoOOo0O ( iI1iII1 , o0o , II11IiIi11 , I1I1I1IIi1III )
  II11IiIi11 . setArt ( { 'thumb' : ii1iiIiIII1ii , 'icon' : ii1iiIiIII1ii , 'fanart' : oO0o0oooO0oO } )
  II11IiIi11 . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  II11IiIi11 . setProperty ( 'IsPlayable' , 'true' )
  if 62 - 62: OO0O0O
  if 12 - 12: O0Oo0oO0o / OOO0o0o
  if 42 - 42: Ii11111i
  if 19 - 19: i111I % o0oO0 * OO0O0O + I11i11Ii
  if 46 - 46: Ii11111i
  iiIiI = '%s%s' % ( iiIiI , zid )
  iIo00O = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , iiIiI , II1I , II1I1I1Ii , iii1i , OOOooo , base64 . urlsafe_b64encode ( OOOO0O00o . encode ( 'utf-8' ) ) )
  IIOOO0O00O0OOOO = False
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 o000O0o . close ( )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 1 - 1: O0Oooo00
def O0O0Ooo ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  ii1ii1ii = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i111I1Ii , ii1ii1ii )
  II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=genero2&idgen={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 83 - 83: i11iIiiIii % OOO0o0o % oo
def Ii1II1I11i1 ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , nota = True )
 if 59 - 59: i111I % OO0O0O . ii1I
def iiIi1i ( idtem ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , nota = True )
 if 27 - 27: O0Oo0oO0o * oo . I11i1i11i1I % i1IIi11111i * i1IIi11111i . ii1I
def O0OOoOOO0oO ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 )
 if 28 - 28: oo + i11iIiiIii / II1iI % oO0o % Ii11111i - Iii1I1
def ooo0OOO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  ii1ii1ii = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i111I1Ii , ii1ii1ii )
  II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=tema2&idtem={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 49 - 49: i11iIiiIii % i1iIii1Ii1II . oO0o
def Ii1i1iI ( idtem ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 )
 if 16 - 16: O0Oo0oO0o / Ii11111i / iiiii * I11i11Ii + ii1I % O0Oo0oO0o
def ooo0o00 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 for o0o in O0 :
  ooO = o0o [ 0 ]
  ii1ii1ii = o0o [ 1 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( ooO , ii1ii1ii )
  II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=anno2&anno={1}' . format ( Oo , ooO )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 74 - 74: I11i11Ii
def o0o0oOoOO0O ( anno ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 )
 if 16 - 16: i1IIi11111i % OO0O0O . i1iIii1Ii1II
def oooooOOO000Oo ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  ii1ii1ii = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i111I1Ii , ii1ii1ii )
  II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 52 - 52: ooO0OO000o % i1IIi11111i . oO0o * OO0O0O
def I111i1II ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 = o000O0o . cursor ( )
 if 69 - 69: i1iIii1Ii1II * Iii1I1 . i11iIiiIii / i1iIii1Ii1II . OOO0o0o
 if 63 - 63: II1iI + OOO0o0o . ooO0OO000o - I11i11Ii
 if 52 - 52: OOO0o0o % Ii11111i
 iI1iII1 . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 for o0o in O0 :
  Oo000ooOOO = o0o [ 0 ]
  ii1ii1ii = o0o [ 1 ]
  Ii11i1I11i = base64 . urlsafe_b64encode ( Oo000ooOOO . encode ( 'utf-8' ) )
  if Oo000ooOOO . encode ( 'utf-8' ) == 'España' :
   Oo000ooOOO = 'ESPAÑA' . decode ( 'utf-8' )
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( Oo000ooOOO , ii1ii1ii )
  II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=pais2&pais={1}' . format ( Oo , Ii11i1I11i )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 13 - 13: i1IIi11111i / i11iIiiIii % ooO0OO000o % II1iI . o0oO0
def iIIIii ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  iI1iII1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( OOo0 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  IIIii11 = [ ]
  for o0o in O0 :
   oOoO0 = o0o [ 0 ]
   iI1i111I1Ii = o0o [ 1 ]
   ii1ii1ii = o0o [ 2 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i111I1Ii , ii1ii1ii )
   II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oOoO0 )
   IIOOO0O00O0OOOO = True
   IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
  xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 25 - 25: iiiii + i1IIi11111i * o0oO0
def OoO0ooO ( idgru ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , True )
 if 51 - 51: O0Oooo00 / oo * oO0o . O0Oooo00 / o0oO0 / i11iIiiIii
def IIIII ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , True )
 if 78 - 78: i1iIii1Ii1II * ii1I
def iI11 ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  iI1iII1 . execute ( "Select * from pelis where grupo like ? order by grupo" , ( OOo0 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  I11Iiii1I ( O0 )
  if 96 - 96: O0Oo0oO0o
def OOo ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  iI1iII1 . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( OOo0 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  IIIii11 = [ ]
  for o0o in O0 :
   OO0o0oOOO0O = o0o [ 0 ] . encode ( 'utf-8' )
   ii1ii1ii = o0o [ 1 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OO0o0oOOO0O , ii1ii1ii )
   II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=busdir2&director={1}' . format ( Oo , OO0o0oOOO0O )
   IIOOO0O00O0OOOO = True
   IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
  xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 50 - 50: oo
def o0O0O0ooo0oOO ( director ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , True )
 if 97 - 97: I11i11Ii / O0Oooo00
def Oooo0 ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  iI1iII1 . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( OOo0 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  IIIii11 = [ ]
  for o0o in O0 :
   oOO = o0o [ 0 ]
   o0OO0o0o00o = o0o [ 1 ]
   ii1ii1ii = o0o [ 2 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( o0OO0o0o00o , ii1ii1ii )
   II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=busact2&idact={1}' . format ( Oo , oOO )
   IIOOO0O00O0OOOO = True
   IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
  xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 54 - 54: I11i11Ii / OO0O0O / O0Oo0oO0o . O0Oo0oO0o % O0Oooo00 . I11i11Ii
def iI1i1i ( idact ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , True )
 if 41 - 41: ii1I % O0Oooo00 + OO0O0O
def Ii1IIIIi1ii1I ( ) :
 import datetime
 ooO = datetime . datetime . now ( ) . year
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( ooO - 1 , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , False )
 if 13 - 13: I11i11Ii % oO0o . o0oO0 / Ii11111i % O0Oo0oO0o . iiiii
def i1iIi ( ) :
 import datetime
 ooO = datetime . datetime . now ( ) . year
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( ooO - 1 , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , False )
 if 30 - 30: Iii1I1 - OO0O0O / iiiii
def O0000OOO0 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 if 51 - 51: I11i11Ii / i1IIi11111i / i1iIii1Ii1II
 iI1iII1 . execute ( "SELECT * FROM pelis where vta>0 order by vta DESC,HD;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , False , mvta = True )
 if 6 - 6: i1iIii1Ii1II - oo * O0Oo0oO0o . O0Oooo00 / Iii1I1 * oo
def II11iI111i1 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis where HD='S' or HD='3D' order by id DESC LIMIT(100);" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , False )
 if 95 - 95: iiiii - i1IIi11111i * I11i11Ii + oO0o
def iIi1 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select id,genero from generos order by genero2;" )
 O0 = iI1iII1 . fetchall ( )
 IIIii11 = [ ]
 Oo0 = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 IIOOO0O00O0OOOO = False
 IIIii11 . append ( ( '' , II11IiIi11 , IIOOO0O00O0OOOO ) )
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  II11IiIi11 = xbmcgui . ListItem ( label = iI1i111I1Ii , iconImage = '' )
  iIo00O = '{0}?action=TopGen&idgen={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 iI1iII1 . execute ( "Select id,tema from temas order by tema2;" )
 O0 = iI1iII1 . fetchall ( )
 Oo0 = '[COLOR gold]*** TEMAS ***[/COLOR]'
 II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 IIOOO0O00O0OOOO = False
 IIIii11 . append ( ( '' , II11IiIi11 , IIOOO0O00O0OOOO ) )
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  II11IiIi11 = xbmcgui . ListItem ( label = iI1i111I1Ii , iconImage = '' )
  iIo00O = '{0}?action=TopTem&idtem={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 o000O0o . close ( )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 21 - 21: II1iI
def OoO00 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select id,genero from generos order by genero2;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 IIIii11 = [ ]
 Oo0 = '[COLOR gold]Selecciona un género[/COLOR]'
 II11IiIi11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 IIOOO0O00O0OOOO = False
 IIIii11 . append ( ( '' , II11IiIi11 , IIOOO0O00O0OOOO ) )
 for o0o in O0 :
  oOoO0 = o0o [ 0 ]
  iI1i111I1Ii = o0o [ 1 ]
  II11IiIi11 = xbmcgui . ListItem ( label = iI1i111I1Ii , iconImage = '' )
  iIo00O = '{0}?action=pelrec2&idgen={1}' . format ( Oo , oOoO0 )
  IIOOO0O00O0OOOO = True
  IIIii11 . append ( ( iIo00O , II11IiIi11 , IIOOO0O00O0OOOO ) )
 xbmcplugin . addDirectoryItems ( o0O , IIIii11 , len ( IIIii11 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 85 - 85: Ii11111i * Ii11111i * I11i11Ii . iiiii . i1iIii1Ii1II * oo
def o000oOoo0o000 ( idgen ) :
 IiI11iI1i1i1i = sqlite3 . connect ( IiI )
 oO0Ooooooo = IiI11iI1i1i1i . cursor ( )
 oO0Ooooooo . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 39 - 39: i1IIi11111i * Ii11111i + OO0O0O - i1IIi11111i + O0Oo0oO0o
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 iI1iII1 . execute ( 'delete from reko;' )
 o000O0o . commit ( )
 iI1iII1 . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 o0iiiI1I1iIIIi1 = [ ]
 O000O0oOO0 = [ ]
 Iii = len ( O0 ) - 1
 from random import randint
 while 1 == 1 :
  I1iiiiI1iI = randint ( 0 , Iii )
  if I1iiiiI1iI not in O000O0oOO0 :
   O000O0oOO0 . append ( I1iiiiI1iI )
   o0o = O0 [ I1iiiiI1iI ]
   iIiiiii1i = o0o [ 1 ]
   oO0Ooooooo . execute ( "SELECT id from vtas where faffid=?;" , ( iIiiiii1i , ) )
   iiIi1IIiI = oO0Ooooooo . fetchone ( )
   if not iiIi1IIiI :
    oO0Ooooooo . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( iIiiiii1i , ) )
    IiI11iI1i1i1i . commit ( )
    i1oO0OO0 = { }
    i1oO0OO0 [ 'grupo' ] = o0o [ 2 ]
    i1oO0OO0 [ 'id' ] = o0o [ 0 ]
    o0iiiI1I1iIIIi1 . append ( i1oO0OO0 )
    if len ( o0iiiI1I1iIIIi1 ) == 10 :
     break
   if len ( O000O0oOO0 ) > Iii :
    oO0Ooooooo . execute ( "DELETE FROM vtas;" )
    IiI11iI1i1i1i . commit ( )
    break
 IiI11iI1i1i1i . close ( )
 o0iiiI1I1iIIIi1 . sort ( key = lambda o0O0Oo00 : o0O0Oo00 [ 'grupo' ] )
 II1I1iiIII = [ ]
 for i1oO0OO0 in o0iiiI1I1iIIIi1 :
  iI1iII1 . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( i1oO0OO0 [ 'id' ] , ) )
  II1I1iiIII . append ( str ( i1oO0OO0 [ 'id' ] ) )
 II1I1iiIII = '_%s' % '.' . join ( II1I1iiIII )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 O0 = iI1iII1 . fetchall ( )
 iI1iII1 . execute ( 'delete from reko;' )
 o000O0o . commit ( )
 o000O0o . close ( )
 I11Iiii1I ( O0 , False , II1I1iiIII )
 if 51 - 51: O0Oo0oO0o % OO0O0O - iiiii % oo * OO0O0O % iiI1i1
def oO0o00oOOooO0 ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 o000O0o . commit ( )
 iI1iII1 . execute ( 'select idpel from reco order by id;' )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 if O0 :
  OOOoO000 = [ ]
  for o0o in O0 :
   OOOoO000 . append ( str ( o0o [ 0 ] ) )
  OOOoO000 = '_%s' % '.' . join ( OOOoO000 )
  if 57 - 57: ooO0OO000o
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  O0 = iI1iII1 . fetchall ( )
  iI1iII1 . execute ( 'delete from reco;' )
  o000O0o . commit ( )
  o000O0o . close ( )
  I11Iiii1I ( O0 , False , OOOoO000 )
 else :
  o000oOoo0o000 ( idgen )
  if 54 - 54: Ii11111i + i111I + i11iIiiIii
def i1i1ii111 ( paramstring ) :
 IiI1i = dict ( parse_qsl ( paramstring ) )
 if IiI1i :
  if IiI1i [ 'action' ] == 'genero' :
   O0O0Ooo ( )
  if IiI1i [ 'action' ] == 'genero2' :
   O0OOoOOO0oO ( IiI1i [ 'idgen' ] )
  if IiI1i [ 'action' ] == 'tema' :
   ooo0OOO ( )
  if IiI1i [ 'action' ] == 'tema2' :
   Ii1i1iI ( IiI1i [ 'idtem' ] )
  elif IiI1i [ 'action' ] == 'anno' :
   ooo0o00 ( )
  elif IiI1i [ 'action' ] == 'shlnk' :
   I1iIIii ( IiI1i [ 'server' ] , IiI1i [ 'user' ] , IiI1i [ 'cole' ] , IiI1i [ 'peli' ] , IiI1i [ 'last' ] )
  elif IiI1i [ 'action' ] == 'anno2' :
   o0o0oOoOO0O ( IiI1i [ 'anno' ] )
  elif IiI1i [ 'action' ] == 'grupo' :
   oooooOOO000Oo ( )
  elif IiI1i [ 'action' ] == 'grupo2' :
   OoO0ooO ( IiI1i [ 'idgru' ] )
  elif IiI1i [ 'action' ] == 'pais' :
   I111i1II ( )
  elif IiI1i [ 'action' ] == 'pais2' :
   IIIII ( IiI1i [ 'pais' ] )
  elif IiI1i [ 'action' ] == 'bustit' :
   iI11 ( )
  elif IiI1i [ 'action' ] == 'busdir' :
   OOo ( )
  elif IiI1i [ 'action' ] == 'busdir2' :
   o0O0O0ooo0oOO ( IiI1i [ 'director' ] )
  elif IiI1i [ 'action' ] == 'busact' :
   Oooo0 ( )
  elif IiI1i [ 'action' ] == 'busact2' :
   iI1i1i ( IiI1i [ 'idact' ] )
  elif IiI1i [ 'action' ] == 'busgru' :
   iIIIii ( )
  elif IiI1i [ 'action' ] == 'ultim' :
   Ii1IIIIi1ii1I ( )
  elif IiI1i [ 'action' ] == 'ultim2' :
   i1iIi ( )
  elif IiI1i [ 'action' ] == 'ulthd' :
   II11iI111i1 ( )
  elif IiI1i [ 'action' ] == 'mvtas' :
   O0000OOO0 ( )
  elif IiI1i [ 'action' ] == 'pelrec' :
   OoO00 ( )
  elif IiI1i [ 'action' ] == 'pelrec2' :
   oO0o00oOOooO0 ( IiI1i [ 'idgen' ] )
  elif IiI1i [ 'action' ] == 'peltop' :
   iIi1 ( )
  elif IiI1i [ 'action' ] == 'TopGen' :
   Ii1II1I11i1 ( IiI1i [ 'idgen' ] )
  elif IiI1i [ 'action' ] == 'TopTem' :
   iiIi1i ( IiI1i [ 'idtem' ] )
  elif IiI1i [ 'action' ] == 'play' :
   O00o0OO0 ( IiI1i [ 'server' ] , IiI1i [ 'user' ] , IiI1i [ 'cole' ] , IiI1i [ 'peli' ] , IiI1i [ 'id' ] , IiI1i [ 'tit' ] )
 else :
  I1ii1iIiii1I ( )
  if 87 - 87: oo
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 i1i1ii111 ( sys . argv [ 2 ] [ 1 : ] )
 if 45 - 45: iiI1i1 / iiiii - O0Oooo00 / i1iIii1Ii1II % i1IIi11111i
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')