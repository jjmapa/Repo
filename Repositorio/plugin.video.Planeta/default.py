import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import urllib
import urllib2
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib , base64
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
IiIiIIII1 = None
try :
 from xml . sax . saxutils import escape
except : traceback . print_exc ( )
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
if 20 - 20: I1Ii + oo00oOoO0o0o / iiiI1iiI1i
try :
 import ssl
 ssl . _create_default_https_context = ssl . _create_unverified_context
except :
 pass
 if 64 - 64: ooo . II1i111iI1ii % O00oo0o * Ooo0OoOo0OOOO
import zipfile
if 25 - 25: oo0OoO
def IiI1i1 ( _in , _out ) :
 try :
  i11Ii = zipfile . ZipFile ( _in , 'r' )
  i11Ii . extractall ( _out )
 except Exception , ii11iI1i :
  print str ( ii11iI1i )
  return False
  if 1 - 1: i11IiI1II + O00O - iiI % IiiIIiII * oO00ooo0o0OO
 return True
 if 40 - 40: II1iiI1ii1iii % O0000O / O000Ooo0o0OOo
 if 54 - 54: OOoOoO0o0o0OO % oO00ooo0o0OO - Ii / oo0OoO . ooo / O000Ooo0o0OOo
 if 61 - 61: i11IiI1II / II1i111iI1ii % OOoOoO0o0o0OO * oOO
def oo0oo0OOoO0o ( ) :
 if os . path . exists ( os . path . join ( xbmc . translatePath ( "special://home/addons/" ) . decode ( "utf-8" ) , 'repository.Maniac' ) ) :
  return
  if 87 - 87: IiiIIiII % II1iiI1ii1iii - oo00oOoO0o0o % O00oo0o % i11IiI1II % II1iiI1ii1iii
 IiI = "http://catoal.org/Repositorios/repository.Maniac.zip"
 i1IiI1iii = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) ) . decode ( "utf-8" )
 iii1II = os . path . join ( i1IiI1iii , 'packages' , 'isr.zip' )
 if 3 - 3: IiiIIiII % O0000O * O000Ooo0o0OOo / II1i111iI1ii * O000Ooo0o0OOo
 urllib . urlretrieve ( IiI , iii1II )
 IiI1i1 ( iii1II , i1IiI1iii )
 if 51 - 51: oo00oOoO0o0o . O000Ooo0o0OOo % OOoOoO0o0o0OO
 try :
  os . remove ( iii1II )
 except :
  pass
  if 31 - 31: O00oo0o / O00oo0o % I1Ii * O000Ooo0o0OOo - I1Ii
 xbmc . executebuiltin ( "UpdateLocalAddons" )
 xbmc . executebuiltin ( "UpdateAddonRepos" )
 if 79 - 79: oo0OoO - oO00ooo0o0OO / IiiIIiII * Ii % O00oo0o
 if 48 - 48: oo00oOoO0o0o % II1i111iI1ii
oo0oo0OOoO0o ( )
ooO0 = False
OO00O00000o = False
OOoo0O = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
IiI1ii1I11iI = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
global IiiiiI1
IiiiiI1 = 0
class iiIoo000OoOOO0Oo ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 73 - 73: IiiIIiII / O00O
oO0o0oO0 = False ;
if oO0o0oO0 :
 if 63 - 63: II1i111iI1ii % II1iiI1ii1iii - O00oo0o
 if 36 - 36: O000Ooo0o0OOo / iiI + oOO / II1iiI1ii1iii + Ii + IIII
 try :
  import pysrc . pydevd as pydevd
  if 59 - 59: O00O / Ooo0OoOo0OOOO + O00O + oO00ooo0o0OO
  pydevd . settrace ( 'localhost' , stdoutToServer = True , stderrToServer = True )
 except ImportError :
  sys . stderr . write ( "Error: " +
 "You must add org.python.pydev.debug.pysrc to your PYTHONPATH." )
  sys . exit ( 1 )
  if 55 - 55: oOO - Ii
Oo00O = xbmcaddon . Addon ( 'plugin.video.Planeta' )
i1i1Iii1I1i = Oo00O . getAddonInfo ( 'version' )
o00 = xbmc . translatePath ( Oo00O . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
I11Iii11i1Ii1 = xbmc . translatePath ( Oo00O . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
iiII = os . path . join ( o00 , 'favorites' )
oooO = os . path . join ( o00 , 'history' )
iII1I1I = os . path . join ( o00 , 'list_revision' )
OO00Ooo0o = os . path . join ( I11Iii11i1Ii1 , 'icon.png' )
oO = "https://i.imgur.com/ASXdqja.png"
ii1iI111iIi1 = os . path . join ( I11Iii11i1Ii1 , 'fanart.jpg' )
O0O = os . path . join ( o00 , 'source_file' )
Oo = o00
if 53 - 53: II1i111iI1ii
iii11i1IIi = os . path . join ( o00 , 'LivewebTV' )
downloader = downloader . SimpleDownloader ( )
i1Iiii11ii = Oo00O . getSetting ( 'debug' )
if os . path . exists ( iiII ) == True :
 IiIiiiI = open ( iiII ) . read ( )
else : IiIiiiI = [ ]
if 23 - 23: O0000O + Ii + O0000O . O00oo0o . II1i111iI1ii * I1Ii
OoOO0 = [ { "url" : "https://raw.githubusercontent.com/Maniac2017/Planeta/master/planeta.xml" , "fanart" : "http://i.imgur.com/nHiO1KH.jpg" } ]
if 45 - 45: oO00ooo0o0OO
if 45 - 45: O00oo0o . Ooo0OoOo0OOOO / i11IiI1II % O000Ooo0o0OOo
def i1iIii ( string ) :
 if i1Iiii11ii == 'true' :
  xbmc . log ( "[addon.Planeta-%s]: %s" % ( i1i1Iii1I1i , string ) )
  if 79 - 79: oo00oOoO0o0o - Ooo0OoOo0OOOO % II1i111iI1ii
  if 39 - 39: oOO - II1i111iI1ii / O0000O . oO00ooo0o0OO . oO00ooo0o0OO . Ii
  if 88 - 88: Ooo0OoOo0OOOO % I1Ii - O0000O
  if 77 - 77: O00O / Ooo0OoOo0OOOO - Ooo0OoOo0OOOO
def O0o ( url , headers = None ) :
 try :
  if headers is None :
   headers = { 'User-agent' : 'NETAI' }
   if 54 - 54: ooo + IIII * IiiIIiII + II1iiI1ii1iii
   if 88 - 88: oo0OoO + OOoOoO0o0o0OO / IiiIIiII - O0000O + Ii
   if 10 - 10: IIII . IIII + oO00ooo0o0OO - Ii - iiiI1iiI1i
   if 74 - 74: Ooo0OoOo0OOOO - oO00ooo0o0OO / O000Ooo0o0OOo
   if 50 - 50: OOoOoO0o0o0OO / iiI / II1iiI1ii1iii . Ii % O00O
   if 36 - 36: i11IiI1II % II1iiI1ii1iii
   if 38 - 38: II1i111iI1ii * Ii
   if 6 - 6: iiI % II1iiI1ii1iii . IiiIIiII + i11IiI1II . iiI % oo0OoO
   if 17 - 17: OOoOoO0o0o0OO - ooo + oo00oOoO0o0o
   if 11 - 11: IiiIIiII + ooo - IiiIIiII
   if 50 - 50: iiiI1iiI1i / oo0OoO - O00oo0o + IiiIIiII . Ii . IIII
  if '|' in url :
   url , iii1iIII1111I = url . split ( '|' )
   iii1iIII1111I = iii1iIII1111I . split ( '&' )
   if 22 - 22: O00O / O0000O
   for IIiI11 in iii1iIII1111I :
    if len ( IIiI11 . split ( '=' ) ) == 2 :
     I1111IIi1i , II1I11I1III1 = IIiI11 . split ( '=' )
    else :
     iIii = IIiI11 . split ( '=' )
     I1111IIi1i = iIii [ 0 ]
     II1I11I1III1 = '=' . join ( iIii [ 1 : ] )
     if 54 - 54: OOoOoO0o0o0OO - ooo - i11IiI1II % I1Ii
    print I1111IIi1i , II1I11I1III1
    headers [ I1111IIi1i ] = II1I11I1III1
    if 21 - 21: IiiIIiII * I1Ii . Ii
  o0OOoo0 = urllib2 . Request ( url , None , headers )
  ii1Ii = urllib2 . urlopen ( o0OOoo0 )
  OOOO0 = ii1Ii . read ( )
  ii1Ii . close ( )
  return OOOO0
 except urllib2 . URLError , ii11iI1i :
  i1iIii ( 'URL: ' + url )
  if hasattr ( ii11iI1i , 'code' ) :
   i1iIii ( 'We failed with error code - %s.' % ii11iI1i . code )
   xbmc . executebuiltin ( "XBMC.Notification(Planeta,We failed with error code - " + str ( ii11iI1i . code ) + ",10000," + OO00Ooo0o + ")" )
   if 42 - 42: IiiIIiII * i11IiI1II . O00O + IIII * OOoOoO0o0o0OO
  elif hasattr ( ii11iI1i , 'reason' ) :
   i1iIii ( 'We failed to reach a server.' )
   i1iIii ( 'Reason: %s' % ii11iI1i . reason )
   xbmc . executebuiltin ( "XBMC.Notification(Planeta,We failed to reach a server. - " + str ( ii11iI1i . reason ) + ",10000," + OO00Ooo0o + ")" )
   if 77 - 77: IIII . iiiI1iiI1i
   if 94 - 94: ooo + i11IiI1II
   if 56 - 56: O0000O % O00O . I1Ii / II1i111iI1ii
   if 26 - 26: O0000O . IIII % IiiIIiII
def I1IiI1ii1i1i1 ( ) :
 try :
  if os . path . exists ( iiII ) == True :
   IiIiiiI = open ( iiII ) . read ( )
   if IiIiiiI == "[]" :
    os . remove ( iiII )
   else :
    if 23 - 23: I1Ii / oOO / O00O - O000Ooo0o0OOo - iiI % iiI
    OO0OoOoO00 ( '[COLOR orange]Favoritos[/COLOR]' , 'url' , 4 , oO , ii1iI111iIi1 , '' , '' , '' , '' )
    if 2 - 2: O0000O - iiiI1iiI1i - I1Ii % iiI
  o0OooOO000 = OoOO0
  if 27 - 27: Ii
  if len ( o0OooOO000 ) > 1 :
   for o0O0Oo00 in o0OooOO000 :
    try :
     if 29 - 29: I1Ii - ooo % II1iiI1ii1iii / I1Ii * O0000O % I1Ii
     if isinstance ( o0O0Oo00 , list ) :
      OO0OoOoO00 ( o0O0Oo00 [ 0 ] . encode ( 'utf-8' ) , o0O0Oo00 [ 1 ] . encode ( 'utf-8' ) , 1 , OO00Ooo0o , ii1iI111iIi1 , '' , '' , '' , '' , 'source' )
     else :
      ooOO00O = OO00Ooo0o
      i1Ii1 = ii1iI111iIi1
      O00 = ''
      I1iIi1 = ''
      OoOo0O0OO00O = 'Catner'
      o000 = ''
      if o0O0Oo00 . has_key ( 'thumbnail' ) :
       ooOO00O = o0O0Oo00 [ 'thumbnail' ]
      if o0O0Oo00 . has_key ( 'fanart' ) :
       i1Ii1 = o0O0Oo00 [ 'fanart' ]
      if o0O0Oo00 . has_key ( 'description' ) :
       O00 = o0O0Oo00 [ 'description' ]
      if o0O0Oo00 . has_key ( 'date' ) :
       I1iIi1 = o0O0Oo00 [ 'date' ]
      if o0O0Oo00 . has_key ( 'genre' ) :
       o000 = o0O0Oo00 [ 'genre' ]
      if o0O0Oo00 . has_key ( 'credits' ) :
       OoOo0O0OO00O = o0O0Oo00 [ 'credits' ]
      OO0OoOoO00 ( o0O0Oo00 [ 'title' ] . encode ( 'utf-8' ) , o0O0Oo00 [ 'url' ] . encode ( 'utf-8' ) , 1 , ooOO00O , i1Ii1 , O00 , o000 , I1iIi1 , OoOo0O0OO00O , 'source' )
    except : traceback . print_exc ( )
  else :
   if len ( o0OooOO000 ) == 1 :
    if isinstance ( o0OooOO000 [ 0 ] , list ) :
     Oooooo0OO ( o0OooOO000 [ 0 ] [ 1 ] . encode ( 'utf-8' ) , ii1iI111iIi1 )
    else :
     Oooooo0OO ( o0OooOO000 [ 0 ] [ 'url' ] , o0OooOO000 [ 0 ] [ 'fanart' ] )
 except : traceback . print_exc ( )
 if 53 - 53: Ooo0OoOo0OOOO - I1Ii / O00oo0o - i11IiI1II % Ooo0OoOo0OOOO
def oOoo0o0OoO ( url = None ) :
 if url is None :
  if not Oo00O . getSetting ( "new_file_source" ) == "" :
   OOO00Oo00OooO = Oo00O . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not Oo00O . getSetting ( "new_url_source" ) == "" :
   OOO00Oo00OooO = Oo00O . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  OOO00Oo00OooO = url
 if OOO00Oo00OooO == '' or OOO00Oo00OooO is None :
  return
 i1iIii ( 'Adding New Source: ' + OOO00Oo00OooO . encode ( 'utf-8' ) )
 if 27 - 27: IIII . IIII % OOoOoO0o0o0OO
 oooi1I = None
 if 66 - 66: II1i111iI1ii . i11IiI1II
 OOOO0 = oO0OO ( OOO00Oo00OooO )
 if 22 - 22: iiI / ooo - O000Ooo0o0OOo
 if isinstance ( OOOO0 , BeautifulSOAP ) :
  if OOOO0 . find ( 'channels_info' ) :
   oooi1I = OOOO0 . channels_info
  elif OOOO0 . find ( 'items_info' ) :
   oooi1I = OOOO0 . items_info
 if oooi1I :
  iiIiIiiiI = { }
  iiIiIiiiI [ 'url' ] = OOO00Oo00OooO
  try : iiIiIiiiI [ 'title' ] = oooi1I . title . string
  except : pass
  try : iiIiIiiiI [ 'thumbnail' ] = oooi1I . thumbnail . string
  except : pass
  try : iiIiIiiiI [ 'fanart' ] = oooi1I . fanart . string
  except : pass
  try : iiIiIiiiI [ 'genre' ] = oooi1I . genre . string
  except : pass
  try : iiIiIiiiI [ 'description' ] = oooi1I . description . string
  except : pass
  try : iiIiIiiiI [ 'date' ] = oooi1I . date . string
  except : pass
  try : iiIiIiiiI [ 'credits' ] = oooi1I . credits . string
  except : pass
 else :
  if '/' in OOO00Oo00OooO :
   I1I = OOO00Oo00OooO . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in OOO00Oo00OooO :
   I1I = OOO00Oo00OooO . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in I1I :
   I1I = urllib . unquote_plus ( I1I )
  oo0O = xbmc . Keyboard ( I1I , 'Displayed Name, Rename?' )
  oo0O . doModal ( )
  if ( oo0O . isConfirmed ( ) == False ) :
   return
  IIi1i = oo0O . getText ( )
  if len ( IIi1i ) == 0 :
   return
  iiIiIiiiI = { }
  iiIiIiiiI [ 'title' ] = IIi1i
  iiIiIiiiI [ 'url' ] = OOO00Oo00OooO
  iiIiIiiiI [ 'fanart' ] = i1Ii1
  if 6 - 6: O0000O
 if os . path . exists ( O0O ) == False :
  O0O000o = [ ]
  O0O000o . append ( iiIiIiiiI )
  iIIiIII1i = open ( O0O , "w" )
  iIIiIII1i . write ( json . dumps ( O0O000o ) )
  iIIiIII1i . close ( )
 else :
  o0OooOO000 = json . loads ( open ( O0O , "r" ) . read ( ) )
  o0OooOO000 . append ( iiIiIiiiI )
  iIIiIII1i = open ( O0O , "w" )
  iIIiIII1i . write ( json . dumps ( o0OooOO000 ) )
  iIIiIII1i . close ( )
 Oo00O . setSetting ( 'new_url_source' , "" )
 Oo00O . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(Planeta,New source added.,5000," + OO00Ooo0o + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : Oo00O . openSettings ( )
 if 9 - 9: O00oo0o . O00oo0o
def ii ( name ) :
 o0OooOO000 = json . loads ( open ( O0O , "r" ) . read ( ) )
 for I1Ii1iiI11i1 in range ( len ( o0OooOO000 ) ) :
  if isinstance ( o0OooOO000 [ I1Ii1iiI11i1 ] , list ) :
   if o0OooOO000 [ I1Ii1iiI11i1 ] [ 0 ] == name :
    del o0OooOO000 [ I1Ii1iiI11i1 ]
    iIIiIII1i = open ( O0O , "w" )
    iIIiIII1i . write ( json . dumps ( o0OooOO000 ) )
    iIIiIII1i . close ( )
    break
  else :
   if o0OooOO000 [ I1Ii1iiI11i1 ] [ 'title' ] == name :
    del o0OooOO000 [ I1Ii1iiI11i1 ]
    iIIiIII1i = open ( O0O , "w" )
    iIIiIII1i . write ( json . dumps ( o0OooOO000 ) )
    iIIiIII1i . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 27 - 27: oo0OoO + ooo - iiI
def ooO0o0oO0o ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 oo00ooO0O0 = BeautifulSoup ( O0o ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for o0O0Oo00 in oo00ooO0O0 ( 'a' ) :
  OOoO = o0O0Oo00 [ 'href' ]
  if not OOoO . startswith ( '?' ) :
   iII1Ii1ii11 = o0O0Oo00 . string
   if iII1Ii1ii11 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if OOoO . endswith ( '/' ) :
     if browse :
      OO0OoOoO00 ( iII1Ii1ii11 , url + OOoO , 15 , OO00Ooo0o , i1Ii1 , '' , '' , '' )
     else :
      OO0OoOoO00 ( iII1Ii1ii11 , url + OOoO , 14 , OO00Ooo0o , i1Ii1 , '' , '' , '' )
    elif OOoO . endswith ( '.xml' ) :
     if browse :
      OO0OoOoO00 ( iII1Ii1ii11 , url + OOoO , 1 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( O0O ) == True :
       if iII1Ii1ii11 in OoOO0 :
        OO0OoOoO00 ( iII1Ii1ii11 + ' (in use)' , url + OOoO , 11 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
       else :
        OO0OoOoO00 ( iII1Ii1ii11 , url + OOoO , 11 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
      else :
       OO0OoOoO00 ( iII1Ii1ii11 , url + OOoO , 11 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
       if 15 - 15: iiI - II1iiI1ii1iii / II1i111iI1ii . oo00oOoO0o0o - II1i111iI1ii + O00oo0o
       if 17 - 17: II1iiI1ii1iii - O000Ooo0o0OOo + O00O * O000Ooo0o0OOo
def OooO0OOo0 ( browse = False ) :
 IiI = 'http://community-links.googlecode.com/svn/trunk/'
 oo00ooO0O0 = BeautifulSoup ( O0o ( IiI ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 iIiIIii1 = oo00ooO0O0 ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for o0O0Oo00 in iIiIIii1 :
  iII1Ii1ii11 = o0O0Oo00 ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   OO0OoOoO00 ( iII1Ii1ii11 , IiI + iII1Ii1ii11 , 1 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
  else :
   OO0OoOoO00 ( iII1Ii1ii11 , IiI + iII1Ii1ii11 , 11 , OO00Ooo0o , i1Ii1 , '' , '' , '' , '' , 'download' )
   if 46 - 46: I1Ii * O00oo0o + I1Ii
def oO0OO ( url , data = None ) :
 global IiIiIIII1 , ooO0 , OO00O00000o
 ooO0 = False
 OO00O00000o = False
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  i1II1IiI1iI = False
  if '$$TSDOWNLOADER$$' in url :
   ooO0 = True
   url = url . replace ( "$$TSDOWNLOADER$$" , "" )
  if '$$HLSRETRY$$' in url :
   OO00O00000o = True
   url = url . replace ( "$$HLSRETRY$$" , "" )
  if '$$LSProEncKey=' in url :
   i1II1IiI1iI = url . split ( '$$LSProEncKey=' ) [ 1 ] . split ( '$$' ) [ 0 ]
   iI = '$$LSProEncKey=%s$$' % i1II1IiI1iI
   url = url . replace ( iI , "" )
   if 4 - 4: O0000O / OOoOoO0o0o0OO - IiiIIiII - oO00ooo0o0OO
  data = O0o ( url )
  if i1II1IiI1iI :
   import pyaes
   i1II1IiI1iI = i1II1IiI1iI . encode ( "ascii" )
   print i1II1IiI1iI
   I1iiI1IIIiIi = 16 - len ( i1II1IiI1iI )
   i1II1IiI1iI = i1II1IiI1iI + ( chr ( 0 ) * ( I1iiI1IIIiIi ) )
   print repr ( i1II1IiI1iI )
   data = base64 . b64decode ( data )
   iI1iI1I1 = pyaes . new ( i1II1IiI1iI , pyaes . MODE_ECB , IV = None )
   data = iI1iI1I1 . decrypt ( data ) . split ( '\0' ) [ 0 ]
   if 100 - 100: O00oo0o . Ii - OOoOoO0o0o0OO - II1i111iI1ii - i11IiI1II
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   if 6 - 6: O00O % OOoOoO0o0o0OO + ooo * I1Ii
   return data
 elif data == None :
  if not '/' in url or not '\\' in url :
   if 45 - 45: O00O / Ii % ooo
   url = os . path . join ( iii11i1IIi , url )
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    copy = xbmcvfs . copy ( url , os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) )
    if copy :
     data = open ( os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) )
    else :
     i1iIii ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     if 64 - 64: OOoOoO0o0o0OO . I1Ii % IIII
     return data
  else :
   i1iIii ( "Soup Data not found!" )
   return
 if '<SetViewMode>' in data :
  try :
   IiIiIIII1 = re . findall ( '<SetViewMode>(.*?)<' , data ) [ 0 ]
   xbmc . executebuiltin ( "Container.SetViewMode(%s)" % IiIiIIII1 )
   print 'done setview' , IiIiIIII1
  except : pass
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 16 - 16: O00O * iiiI1iiI1i * iiiI1iiI1i
def oooo0o ( data ) :
 try :
  if data and len ( data ) > 0 and data . startswith ( '$pyFunction:' ) :
   data = ooOO ( data . split ( '$pyFunction:' ) [ 1 ] , '' , None , None )
 except : pass
 if 14 - 14: II1i111iI1ii * O00O + II1i111iI1ii % IiiIIiII - IiiIIiII
 return data
 if 59 - 59: O000Ooo0o0OOo * ooo + O000Ooo0o0OOo * ooo / O00O * II1i111iI1ii
def Oooooo0OO ( url , fanart , data = None ) :
 import checkbad
 checkbad . do_block_check ( False )
 oo00ooO0O0 = oO0OO ( url , data )
 if 16 - 16: I1Ii % iiI + I1Ii % I1Ii
 if isinstance ( oo00ooO0O0 , BeautifulSOAP ) :
  if 63 - 63: O00O / ooo - oo0OoO . II1i111iI1ii / i11IiI1II
  if len ( oo00ooO0O0 ( 'channels' ) ) > 0 and Oo00O . getSetting ( 'donotshowbychannels' ) == 'false' :
   iI1111Ii1IIi = oo00ooO0O0 ( 'channel' )
   for IIi1I11I1IiiI in iI1111Ii1IIi :
    if 89 - 89: IIII
    if 86 - 86: IiiIIiII % Ooo0OoOo0OOOO * I1Ii * O00oo0o
    i11ii = ''
    o0oOOOO0Oo = 0
    try :
     i11ii = IIi1I11I1IiiI ( 'externallink' ) [ 0 ] . string
     o0oOOOO0Oo = len ( IIi1I11I1IiiI ( 'externallink' ) )
    except : pass
    if 64 - 64: IIII . OOoOoO0o0o0OO % iiI / i11IiI1II % O00oo0o
    if o0oOOOO0Oo > 1 : i11ii = ''
    if 60 - 60: O00oo0o * OOoOoO0o0o0OO % iiI % Ii . II1i111iI1ii
    iII1Ii1ii11 = IIi1I11I1IiiI ( 'name' ) [ 0 ] . string
    try :
     iII1Ii1ii11 = oooo0o ( iII1Ii1ii11 )
    except : pass
    I11iI = IIi1I11I1IiiI ( 'thumbnail' ) [ 0 ] . string
    if I11iI == None :
     I11iI = ''
    I11iI = oooo0o ( I11iI )
    try :
     if not IIi1I11I1IiiI ( 'fanart' ) :
      if Oo00O . getSetting ( 'use_thumb' ) == "true" :
       i111 = I11iI
      else :
       i111 = fanart
     else :
      i111 = IIi1I11I1IiiI ( 'fanart' ) [ 0 ] . string
     if i111 == None :
      raise
    except :
     i111 = fanart
     if 98 - 98: II1iiI1ii1iii % I1Ii / iiI / O0000O
    try :
     O00 = IIi1I11I1IiiI ( 'info' ) [ 0 ] . string
     if O00 == None :
      raise
    except :
     O00 = ''
     if 57 - 57: IIII . I1Ii
    try :
     o000 = IIi1I11I1IiiI ( 'genre' ) [ 0 ] . string
     if o000 == None :
      raise
    except :
     o000 = ''
     if 53 - 53: IIII + iiI * O00oo0o . oOO - O00O . IIII
    try :
     I1iIi1 = IIi1I11I1IiiI ( 'date' ) [ 0 ] . string
     if I1iIi1 == None :
      raise
    except :
     I1iIi1 = ''
     if 80 - 80: Ii - oO00ooo0o0OO % II1iiI1ii1iii / iiI * II1iiI1ii1iii + Ooo0OoOo0OOOO
    try :
     OoOo0O0OO00O = IIi1I11I1IiiI ( 'credits' ) [ 0 ] . string
     if OoOo0O0OO00O == None :
      raise
    except :
     OoOo0O0OO00O = ''
     if 35 - 35: oo0OoO % IIII
    try :
     if i11ii == '' :
      OO0OoOoO00 ( iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , I11iI , i111 , O00 , o000 , I1iIi1 , OoOo0O0OO00O , True )
     else :
      if 90 - 90: oO00ooo0o0OO + i11IiI1II / Ooo0OoOo0OOOO
      OO0OoOoO00 ( iII1Ii1ii11 . encode ( 'utf-8' ) , i11ii . encode ( 'utf-8' ) , 1 , I11iI , i111 , O00 , o000 , I1iIi1 , None , 'source' )
    except :
     i1iIii ( 'There was a problem adding directory from getData(): ' + iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) )
  else :
   i1iIii ( 'No Channels: getItems' )
   iiii ( oo00ooO0O0 ( 'item' ) , fanart )
 else :
  iI11IIi11 ( oo00ooO0O0 )
  if 27 - 27: oOO
  if 78 - 78: O000Ooo0o0OOo . IIII . oo0OoO
def iI11IIi11 ( data ) :
 iii11 = data . rstrip ( )
 oOOOoo = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\r\n]+)' ) . findall ( iii11 )
 oo0OO0Oo0 = len ( oOOOoo )
 print 'tsdownloader' , ooO0
 if 83 - 83: IIII * IIII
 for IIIi1I111iI1 , OOO0 , oo0o0ooO in oOOOoo :
  if 20 - 20: oo00oOoO0o0o % oo0OoO / IIII
  if 'tvg-logo' in IIIi1I111iI1 :
   I11iI = oOiiIIIiIi111i ( IIIi1I111iI1 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if I11iI :
    if I11iI . startswith ( 'http' ) :
     I11iI = I11iI
     if 4 - 4: oo00oOoO0o0o . O00O + Ii - II1i111iI1ii
    elif not Oo00O . getSetting ( 'logo-folderPath' ) == "" :
     I1IiII = Oo00O . getSetting ( 'logo-folderPath' )
     I11iI = I1IiII + I11iI
     if 100 - 100: ooo * Ii + Ooo0OoOo0OOOO + i11IiI1II
    else :
     I11iI = I11iI
     if 48 - 48: I1Ii % IiiIIiII
     if 31 - 31: Ooo0OoOo0OOOO . IiiIIiII . IiiIIiII
  else :
   I11iI = ''
   if 74 - 74: IIII * Ii * oo00oOoO0o0o - ooo
  if 'type' in IIIi1I111iI1 :
   i1iIIIiii1 = oOiiIIIiIi111i ( IIIi1I111iI1 , 'type=[\'"](.*?)[\'"]' )
   if i1iIIIiii1 == 'yt-dl' :
    oo0o0ooO = oo0o0ooO + "&mode=18"
   elif i1iIIIiii1 == 'regex' :
    IiI = oo0o0ooO . split ( '&regexs=' )
    if 27 - 27: Ii % Ii - oOO - O0000O
    iI1i1iIII1II = O0O0oOOO0O00 ( oO0OO ( '' , data = IiI [ 1 ] ) )
    if 26 - 26: II1iiI1ii1iii - Ii . II1i111iI1ii / oO00ooo0o0OO + O00O % ooo
    IiiiI11I ( IiI [ 0 ] , OOO0 , I11iI , '' , '' , '' , '' , '' , None , iI1i1iIII1II , oo0OO0Oo0 )
    continue
   elif i1iIIIiii1 == 'ftv' :
    oo0o0ooO = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( OOO0 ) + '&url=' + oo0o0ooO + '&mode=125&ch_fanart=na'
  elif ooO0 and '.ts' in oo0o0ooO :
   oo0o0ooO = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( oo0o0ooO ) + '&amp;streamtype=TSDOWNLOADER&name=' + urllib . quote ( OOO0 )
  elif OO00O00000o and '.m3u8' in oo0o0ooO :
   oo0o0ooO = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( oo0o0ooO ) + '&amp;streamtype=HLSRETRY&name=' + urllib . quote ( OOO0 )
  IiiiI11I ( oo0o0ooO , OOO0 , I11iI , '' , '' , '' , '' , '' , None , '' , oo0OO0Oo0 )
def I11i1Ii ( name , url , fanart ) :
 oo00ooO0O0 = oO0OO ( url )
 Iii1 = oo00ooO0O0 . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 items = Iii1 ( 'item' )
 try :
  i111 = Iii1 ( 'fanart' ) [ 0 ] . string
  if i111 == None :
   raise
 except :
  i111 = fanart
 for IIi1I11I1IiiI in Iii1 ( 'subchannel' ) :
  name = IIi1I11I1IiiI ( 'name' ) [ 0 ] . string
  try :
   name = oooo0o ( name )
  except : pass
  try :
   I11iI = IIi1I11I1IiiI ( 'thumbnail' ) [ 0 ] . string
   if I11iI == None :
    raise
   I11iI = oooo0o ( I11iI )
  except :
   I11iI = ''
  try :
   if not IIi1I11I1IiiI ( 'fanart' ) :
    if Oo00O . getSetting ( 'use_thumb' ) == "true" :
     i111 = I11iI
   else :
    i111 = IIi1I11I1IiiI ( 'fanart' ) [ 0 ] . string
   if i111 == None :
    raise
  except :
   pass
  try :
   O00 = IIi1I11I1IiiI ( 'info' ) [ 0 ] . string
   if O00 == None :
    raise
  except :
   O00 = ''
   if 62 - 62: O000Ooo0o0OOo
  try :
   o000 = IIi1I11I1IiiI ( 'genre' ) [ 0 ] . string
   if o000 == None :
    raise
  except :
   o000 = ''
   if 53 - 53: oOO % IiiIIiII % II1iiI1ii1iii * ooo - i11IiI1II % I1Ii
  try :
   I1iIi1 = IIi1I11I1IiiI ( 'date' ) [ 0 ] . string
   if I1iIi1 == None :
    raise
  except :
   I1iIi1 = ''
   if 44 - 44: Ooo0OoOo0OOOO % oO00ooo0o0OO . IiiIIiII
  try :
   OoOo0O0OO00O = IIi1I11I1IiiI ( 'credits' ) [ 0 ] . string
   if OoOo0O0OO00O == None :
    raise
  except :
   OoOo0O0OO00O = ''
   if 4 - 4: O00O . ooo . O000Ooo0o0OOo - I1Ii + I1Ii * O00oo0o
  try :
   OO0OoOoO00 ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , I11iI , i111 , O00 , o000 , OoOo0O0OO00O , I1iIi1 )
  except :
   i1iIii ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 iiii ( items , i111 )
 if 46 - 46: iiiI1iiI1i / oOO - oOO + O00O
 if 16 - 16: IiiIIiII
def OO ( name , url , fanart ) :
 oo00ooO0O0 = oO0OO ( url )
 Iii1 = oo00ooO0O0 . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 items = Iii1 ( 'subitem' )
 iiii ( items , fanart )
 if 59 - 59: ooo - OOoOoO0o0o0OO * oo0OoO + oo0OoO * IIII * ooo
def iiii ( items , fanart , dontLink = False ) :
 oo0OO0Oo0 = len ( items )
 i1iIii ( 'Total Items: %s' % oo0OO0Oo0 )
 Ii1 = Oo00O . getSetting ( 'add_playlist' )
 OooO0OOoo0O0 = Oo00O . getSetting ( 'ask_playlist_items' )
 iIiiiI = Oo00O . getSetting ( 'use_thumb' )
 OoOo0O = Oo00O . getSetting ( 'parentalblocked' )
 OoOo0O = OoOo0O == "true"
 for iIiI in items :
  i1i11 = False
  iiIII1Iiii1iI = False
  if 91 - 91: Ooo0OoOo0OOOO + oo00oOoO0o0o - Ii - oo0OoO * II1iiI1ii1iii * O0000O
  OOO0oo = 'false'
  try :
   OOO0oo = iIiI ( 'parentalblock' ) [ 0 ] . string
  except :
   i1iIii ( 'parentalblock Error' )
   OOO0oo = ''
  if OOO0oo == 'true' and OoOo0O : continue
  if 92 - 92: II1iiI1ii1iii . iiiI1iiI1i
  try :
   iII1Ii1ii11 = iIiI ( 'title' ) [ 0 ] . string
   if iII1Ii1ii11 is None :
    iII1Ii1ii11 = 'unknown?'
   try :
    iII1Ii1ii11 = oooo0o ( iII1Ii1ii11 )
   except : pass
   if 98 - 98: O00O
  except :
   i1iIii ( 'Name Error' )
   iII1Ii1ii11 = ''
   if 92 - 92: Ooo0OoOo0OOOO - II1i111iI1ii * Ii
   if 97 - 97: ooo % I1Ii - iiI / O00oo0o * oOO % iiI
  try :
   if iIiI ( 'epg' ) :
    if iIiI . epg_url :
     i1iIii ( 'Get EPG Regex' )
     I1IiI1111111 = iIiI . epg_url . string
     Ii11I11Ii11I = iIiI . epg_regex . string
     oooOO0OO0 = II1II1I11 ( I1IiI1111111 , Ii11I11Ii11I )
     if oooOO0OO0 :
      iII1Ii1ii11 += ' - ' + oooOO0OO0
    elif iIiI ( 'epg' ) [ 0 ] . string > 1 :
     iII1Ii1ii11 += I1IiiiIIIII1 ( iIiI ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   i1iIii ( 'EPG Error' )
  try :
   IiI = [ ]
   if len ( iIiI ( 'link' ) ) > 0 :
    if 6 - 6: oOO % II1iiI1ii1iii * O000Ooo0o0OOo . II1i111iI1ii
    if 74 - 74: O0000O
    for o0O0Oo00 in iIiI ( 'link' ) :
     if not o0O0Oo00 . string == None :
      IiI . append ( o0O0Oo00 . string )
      if 99 - 99: oo00oOoO0o0o + i11IiI1II % oo0OoO . oOO
   elif len ( iIiI ( 'sportsdevil' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'sportsdevil' ) :
     if not o0O0Oo00 . string == None :
      oO0OooOO00 = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + o0O0Oo00 . string
      o0000O00ooo0o = iIiI ( 'referer' ) [ 0 ] . string
      if o0000O00ooo0o :
       if 82 - 82: OOoOoO0o0o0OO + oo00oOoO0o0o . I1Ii / I1Ii
       oO0OooOO00 = oO0OooOO00 + '%26referer=' + o0000O00ooo0o
      IiI . append ( oO0OooOO00 )
   elif len ( iIiI ( 'p2p' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'p2p' ) :
     if not o0O0Oo00 . string == None :
      if 'sop://' in o0O0Oo00 . string :
       Ii1iIi1Ii1 = 'plugin://plugin.video.p2p-streams/?mode=2url=' + o0O0Oo00 . string + '&' + 'name=' + iII1Ii1ii11
       IiI . append ( Ii1iIi1Ii1 )
      else :
       oOOoO0oOoO0 = 'plugin://plugin.video.p2p-streams/?mode=1&url=' + o0O0Oo00 . string + '&' + 'name=' + iII1Ii1ii11
       IiI . append ( oOOoO0oOoO0 )
   elif len ( iIiI ( 'vaughn' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'vaughn' ) :
     if not o0O0Oo00 . string == None :
      OOo000Oo = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + o0O0Oo00 . string
      IiI . append ( OOo000Oo )
   elif len ( iIiI ( 'ilive' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'ilive' ) :
     if not o0O0Oo00 . string == None :
      if not 'http' in o0O0Oo00 . string :
       o0O = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + o0O0Oo00 . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       o0O = 'plugin://plugin.video.tbh.ilive/?url=' + o0O0Oo00 . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( iIiI ( 'yt-dl' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'yt-dl' ) :
     if not o0O0Oo00 . string == None :
      oooOo00OoO0oo = o0O0Oo00 . string + '&mode=18'
      IiI . append ( oooOo00OoO0oo )
   elif len ( iIiI ( 'dm' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'dm' ) :
     if not o0O0Oo00 . string == None :
      OoOoOO00 = "plugin://plugin.video.dailymotion_com/?mode=playVideo&url=" + o0O0Oo00 . string
      IiI . append ( OoOoOO00 )
   elif len ( iIiI ( 'dmlive' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'dmlive' ) :
     if not o0O0Oo00 . string == None :
      OoOoOO00 = "plugin://plugin.video.dailymotion_com/?mode=playLiveVideo&url=" + o0O0Oo00 . string
      IiI . append ( OoOoOO00 )
   elif len ( iIiI ( 'utube' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'utube' ) :
     if not o0O0Oo00 . string == None :
      if ' ' in o0O0Oo00 . string :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/search/?q=' + urllib . quote_plus ( o0O0Oo00 . string )
       iiIII1Iiii1iI = Ooo0OoO0o
      elif len ( o0O0Oo00 . string ) == 11 :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/play/?video_id=' + o0O0Oo00 . string
      elif ( o0O0Oo00 . string . startswith ( 'PL' ) and not '&order=' in o0O0Oo00 . string ) or o0O0Oo00 . string . startswith ( 'UU' ) :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + o0O0Oo00 . string
      elif o0O0Oo00 . string . startswith ( 'PL' ) or o0O0Oo00 . string . startswith ( 'UU' ) :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/play/?playlist_id=' + o0O0Oo00 . string
      elif o0O0Oo00 . string . startswith ( 'UC' ) and len ( o0O0Oo00 . string ) > 12 :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/channel/' + o0O0Oo00 . string + '/'
       iiIII1Iiii1iI = Ooo0OoO0o
      elif not o0O0Oo00 . string . startswith ( 'UC' ) and not ( o0O0Oo00 . string . startswith ( 'PL' ) ) :
       Ooo0OoO0o = 'plugin://plugin.video.youtube/user/' + o0O0Oo00 . string + '/'
       iiIII1Iiii1iI = Ooo0OoO0o
     IiI . append ( Ooo0OoO0o )
   elif len ( iIiI ( 'imdb' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'imdb' ) :
     if not o0O0Oo00 . string == None :
      if Oo00O . getSetting ( 'genesisorpulsar' ) == '0' :
       oOoooooo00Oo = 'plugin://plugin.video.genesis/?action=play&imdb=' + o0O0Oo00 . string
      else :
       oOoooooo00Oo = 'plugin://plugin.video.pulsar/movie/tt' + o0O0Oo00 . string + '/play'
      IiI . append ( oOoooooo00Oo )
   elif len ( iIiI ( 'f4m' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'f4m' ) :
     if not o0O0Oo00 . string == None :
      if '.f4m' in o0O0Oo00 . string :
       iii1IiI1111 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( o0O0Oo00 . string )
      elif '.m3u8' in o0O0Oo00 . string :
       iii1IiI1111 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( o0O0Oo00 . string ) + '&amp;streamtype=HLS'
       if 72 - 72: oO00ooo0o0OO - O0000O - oO00ooo0o0OO + oO00ooo0o0OO + oo00oOoO0o0o + O000Ooo0o0OOo
      else :
       iii1IiI1111 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( o0O0Oo00 . string ) + '&amp;streamtype=SIMPLE'
     IiI . append ( iii1IiI1111 )
   elif len ( iIiI ( 'ftv' ) ) > 0 :
    for o0O0Oo00 in iIiI ( 'ftv' ) :
     if not o0O0Oo00 . string == None :
      O000OooOOO0O = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( iII1Ii1ii11 ) + '&url=' + o0O0Oo00 . string + '&mode=125&ch_fanart=na'
     IiI . append ( O000OooOOO0O )
   elif len ( iIiI ( 'urlsolve' ) ) > 0 :
    if 89 - 89: O00oo0o . O000Ooo0o0OOo - IiiIIiII
    for o0O0Oo00 in iIiI ( 'urlsolve' ) :
     if not o0O0Oo00 . string == None :
      IiiI1I = o0O0Oo00 . string + '&mode=19'
      IiI . append ( IiiI1I )
   if len ( IiI ) < 1 :
    raise
  except :
   i1iIii ( 'Error <link> element, Passing:' + iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) )
   continue
  try :
   i1i11 = iIiI ( 'externallink' ) [ 0 ] . string
  except : pass
  if 97 - 97: Ii . Ooo0OoOo0OOOO * IIII . OOoOoO0o0o0OO
  if i1i11 :
   iII = [ i1i11 ]
   i1i11 = True
  else :
   i1i11 = False
  try :
   iiIII1Iiii1iI = iIiI ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if iiIII1Iiii1iI :
   if 92 - 92: oO00ooo0o0OO
   iII = [ iiIII1Iiii1iI ]
   if 36 - 36: i11IiI1II
   iiIII1Iiii1iI = True
  else :
   iiIII1Iiii1iI = False
  try :
   I11iI = iIiI ( 'thumbnail' ) [ 0 ] . string
   if I11iI == None :
    raise
   I11iI = oooo0o ( I11iI )
  except :
   I11iI = ''
  try :
   if not iIiI ( 'fanart' ) :
    if Oo00O . getSetting ( 'use_thumb' ) == "true" :
     i111 = I11iI
    else :
     i111 = fanart
   else :
    i111 = iIiI ( 'fanart' ) [ 0 ] . string
   if i111 == None :
    raise
  except :
   i111 = fanart
  try :
   O00 = iIiI ( 'info' ) [ 0 ] . string
   if O00 == None :
    raise
  except :
   O00 = ''
   if 62 - 62: OOoOoO0o0o0OO * IIII
  try :
   o000 = iIiI ( 'genre' ) [ 0 ] . string
   if o000 == None :
    raise
  except :
   o000 = ''
   if 90 - 90: IIII - oO00ooo0o0OO / OOoOoO0o0o0OO * oo00oOoO0o0o % i11IiI1II . iiI
  try :
   I1iIi1 = iIiI ( 'date' ) [ 0 ] . string
   if I1iIi1 == None :
    raise
  except :
   I1iIi1 = ''
   if 36 - 36: Ii . oOO - II1i111iI1ii . oo0OoO + oO00ooo0o0OO
  iI1i1iIII1II = None
  if iIiI ( 'regex' ) :
   try :
    OOO = iIiI ( 'regex' )
    iI1i1iIII1II = O0O0oOOO0O00 ( OOO )
   except :
    pass
  try :
   if 80 - 80: Ooo0OoOo0OOOO . Ooo0OoOo0OOOO % II1iiI1ii1iii % oO00ooo0o0OO
   if len ( IiI ) > 1 :
    O00OoO = 0
    iIiI1iIIii11I = [ ]
    I11i11IIiii = True if '$$LSPlayOnlyOne$$' in IiI [ 0 ] else False
    if 21 - 21: iiiI1iiI1i . O000Ooo0o0OOo / IIII % I1Ii - iiiI1iiI1i
    for o0O0Oo00 in IiI :
     if Ii1 == "false" and not I11i11IIiii :
      O00OoO += 1
      IiiiI11I ( o0O0Oo00 , '%s) %s' % ( O00OoO , iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) ) , I11iI , i111 , O00 , o000 , I1iIi1 , True , iIiI1iIIii11I , iI1i1iIII1II , oo0OO0Oo0 )
     elif ( Ii1 == "true" and OooO0OOoo0O0 == 'true' ) or I11i11IIiii :
      if iI1i1iIII1II :
       iIiI1iIIii11I . append ( o0O0Oo00 + '&regexs=' + iI1i1iIII1II )
      elif any ( x in o0O0Oo00 for x in OOoo0O ) and o0O0Oo00 . startswith ( 'http' ) :
       iIiI1iIIii11I . append ( o0O0Oo00 + '&mode=19' )
      else :
       iIiI1iIIii11I . append ( o0O0Oo00 )
     else :
      iIiI1iIIii11I . append ( o0O0Oo00 )
      if 78 - 78: oOO
    if len ( iIiI1iIIii11I ) > 1 :
     if 87 - 87: oo00oOoO0o0o * oo0OoO / oOO % II1i111iI1ii / OOoOoO0o0o0OO
     IiiiI11I ( '' , iII1Ii1ii11 . encode ( 'utf-8' ) , I11iI , i111 , O00 , o000 , I1iIi1 , True , iIiI1iIIii11I , iI1i1iIII1II , oo0OO0Oo0 )
   else :
    if 38 - 38: OOoOoO0o0o0OO * iiiI1iiI1i / IiiIIiII
    if dontLink :
     return iII1Ii1ii11 , IiI [ 0 ] , iI1i1iIII1II
    if i1i11 :
     if not iI1i1iIII1II == None :
      OO0OoOoO00 ( iII1Ii1ii11 . encode ( 'utf-8' ) , iII [ 0 ] . encode ( 'utf-8' ) , 1 , I11iI , i111 , O00 , o000 , I1iIi1 , None , '!!update' , iI1i1iIII1II , IiI [ 0 ] . encode ( 'utf-8' ) )
      if 70 - 70: i11IiI1II * O00O . I1Ii . IiiIIiII * iiiI1iiI1i + i11IiI1II
     else :
      OO0OoOoO00 ( iII1Ii1ii11 . encode ( 'utf-8' ) , iII [ 0 ] . encode ( 'utf-8' ) , 1 , I11iI , i111 , O00 , o000 , I1iIi1 , None , 'source' , None , None )
      if 77 - 77: Ooo0OoOo0OOOO % iiiI1iiI1i
    elif iiIII1Iiii1iI :
     OO0OoOoO00 ( iII1Ii1ii11 . encode ( 'utf-8' ) , iII [ 0 ] , 53 , I11iI , i111 , O00 , o000 , I1iIi1 , None , 'source' )
     if 72 - 72: oo0OoO + Ii * ooo * O000Ooo0o0OOo % oo00oOoO0o0o
    else :
     try :
      if '$doregex' in iII1Ii1ii11 and not O0oO == None :
       if 1 - 1: iiI
       i111OOOo , III11iI1ii11 = O0oO ( iI1i1iIII1II , iII1Ii1ii11 )
       if 71 - 71: iiI * IiiIIiII % O000Ooo0o0OOo
       if not i111OOOo == None :
        iII1Ii1ii11 = i111OOOo
     except : pass
     try :
      if '$doregex' in I11iI and not O0oO == None :
       i111OOOo , III11iI1ii11 = O0oO ( iI1i1iIII1II , I11iI )
       if not i111OOOo == None :
        I11iI = i111OOOo
     except : pass
     IiiiI11I ( IiI [ 0 ] , iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) , I11iI , i111 , O00 , o000 , I1iIi1 , True , None , iI1i1iIII1II , oo0OO0Oo0 )
     if 23 - 23: II1i111iI1ii
  except :
   i1iIii ( 'There was a problem adding item - ' + iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) )
   if 17 - 17: IiiIIiII
def O0O0oOOO0O00 ( reg_item ) :
 try :
  iI1i1iIII1II = { }
  for o0O0Oo00 in reg_item :
   iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] = { }
   iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'name' ] = o0O0Oo00 ( 'name' ) [ 0 ] . string
   if 63 - 63: O00oo0o
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = o0O0Oo00 ( 'expres' ) [ 0 ] . string
    if not iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] :
     iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = ''
   except :
    i1iIii ( "Regex: -- No Referer --" )
   iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'page' ] = o0O0Oo00 ( 'page' ) [ 0 ] . string
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'referer' ] = o0O0Oo00 ( 'referer' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No Referer --" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'connection' ] = o0O0Oo00 ( 'connection' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No connection --" )
    if 66 - 66: oOO * oOO - oo0OoO + Ii - oOO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = o0O0Oo00 ( 'notplayable' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No notplayable --" )
    if 44 - 44: I1Ii + oo0OoO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = o0O0Oo00 ( 'noredirect' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No noredirect --" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'origin' ] = o0O0Oo00 ( 'origin' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No origin --" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'accept' ] = o0O0Oo00 ( 'accept' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No accept --" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = o0O0Oo00 ( 'includeheaders' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No includeheaders --" )
    if 35 - 35: O000Ooo0o0OOo + IIII % O000Ooo0o0OOo % I1Ii / II1i111iI1ii % I1Ii
    if 84 - 84: oOO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'listrepeat' ] = o0O0Oo00 ( 'listrepeat' ) [ 0 ] . string
    if 43 - 43: oOO . iiiI1iiI1i * iiI
   except :
    i1iIii ( "Regex: -- No listrepeat --" )
    if 55 - 55: Ii / II1iiI1ii1iii * iiI - iiiI1iiI1i + IIII
    if 63 - 63: Ooo0OoOo0OOOO
    if 51 - 51: i11IiI1II + II1i111iI1ii
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'proxy' ] = o0O0Oo00 ( 'proxy' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No proxy --" )
    if 23 - 23: II1iiI1ii1iii - IIII / I1Ii / I1Ii * IIII % oOO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = o0O0Oo00 ( 'x-req' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No x-req --" )
    if 84 - 84: OOoOoO0o0o0OO . IiiIIiII / oo00oOoO0o0o
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'x-addr' ] = o0O0Oo00 ( 'x-addr' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No x-addr --" )
    if 18 - 18: Ii / Ooo0OoOo0OOOO % OOoOoO0o0o0OO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = o0O0Oo00 ( 'x-forward' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No x-forward --" )
    if 45 - 45: IIII % O00oo0o + II1i111iI1ii - oOO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'agent' ] = o0O0Oo00 ( 'agent' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- No User Agent --" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'post' ] = o0O0Oo00 ( 'post' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a post" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = o0O0Oo00 ( 'rawpost' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a rawpost" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = o0O0Oo00 ( 'htmlunescape' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a htmlunescape" )
    if 87 - 87: II1iiI1ii1iii + OOoOoO0o0o0OO
    if 88 - 88: O000Ooo0o0OOo - I1Ii + O00O . IiiIIiII % IiiIIiII / O00oo0o
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = o0O0Oo00 ( 'readcookieonly' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a readCookieOnly" )
    if 88 - 88: II1i111iI1ii / oo00oOoO0o0o * I1Ii
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = o0O0Oo00 ( 'cookiejar' ) [ 0 ] . string
    if not iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    i1iIii ( "Regex: -- Not a cookieJar" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = o0O0Oo00 ( 'setcookie' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a setcookie" )
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = o0O0Oo00 ( 'appendcookie' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- Not a appendcookie" )
    if 84 - 84: oo0OoO * IiiIIiII - Ooo0OoOo0OOOO . oO00ooo0o0OO + Ooo0OoOo0OOOO
   try :
    iI1i1iIII1II [ o0O0Oo00 ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = o0O0Oo00 ( 'ignorecache' ) [ 0 ] . string
   except :
    i1iIii ( "Regex: -- no ignorecache" )
    if 85 - 85: O00oo0o
    if 76 - 76: oo00oOoO0o0o % OOoOoO0o0o0OO - OOoOoO0o0o0OO
    if 66 - 66: OOoOoO0o0o0OO
    if 71 - 71: O0000O % oOO
    if 69 - 69: iiI % O00oo0o . O0000O . oo0OoO
  iI1i1iIII1II = urllib . quote ( repr ( iI1i1iIII1II ) )
  return iI1i1iIII1II
  if 76 - 76: O00oo0o / iiiI1iiI1i % oo00oOoO0o0o - O00oo0o
 except :
  iI1i1iIII1II = None
  i1iIii ( 'regex Error: ' + iII1Ii1ii11 . encode ( 'utf-8' , 'ignore' ) )
  if 24 - 24: I1Ii % O000Ooo0o0OOo
def OOoooo0o0O ( url ) :
 try :
  for o0O0Oo00 in range ( 1 , 51 ) :
   i1i = iIii1I ( url )
   if "EXT-X-STREAM-INF" in i1i : return url
   if not "EXTM3U" in i1i : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 37 - 37: O000Ooo0o0OOo
def O0oO ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 90 - 90: Ooo0OoOo0OOOO - Ooo0OoOo0OOOO * i11IiI1II % ooo
  if 59 - 59: ooo - IiiIIiII
 I1 = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 74 - 74: IIII - IiiIIiII / I1Ii
 iIIiI1i = True
 for IIiII11iii1 in I1 :
  if IIiII11iii1 in regexs :
   if 96 - 96: iiI / oo00oOoO0o0o / II1i111iI1ii * OOoOoO0o0o0OO / O000Ooo0o0OOo / Ooo0OoOo0OOOO
   i1Ii = regexs [ IIiII11iii1 ]
   if 88 - 88: Ii % O000Ooo0o0OOo . oo00oOoO0o0o * O000Ooo0o0OOo
   ii1iii1i11 = False
   if 'cookiejar' in i1Ii :
    if 63 - 63: IIII * O00oo0o / O00O * oo00oOoO0o0o . II1i111iI1ii % O00O
    ii1iii1i11 = i1Ii [ 'cookiejar' ]
    if '$doregex' in ii1iii1i11 :
     cookieJar = O0oO ( regexs , i1Ii [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     if 83 - 83: O0000O
     ii1iii1i11 = True
    else :
     ii1iii1i11 = True
     if 75 - 75: ooo . ooo + II1i111iI1ii / Ii - II1iiI1ii1iii
   if ii1iii1i11 :
    if cookieJar == None :
     if 49 - 49: oOO + O0000O * ooo % oO00ooo0o0OO - oo0OoO
     cookie_jar_file = None
     if 'open[' in i1Ii [ 'cookiejar' ] :
      cookie_jar_file = i1Ii [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 6 - 6: O00O + i11IiI1II / iiI / iiI / O00O + i11IiI1II
      if 5 - 5: II1i111iI1ii . O00O - Ii
     cookieJar = i1IioOO0Oo0o ( cookie_jar_file )
     if 16 - 16: iiI + OOoOoO0o0o0OO - i11IiI1II / oO00ooo0o0OO + oOO
     if cookie_jar_file :
      O0oOo ( cookieJar , cookie_jar_file )
      if 54 - 54: oo00oOoO0o0o + O00oo0o
      if 13 - 13: IIII
      if 5 - 5: II1i111iI1ii
    elif 'save[' in i1Ii [ 'cookiejar' ] :
     cookie_jar_file = i1Ii [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     OOOoO = os . path . join ( o00 , cookie_jar_file )
     if 79 - 79: oOO - oO00ooo0o0OO % IiiIIiII - IiiIIiII
     O0oOo ( cookieJar , cookie_jar_file )
   if i1Ii [ 'page' ] and '$doregex' in i1Ii [ 'page' ] :
    IIiiIiIi = O0oO ( regexs , i1Ii [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if len ( IIiiIiIi ) == 0 :
     IIiiIiIi = 'http://regexfailed'
    i1Ii [ 'page' ] = IIiiIiIi
    if 9 - 9: O00oo0o
   if 'setcookie' in i1Ii and i1Ii [ 'setcookie' ] and '$doregex' in i1Ii [ 'setcookie' ] :
    i1Ii [ 'setcookie' ] = O0oO ( regexs , i1Ii [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in i1Ii and i1Ii [ 'appendcookie' ] and '$doregex' in i1Ii [ 'appendcookie' ] :
    i1Ii [ 'appendcookie' ] = O0oO ( regexs , i1Ii [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 87 - 87: iiiI1iiI1i - Ii + Ooo0OoOo0OOOO * I1Ii * II1i111iI1ii % O00oo0o
    if 42 - 42: oOO * O00oo0o % Ooo0OoOo0OOOO - i11IiI1II % i11IiI1II
   if 'post' in i1Ii and '$doregex' in i1Ii [ 'post' ] :
    i1Ii [ 'post' ] = O0oO ( regexs , i1Ii [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 1 - 1: Ooo0OoOo0OOOO / IIII - IiiIIiII . i11IiI1II
    if 59 - 59: II1i111iI1ii - iiiI1iiI1i * Ii + Ooo0OoOo0OOOO
   if 'rawpost' in i1Ii and '$doregex' in i1Ii [ 'rawpost' ] :
    i1Ii [ 'rawpost' ] = O0oO ( regexs , i1Ii [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 96 - 96: iiI / OOoOoO0o0o0OO / iiI / oO00ooo0o0OO % oO00ooo0o0OO
    if 74 - 74: iiI / oO00ooo0o0OO * O00O . I1Ii + iiI
   if 'rawpost' in i1Ii and '$epoctime$' in i1Ii [ 'rawpost' ] :
    i1Ii [ 'rawpost' ] = i1Ii [ 'rawpost' ] . replace ( '$epoctime$' , OoOOOo0OOOo00O ( ) )
    if 48 - 48: O0000O . OOoOoO0o0o0OO
   if 'rawpost' in i1Ii and '$epoctime2$' in i1Ii [ 'rawpost' ] :
    i1Ii [ 'rawpost' ] = i1Ii [ 'rawpost' ] . replace ( '$epoctime2$' , I1i1IIII1II ( ) )
    if 20 - 20: oo0OoO - oOO * II1i111iI1ii
    if 91 - 91: II1i111iI1ii - O0000O % oo00oOoO0o0o * II1iiI1ii1iii / oo00oOoO0o0o
   O0o0oooo00 = ''
   if i1Ii [ 'page' ] and i1Ii [ 'page' ] in cachedPages and not 'ignorecache' in i1Ii and forCookieJarOnly == False :
    if 17 - 17: I1Ii * Ii
    O0o0oooo00 = cachedPages [ i1Ii [ 'page' ] ]
   else :
    if i1Ii [ 'page' ] and not i1Ii [ 'page' ] == '' and i1Ii [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in i1Ii [ 'page' ] :
      i1Ii [ 'page' ] = i1Ii [ 'page' ] . replace ( '$epoctime$' , OoOOOo0OOOo00O ( ) )
     if '$epoctime2$' in i1Ii [ 'page' ] :
      i1Ii [ 'page' ] = i1Ii [ 'page' ] . replace ( '$epoctime2$' , I1i1IIII1II ( ) )
      if 26 - 26: Ooo0OoOo0OOOO + II1i111iI1ii + O000Ooo0o0OOo / i11IiI1II - oo0OoO / IIII
      if 60 - 60: iiI * oO00ooo0o0OO + ooo % IIII / iiI - O000Ooo0o0OOo
     OO0 = i1Ii [ 'page' ] . split ( '|' )
     oOOO0OO0O0oO0 = OO0 [ 0 ]
     iii1iIII1111I = None
     if len ( OO0 ) > 1 :
      iii1iIII1111I = OO0 [ 1 ]
      if 66 - 66: ooo . oo00oOoO0o0o / ooo + II1i111iI1ii . O000Ooo0o0OOo * i11IiI1II
      if 73 - 73: O00oo0o % i11IiI1II - O000Ooo0o0OOo % ooo
      if 14 - 14: I1Ii % II1iiI1ii1iii - oO00ooo0o0OO % II1i111iI1ii * O00oo0o % II1iiI1ii1iii
      if 44 - 44: Ii * i11IiI1II - iiiI1iiI1i
      if 19 - 19: Ii . O0000O / i11IiI1II
      if 37 - 37: iiI * Ii + oo00oOoO0o0o / II1i111iI1ii * oO00ooo0o0OO
      if 87 - 87: O00oo0o . iiiI1iiI1i
      if 95 - 95: oo00oOoO0o0o % oOO + Ii
      if 42 - 42: iiI / I1Ii + iiI
      if 74 - 74: OOoOoO0o0o0OO . oO00ooo0o0OO
     IiOoo00o0o = urllib2 . ProxyHandler ( urllib2 . getproxies ( ) )
     if 47 - 47: ooo * II1i111iI1ii + oO00ooo0o0OO
     if 44 - 44: IIII % I1Ii + IIII / O00O / oOO / O00oo0o
     if 47 - 47: O00O % I1Ii . ooo * O00oo0o . IIII
     o0OOoo0 = urllib2 . Request ( oOOO0OO0O0oO0 )
     if 'proxy' in i1Ii :
      OO0OoO00O0o = i1Ii [ 'proxy' ]
      if 79 - 79: oo0OoO * iiI
      if 80 - 80: IiiIIiII . oOO * I1Ii - OOoOoO0o0o0OO
      if oOOO0OO0O0oO0 [ : 5 ] == "https" :
       I11iIoOo0OoOo = urllib2 . ProxyHandler ( { 'https' : OO0OoO00O0o } )
       if 63 - 63: i11IiI1II + iiiI1iiI1i % O0000O
      else :
       I11iIoOo0OoOo = urllib2 . ProxyHandler ( { 'http' : OO0OoO00O0o } )
       if 82 - 82: I1Ii - II1iiI1ii1iii / iiI / I1Ii . OOoOoO0o0o0OO
      o0oOOOO0oooo0 = urllib2 . build_opener ( I11iIoOo0OoOo )
      urllib2 . install_opener ( o0oOOOO0oooo0 )
      if 17 - 17: O000Ooo0o0OOo + i11IiI1II
      if 69 - 69: II1iiI1ii1iii / IIII
     o0OOoo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     OO0OoO00O0o = None
     if 21 - 21: O0000O - Ii
     if 'referer' in i1Ii :
      o0OOoo0 . add_header ( 'Referer' , i1Ii [ 'referer' ] )
     if 'accept' in i1Ii :
      o0OOoo0 . add_header ( 'Accept' , i1Ii [ 'accept' ] )
     if 'agent' in i1Ii :
      o0OOoo0 . add_header ( 'User-agent' , i1Ii [ 'agent' ] )
     if 'x-req' in i1Ii :
      o0OOoo0 . add_header ( 'X-Requested-With' , i1Ii [ 'x-req' ] )
     if 'x-addr' in i1Ii :
      o0OOoo0 . add_header ( 'x-addr' , i1Ii [ 'x-addr' ] )
     if 'x-forward' in i1Ii :
      o0OOoo0 . add_header ( 'X-Forwarded-For' , i1Ii [ 'x-forward' ] )
     if 'setcookie' in i1Ii :
      if 84 - 84: oo0OoO + oo00oOoO0o0o
      o0OOoo0 . add_header ( 'Cookie' , i1Ii [ 'setcookie' ] )
     if 'appendcookie' in i1Ii :
      if 30 - 30: II1iiI1ii1iii + II1i111iI1ii * O000Ooo0o0OOo / II1iiI1ii1iii
      oOo0o000o0 = i1Ii [ 'appendcookie' ]
      oOo0o000o0 = oOo0o000o0 . split ( ';' )
      for IIiI11 in oOo0o000o0 :
       I1111IIi1i , II1I11I1III1 = IIiI11 . split ( '=' )
       iiii1I1 , I1111IIi1i = I1111IIi1i . split ( ':' )
       iIOO0oOoO0O0O = cookielib . Cookie ( version = 0 , name = I1111IIi1i , value = II1I11I1III1 , port = None , port_specified = False , domain = iiii1I1 , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( iIOO0oOoO0O0O )
     if 'origin' in i1Ii :
      o0OOoo0 . add_header ( 'Origin' , i1Ii [ 'origin' ] )
     if iii1iIII1111I :
      iii1iIII1111I = iii1iIII1111I . split ( '&' )
      for IIiI11 in iii1iIII1111I :
       if IIiI11 . split ( '=' ) == 2 :
        I1111IIi1i , II1I11I1III1 = IIiI11 . split ( '=' )
       else :
        iIii = IIiI11 . split ( '=' )
        I1111IIi1i = iIii [ 0 ]
        II1I11I1III1 = '=' . join ( iIii [ 1 : ] )
        if 22 - 22: i11IiI1II
       o0OOoo0 . add_header ( I1111IIi1i , II1I11I1III1 )
       if 17 - 17: oo0OoO
     if not cookieJar == None :
      if 93 - 93: O00O . O0000O
      oOOOoO0OoOoO = urllib2 . HTTPCookieProcessor ( cookieJar )
      o0oOOOO0oooo0 = urllib2 . build_opener ( oOOOoO0OoOoO , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      o0oOOOO0oooo0 = urllib2 . install_opener ( o0oOOOO0oooo0 )
      if 43 - 43: iiiI1iiI1i % I1Ii - Ii % O00O . IiiIIiII
      if 26 - 26: Ooo0OoOo0OOOO . II1iiI1ii1iii . I1Ii % II1i111iI1ii
      if 'noredirect' in i1Ii :
       o0oOOOO0oooo0 = urllib2 . build_opener ( oOOOoO0OoOoO , iiIoo000OoOOO0Oo , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
       o0oOOOO0oooo0 = urllib2 . install_opener ( o0oOOOO0oooo0 )
     elif 'noredirect' in i1Ii :
      o0oOOOO0oooo0 = urllib2 . build_opener ( iiIoo000OoOOO0Oo , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      o0oOOOO0oooo0 = urllib2 . install_opener ( o0oOOOO0oooo0 )
      if 18 - 18: oo0OoO - iiiI1iiI1i
      if 77 - 77: i11IiI1II . OOoOoO0o0o0OO . O0000O
     if 'connection' in i1Ii :
      if 91 - 91: O00oo0o / iiI . II1iiI1ii1iii
      from keepalive import HTTPHandler
      Oo0o00O0oo000 = HTTPHandler ( )
      o0oOOOO0oooo0 = urllib2 . build_opener ( Oo0o00O0oo000 )
      urllib2 . install_opener ( o0oOOOO0oooo0 )
      if 34 - 34: O00oo0o . iiI * ooo
      if 60 - 60: OOoOoO0o0o0OO % Ooo0OoOo0OOOO * IiiIIiII % O0000O
      if 85 - 85: O00O % II1i111iI1ii
     OO0o00OOO00O = None
     if 81 - 81: IiiIIiII - oo00oOoO0o0o . IIII / O000Ooo0o0OOo . oO00ooo0o0OO
     if 'post' in i1Ii :
      iIIIi111 = i1Ii [ 'post' ]
      if 96 - 96: O00O / II1i111iI1ii
      if 20 - 20: IIII / O00oo0o / oOO
      if 58 - 58: iiiI1iiI1i . ooo
      if 19 - 19: IiiIIiII % oo00oOoO0o0o . IIII - Ii
      IiI1II11 = iIIIi111 . split ( ',' ) ;
      OO0o00OOO00O = { }
      for i1IiIiiIIiII1 in IiI1II11 :
       I1111IIi1i = i1IiIiiIIiII1 . split ( ':' ) [ 0 ] ;
       II1I11I1III1 = i1IiIiiIIiII1 . split ( ':' ) [ 1 ] ;
       OO0o00OOO00O [ I1111IIi1i ] = II1I11I1III1
      OO0o00OOO00O = urllib . urlencode ( OO0o00OOO00O )
      if 4 - 4: oo0OoO + Ooo0OoOo0OOOO - I1Ii . I1Ii
     if 'rawpost' in i1Ii :
      OO0o00OOO00O = i1Ii [ 'rawpost' ]
      if 42 - 42: oOO . O00O
      if 37 - 37: IiiIIiII
      if 31 - 31: iiiI1iiI1i
      if 4 - 4: I1Ii / O0000O - O000Ooo0o0OOo + IIII
     O0o0oooo00 = ''
     try :
      if 73 - 73: oOO * oo0OoO
      if OO0o00OOO00O :
       ii1Ii = urllib2 . urlopen ( o0OOoo0 , OO0o00OOO00O )
      else :
       ii1Ii = urllib2 . urlopen ( o0OOoo0 )
      if ii1Ii . info ( ) . get ( 'Content-Encoding' ) == 'gzip' :
       from StringIO import StringIO
       import gzip
       IIiii11i = StringIO ( ii1Ii . read ( ) )
       IiOo0ooOo0Oo = gzip . GzipFile ( fileobj = IIiii11i )
       O0o0oooo00 = IiOo0ooOo0Oo . read ( )
      else :
       O0o0oooo00 = ii1Ii . read ( )
       if 24 - 24: IiiIIiII + O0000O + Ooo0OoOo0OOOO % oo0OoO * iiI
       if 84 - 84: iiiI1iiI1i / I1Ii - ooo
       if 4 - 4: Ii % O00oo0o % oo00oOoO0o0o . iiiI1iiI1i
      if 'proxy' in i1Ii and not IiOoo00o0o is None :
       urllib2 . install_opener ( urllib2 . build_opener ( IiOoo00o0o ) )
       if 39 - 39: oo00oOoO0o0o
      O0o0oooo00 = OoO00O0OooOo ( O0o0oooo00 )
      if 91 - 91: Ooo0OoOo0OOOO + oo00oOoO0o0o
      if 33 - 33: O00O + oo0OoO . O000Ooo0o0OOo
      if 'includeheaders' in i1Ii :
       if 97 - 97: iiI % oo00oOoO0o0o + II1iiI1ii1iii - IIII + II1i111iI1ii * ooo
       O0o0oooo00 += '$$HEADERS_START$$:'
       for iIIiIII1i in ii1Ii . headers :
        O0o0oooo00 += iIIiIII1i + ':' + ii1Ii . headers . get ( iIIiIII1i ) + '\n'
       O0o0oooo00 += '$$HEADERS_END$$:'
       if 63 - 63: i11IiI1II % iiI
      i1iIii ( O0o0oooo00 )
      i1iIii ( cookieJar )
      if 62 - 62: iiiI1iiI1i
      ii1Ii . close ( )
     except :
      pass
     cachedPages [ i1Ii [ 'page' ] ] = O0o0oooo00
     if 85 - 85: Ii . oo00oOoO0o0o . OOoOoO0o0o0OO
     if 50 - 50: iiI * iiiI1iiI1i + O000Ooo0o0OOo % II1i111iI1ii + IiiIIiII
     if 22 - 22: oOO * OOoOoO0o0o0OO
     if forCookieJarOnly :
      return cookieJar
    elif i1Ii [ 'page' ] and not i1Ii [ 'page' ] . startswith ( 'http' ) :
     if i1Ii [ 'page' ] . startswith ( '$pyFunction:' ) :
      I1iiIi = ooOO ( i1Ii [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar , i1Ii )
      if forCookieJarOnly :
       return cookieJar
      O0o0oooo00 = I1iiIi
      O0o0oooo00 = OoO00O0OooOo ( O0o0oooo00 )
     else :
      O0o0oooo00 = i1Ii [ 'page' ]
   if '$pyFunction:playmedia(' in i1Ii [ 'expres' ] or 'ActivateWindow' in i1Ii [ 'expres' ] or 'RunPlugin' in i1Ii [ 'expres' ] or '$PLAYERPROXY$=' in url or any ( x in url for x in IiI1ii1I11iI ) :
    iIIiI1i = False
   if '$doregex' in i1Ii [ 'expres' ] :
    i1Ii [ 'expres' ] = O0oO ( regexs , i1Ii [ 'expres' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 19 - 19: iiI * IiiIIiII . OOoOoO0o0o0OO . oOO - II1iiI1ii1iii
   if not i1Ii [ 'expres' ] == '' :
    if 7 - 7: O0000O
    if '$LiveStreamCaptcha' in i1Ii [ 'expres' ] :
     I1iiIi = I1iIi1111i1I ( i1Ii , O0o0oooo00 , cookieJar )
     if 38 - 38: ooo / II1i111iI1ii / oO00ooo0o0OO / IiiIIiII - Ii
     url = url . replace ( "$doregex[" + IIiII11iii1 + "]" , I1iiIi )
     if 18 - 18: O00O . Ii . O0000O * oOO
    elif i1Ii [ 'expres' ] . startswith ( '$pyFunction:' ) or '#$pyFunction' in i1Ii [ 'expres' ] :
     if 1 - 1: O000Ooo0o0OOo
     I1iiIi = ''
     if i1Ii [ 'expres' ] . startswith ( '$pyFunction:' ) :
      I1iiIi = ooOO ( i1Ii [ 'expres' ] . split ( '$pyFunction:' ) [ 1 ] , O0o0oooo00 , cookieJar , i1Ii )
     else :
      I1iiIi = O0OO000000oO0 ( i1Ii [ 'expres' ] , O0o0oooo00 , cookieJar , i1Ii )
     if 'ActivateWindow' in i1Ii [ 'expres' ] or 'RunPlugin' in i1Ii [ 'expres' ] : return '' , False
     if forCookieJarOnly :
      return cookieJar
     if 'listrepeat' in i1Ii :
      I1i1 = i1Ii [ 'listrepeat' ]
      if 1 - 1: Ooo0OoOo0OOOO + ooo - II1i111iI1ii
      if 9 - 9: O00oo0o + oo00oOoO0o0o . I1Ii + II1iiI1ii1iii * oO00ooo0o0OO
      return I1i1 , eval ( I1iiIi ) , i1Ii , regexs , cookieJar
      if 43 - 43: oo0OoO - ooo . oO00ooo0o0OO . II1iiI1ii1iii + oOO + iiiI1iiI1i
      if 95 - 95: iiI / oO00ooo0o0OO % oo00oOoO0o0o . oo00oOoO0o0o / i11IiI1II
      if 60 - 60: O0000O + iiI * iiI % O0000O
     try :
      url = url . replace ( u"$doregex[" + IIiII11iii1 + "]" , I1iiIi )
     except : url = url . replace ( "$doregex[" + IIiII11iii1 + "]" , I1iiIi . decode ( "utf-8" ) )
    else :
     if 'listrepeat' in i1Ii :
      I1i1 = i1Ii [ 'listrepeat' ]
      if 8 - 8: IIII / IIII % II1iiI1ii1iii % oo00oOoO0o0o + OOoOoO0o0o0OO % oO00ooo0o0OO
      if 38 - 38: O00oo0o + I1Ii
      if 84 - 84: I1Ii - IiiIIiII
      if 58 - 58: oo0OoO * IIII / II1i111iI1ii
      Ii11iII1i = re . findall ( i1Ii [ 'expres' ] , O0o0oooo00 )
      if 25 - 25: IiiIIiII % O00O - i11IiI1II
      return I1i1 , Ii11iII1i , i1Ii , regexs , cookieJar
      if 80 - 80: II1iiI1ii1iii * O000Ooo0o0OOo % oO00ooo0o0OO / Ii + O00oo0o . I1Ii
     I1iiIi = ''
     if not O0o0oooo00 == '' :
      if 43 - 43: O00O % oo00oOoO0o0o / oo0OoO + ooo + oO00ooo0o0OO + oOO
      Iii11iii = re . compile ( i1Ii [ 'expres' ] ) . search ( O0o0oooo00 )
      try :
       I1iiIi = Iii11iii . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     elif i1Ii [ 'page' ] == '' or i1Ii [ 'page' ] == None :
      I1iiIi = i1Ii [ 'expres' ]
      if 20 - 20: O0000O % O000Ooo0o0OOo . O0000O
     if rawPost :
      if 84 - 84: O000Ooo0o0OOo
      I1iiIi = urllib . quote_plus ( I1iiIi )
     if 'htmlunescape' in i1Ii :
      if 91 - 91: O0000O / Ii . i11IiI1II + iiiI1iiI1i * II1iiI1ii1iii
      import HTMLParser
      I1iiIi = HTMLParser . HTMLParser ( ) . unescape ( I1iiIi )
     try :
      url = url . replace ( "$doregex[" + IIiII11iii1 + "]" , I1iiIi )
     except : url = url . replace ( "$doregex[" + IIiII11iii1 + "]" , I1iiIi . decode ( "utf-8" ) )
     if 99 - 99: iiiI1iiI1i + IiiIIiII
     if 84 - 84: II1i111iI1ii * i11IiI1II / OOoOoO0o0o0OO . i11IiI1II
   else :
    url = url . replace ( "$doregex[" + IIiII11iii1 + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , OoOOOo0OOOo00O ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , I1i1IIII1II ( ) )
  if 94 - 94: iiI % IiiIIiII / iiI * IIII + II1iiI1ii1iii
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , oOo0Oo ( cookieJar ) )
  if 7 - 7: oo0OoO / oO00ooo0o0OO % Ii / oOO . i11IiI1II
 if recursiveCall : return url
 if 73 - 73: i11IiI1II * oOO + iiiI1iiI1i * OOoOoO0o0o0OO * O000Ooo0o0OOo % oOO
 if url == "" :
  return
 else :
  return url , iIIiI1i
def IIiI ( t ) :
 import hashlib
 IIiI11 = hashlib . md5 ( )
 IIiI11 . update ( t )
 return IIiI11 . hexdigest ( )
 if 13 - 13: ooo + I1Ii . O000Ooo0o0OOo . II1iiI1ii1iii * IIII
def O0oO00oo0ooo ( encrypted ) :
 o00O0o0 = ""
 if 20 - 20: i11IiI1II - oOO / oo00oOoO0o0o
 if 81 - 81: ooo / iiiI1iiI1i % O00O
 if 71 - 71: oOO . O00oo0o - OOoOoO0o0o0OO + oO00ooo0o0OO
 if 55 - 55: I1Ii * oOO + I1Ii % II1i111iI1ii . iiI
 if 8 - 8: IiiIIiII
def oo0 ( media_url ) :
 try :
  import CustomPlayer
  OOoOO = CustomPlayer . MyXBMCPlayer ( )
  I1I1i11 = xbmcgui . ListItem ( label = str ( iII1Ii1ii11 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  OOoOO . play ( media_url , I1I1i11 )
  xbmc . sleep ( 1000 )
  while OOoOO . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 80 - 80: OOoOoO0o0o0OO + O00oo0o - O0000O % OOoOoO0o0o0OO
def Iiii1Ii ( params ) :
 OOOO0 = json . dumps ( params )
 i1Iiii1iiii = xbmc . executeJSONRPC ( OOOO0 )
 if 13 - 13: O000Ooo0o0OOo . II1iiI1ii1iii - II1i111iI1ii . oOO
 try :
  ii1Ii = json . loads ( i1Iiii1iiii )
 except UnicodeDecodeError :
  ii1Ii = json . loads ( i1Iiii1iiii . decode ( 'utf-8' , 'ignore' ) )
  if 44 - 44: iiiI1iiI1i . O00oo0o
 try :
  if 'result' in ii1Ii :
   return ii1Ii [ 'result' ]
  return None
 except KeyError :
  logger . warn ( "[%s] %s" % ( params [ 'method' ] , ii1Ii [ 'error' ] [ 'message' ] ) )
  return None
  if 78 - 78: i11IiI1II - iiiI1iiI1i / O000Ooo0o0OOo / I1Ii - ooo
  if 95 - 95: Ooo0OoOo0OOOO % O000Ooo0o0OOo * IIII + IiiIIiII - oo00oOoO0o0o
def O00O00o0ooo ( proxysettings = None ) :
 if 9 - 9: IiiIIiII
 if proxysettings == None :
  if 31 - 31: IiiIIiII % O0000O + i11IiI1II . ooo
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":false}, "id":1}' )
 else :
  if 28 - 28: II1iiI1ii1iii - i11IiI1II % Ii
  I1I1iiII1 = proxysettings . split ( ':' )
  ooOOOOOOO0oo = I1I1iiII1 [ 0 ]
  OoI1 = I1I1iiII1 [ 1 ]
  iIiII1IiIIi = I1I1iiII1 [ 2 ]
  OOo00o00oOo0O = None
  OO00o0o00OOoO = None
  if 15 - 15: oo00oOoO0o0o
  if len ( I1I1iiII1 ) > 3 and '@' in I1I1iiII1 [ 3 ] :
   OOo00o00oOo0O = I1I1iiII1 [ 3 ] . split ( '@' ) [ 0 ]
   OO00o0o00OOoO = I1I1iiII1 [ 3 ] . split ( '@' ) [ 1 ]
   if 53 - 53: OOoOoO0o0o0OO
   if 26 - 26: oo0OoO / O000Ooo0o0OOo + OOoOoO0o0o0OO / Ii * oO00ooo0o0OO
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":true}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxytype", "value":' + str ( iIiII1IiIIi ) + '}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyserver", "value":"' + str ( ooOOOOOOO0oo ) + '"}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyport", "value":' + str ( OoI1 ) + '}, "id":1}' )
  if 12 - 12: IiiIIiII / O000Ooo0o0OOo - oO00ooo0o0OO * ooo
  if 60 - 60: oOO * i11IiI1II . IiiIIiII + O000Ooo0o0OOo % IIII % oo0OoO
  if not OOo00o00oOo0O == None :
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyusername", "value":"' + str ( OOo00o00oOo0O ) + '"}, "id":1}' )
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxypassword", "value":"' + str ( OO00o0o00OOoO ) + '"}, "id":1}' )
   if 10 - 10: OOoOoO0o0o0OO * Ooo0OoOo0OOOO . oo0OoO
   if 86 - 86: O00O + ooo % oo0OoO
def Iiii11iIi1I1 ( ) :
 oooO0 = Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.usehttpproxy" } , 'id' : 1 } ) [ 'value' ]
 if 24 - 24: O00oo0o / O000Ooo0o0OOo
 iIiII1IiIIi = Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxytype" } , 'id' : 1 } ) [ 'value' ]
 if 45 - 45: Ii - Ooo0OoOo0OOOO . O00O - O0000O . O00oo0o / O00oo0o
 if oooO0 :
  ooOOOOOOO0oo = Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyserver" } , 'id' : 1 } ) [ 'value' ]
  OoI1 = unicode ( Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyport" } , 'id' : 1 } ) [ 'value' ] )
  OOo00o00oOo0O = Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyusername" } , 'id' : 1 } ) [ 'value' ]
  OO00o0o00OOoO = Iiii1Ii ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxypassword" } , 'id' : 1 } ) [ 'value' ]
  if 40 - 40: O0000O - IIII + I1Ii . IIII + II1iiI1ii1iii
  if OOo00o00oOo0O and OO00o0o00OOoO and ooOOOOOOO0oo and OoI1 :
   return ooOOOOOOO0oo + ':' + str ( OoI1 ) + ':' + str ( iIiII1IiIIi ) + ':' + OOo00o00oOo0O + '@' + OO00o0o00OOoO
  elif ooOOOOOOO0oo and OoI1 :
   return ooOOOOOOO0oo + ':' + str ( OoI1 ) + ':' + str ( iIiII1IiIIi )
 else :
  return None
  if 73 - 73: O000Ooo0o0OOo * Ooo0OoOo0OOOO * IiiIIiII * O000Ooo0o0OOo . O00oo0o - i11IiI1II
def Ooooo0O0Oo ( media_url , name , iconImage , proxyip , port , proxyuser = None , proxypass = None ) :
 if 21 - 21: IIII + Ooo0OoOo0OOOO . O00oo0o . II1iiI1ii1iii % OOoOoO0o0o0OO
 if media_url == None or media_url == '' :
  xbmc . executebuiltin ( "XBMC.Notification(Planeta,Unable to play empty Url,5000," + OO00Ooo0o + ")" )
  return
 Ooo0oo00OO0OO = xbmcgui . DialogProgress ( )
 Ooo0oo00OO0OO . create ( 'Progress' , 'Playing with custom proxy' )
 Ooo0oo00OO0OO . update ( 10 , "" , "setting proxy.." , "" )
 I1111 = False
 iIII111i1 = ''
 if 94 - 94: O00O % Ii + II1i111iI1ii
 try :
  if 74 - 74: iiiI1iiI1i / IIII - O0000O / i11IiI1II - i11IiI1II
  iIII111i1 = Iiii11iIi1I1 ( )
  print 'existing_proxy' , iIII111i1
  if 38 - 38: I1Ii - O00O * iiI
  if 32 - 32: i11IiI1II % IIII
  if not proxyuser == None :
   O00O00o0ooo ( proxyip + ':' + port + ':0:' + proxyuser + '@' + proxypass )
  else :
   O00O00o0ooo ( proxyip + ':' + port + ':0' )
   if 50 - 50: i11IiI1II / OOoOoO0o0o0OO
  print 'proxy setting complete playing' , media_url
  I1111 = True
  Ooo0oo00OO0OO . update ( 80 , "" , "setting proxy complete, now playing" , "" )
  if 25 - 25: oo00oOoO0o0o / O00oo0o % O000Ooo0o0OOo % oo00oOoO0o0o / II1i111iI1ii - Ii
  if 38 - 38: O0000O
  import CustomPlayer
  OOoOO = CustomPlayer . MyXBMCPlayer ( )
  OOoOO . pdialogue == Ooo0oo00OO0OO
  I1I1i11 = xbmcgui . ListItem ( label = str ( name ) , iconImage = iconImage , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  OOoOO . play ( media_url , I1I1i11 )
  xbmc . sleep ( 1000 )
  if 19 - 19: iiiI1iiI1i / I1Ii . iiI + oOO . I1Ii
  if 59 - 59: O0000O % Ooo0OoOo0OOOO - ooo - Ooo0OoOo0OOOO
  import time
  oooOOo0 = time . time ( )
  try :
   while OOoOO . is_active :
    xbmc . sleep ( 1000 )
    if OOoOO . urlplayed == False and time . time ( ) - oooOOo0 > 12 :
     print 'failed!!!'
     xbmc . executebuiltin ( "XBMC.Notification(Planeta,Unable to play check proxy,5000," + OO00Ooo0o + ")" )
     break
     if 51 - 51: i11IiI1II % oo0OoO . iiI % II1iiI1ii1iii
  except : pass
  if 10 - 10: oOO - Ooo0OoOo0OOOO + I1Ii + oO00ooo0o0OO % OOoOoO0o0o0OO - i11IiI1II
  Ooo0oo00OO0OO . close ( )
  Ooo0oo00OO0OO = None
 except :
  traceback . print_exc ( )
 if Ooo0oo00OO0OO :
  Ooo0oo00OO0OO . close ( )
 if I1111 :
  print 'now resetting the proxy back'
  O00O00o0ooo ( iIII111i1 )
  print 'reset here'
 return ''
 if 56 - 56: i11IiI1II / Ooo0OoOo0OOOO
 if 70 - 70: O00O
def O00ooOoOO00 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  Oo0000O0O0 = page_value
  page_value = iIii1I ( page_value , headers = referer )
  if 38 - 38: oo00oOoO0o0o / i11IiI1II % II1i111iI1ii
 iI1iiI1Ii = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 85 - 85: O00oo0o + oo00oOoO0o0o % oo00oOoO0o0o * O00oo0o - OOoOoO0o0o0OO / oO00ooo0o0OO
 Oo0o = re . compile ( iI1iiI1Ii ) . findall ( page_value )
 iiIII = ""
 if Oo0o and len ( Oo0o ) > 0 :
  for II1I11I1III1 in Oo0o :
   I1iIIi = oOi1IiI1iII1iii ( II1I11I1III1 )
   I11iiiI1IiI = oOiiIIIiIi111i ( I1iIIi , '\'(.*?)\'' )
   if 'unescape' in I1iIIi :
    I1iIIi = urllib . unquote ( I11iiiI1IiI )
   iiIII += I1iIIi + '\n'
   if 51 - 51: iiiI1iiI1i + O000Ooo0o0OOo + I1Ii + iiI % O000Ooo0o0OOo
   if 67 - 67: i11IiI1II / iiI / oO00ooo0o0OO
  Oo0000O0O0 = oOiiIIIiIi111i ( iiIII , 'src="(.*?)"' )
  if 89 - 89: I1Ii - Ooo0OoOo0OOOO . I1Ii + IIII * OOoOoO0o0o0OO
  page_value = iIii1I ( Oo0000O0O0 , headers = referer )
  if 50 - 50: IiiIIiII * O000Ooo0o0OOo % O00oo0o * O000Ooo0o0OOo
  if 53 - 53: I1Ii * O0000O
  if 13 - 13: Ii
 OOOoO0Oo0 = oOiiIIIiIi111i ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 o0OOoo00O = oOiiIIIiIi111i ( page_value , 'file\',\s\'(.*?)\'' )
 if 61 - 61: IiiIIiII
 if 22 - 22: oO00ooo0o0OO . O000Ooo0o0OOo - oo0OoO . oo0OoO * O0000O / Ooo0OoOo0OOOO
 return OOOoO0Oo0 + ' playpath=' + o0OOoo00O + ' pageUrl=' + Oo0000O0O0
 if 67 - 67: Ooo0OoOo0OOOO
def OoIII1Ii11Iiii ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = iIii1I ( page_value , headers = referer )
 iI1iiI1Ii = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 Oo0o = re . compile ( iI1iiI1Ii ) . findall ( page_value ) [ 0 ]
 if 42 - 42: iiI / O000Ooo0o0OOo - O0000O + II1i111iI1ii
 iI11iI1 , iIIiIII1i , o0 , o00ooooO00 , IiOo0ooOo0Oo , II1I11I1III1 = ( Oo0o )
 IiOo0ooOo0Oo = int ( IiOo0ooOo0Oo )
 iI11iI1 = int ( iI11iI1 ) / IiOo0ooOo0Oo
 iIIiIII1i = int ( iIIiIII1i ) / IiOo0ooOo0Oo
 o0 = int ( o0 ) / IiOo0ooOo0Oo
 o00ooooO00 = int ( o00ooooO00 ) / IiOo0ooOo0Oo
 if 4 - 4: IiiIIiII
 Ii11iII1i = 'rtmp://' + str ( iI11iI1 ) + '.' + str ( iIIiIII1i ) + '.' + str ( o0 ) + '.' + str ( o00ooooO00 ) + II1I11I1III1 ;
 return Ii11iII1i
 if 47 - 47: I1Ii + O00oo0o . iiI
def o0O00oOO00000 ( url , useragent = None ) :
 oo = '#EXTM3U'
 oo += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 oo += '\n' + url + '&bytes=0-200000'
 O0O = os . path . join ( o00 , 'testfile.m3u' )
 oo += '\n'
 IIIIiI1i1iI ( O0O , oo )
 if 60 - 60: IiiIIiII - IIII * I1Ii + O00oo0o / O000Ooo0o0OOo
 return O0O
 if 8 - 8: iiI / oo00oOoO0o0o % O0000O
def IIIIiI1i1iI ( file_name , page_data , append = False ) :
 if append :
  IiOo0ooOo0Oo = open ( file_name , 'a' )
  IiOo0ooOo0Oo . write ( page_data )
  IiOo0ooOo0Oo . close ( )
 else :
  IiOo0ooOo0Oo = open ( file_name , 'wb' )
  IiOo0ooOo0Oo . write ( page_data )
  IiOo0ooOo0Oo . close ( )
  return ''
  if 84 - 84: iiiI1iiI1i
def i1111III ( file_name ) :
 IiOo0ooOo0Oo = open ( file_name , 'rb' )
 o00ooooO00 = IiOo0ooOo0Oo . read ( )
 IiOo0ooOo0Oo . close ( )
 return o00ooooO00
 if 76 - 76: ooo / O0000O . Ii * ooo
def IIIii111i1I1i ( page_data ) :
 import re , base64 , urllib ;
 IiIII111i = page_data
 while 'geh(' in IiIII111i :
  if IiIII111i . startswith ( 'lol(' ) : IiIII111i = IiIII111i [ 5 : - 1 ]
  if 58 - 58: oo0OoO + Ooo0OoOo0OOOO / IIII + oO00ooo0o0OO * iiI + O000Ooo0o0OOo
  IiIII111i = re . compile ( '"(.*?)"' ) . findall ( IiIII111i ) [ 0 ] ;
  IiIII111i = base64 . b64decode ( IiIII111i ) ;
  IiIII111i = urllib . unquote ( IiIII111i ) ;
 print IiIII111i
 return IiIII111i
 if 99 - 99: iiiI1iiI1i - O00O
def I1iiI ( page_data ) :
 if 80 - 80: iiI - ooo % Ii
 OO000 = iIii1I ( page_data ) ;
 IiIIi1I1iiI = '(http.*)'
 import uuid
 Ooo0oOO = str ( uuid . uuid1 ( ) ) . upper ( )
 iIiiIiI = re . compile ( IiIIi1I1iiI ) . findall ( OO000 )
 ii1IIIi = [ ( 'X-Playback-Session-Id' , Ooo0oOO ) ]
 for ooooooo0oOOo in iIiiIiI :
  try :
   ii1iIiII1IIi = iIii1I ( ooooooo0oOOo , headers = ii1IIIi ) ;
   if 74 - 74: iiI * OOoOoO0o0o0OO / IiiIIiII * iiiI1iiI1i
  except : pass
  if 59 - 59: i11IiI1II * IIII
 return page_data + '|&X-Playback-Session-Id=' + Ooo0oOO
 if 62 - 62: Ooo0OoOo0OOOO / II1i111iI1ii . oo00oOoO0o0o * IIII . Ii
 if 18 - 18: O000Ooo0o0OOo
def oOO00 ( page_data ) :
 if 41 - 41: II1iiI1ii1iii
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  ii1IIIi = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = iIii1I ( page_data , headers = ii1IIIi ) ;
  if 58 - 58: ooo
 if '127.0.0.1' in page_data :
  return oOOO0o ( page_data )
 elif oOiiIIIiIi111i ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ii1111iI1I1II = oOiiIIIiIi111i ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oOiiIIIiIi111i ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oOiiIIIiIi111i ( page_data , '\\?y=([^&]+)&' )
 else :
  ii1111iI1I1II = oOiiIIIiIi111i ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( ii1111iI1I1II ) == 0 :
   ii1111iI1I1II = page_data
 ii1111iI1I1II = ii1111iI1I1II . replace ( ' ' , '%20' )
 return ii1111iI1I1II
 if 47 - 47: iiiI1iiI1i - II1i111iI1ii / ooo + O0000O + O000Ooo0o0OOo % IIII
def oOiiIIIiIi111i ( data , re_patten ) :
 oOOOoo = ''
 i1Ii = re . search ( re_patten , data )
 if i1Ii != None :
  oOOOoo = i1Ii . group ( 1 )
 else :
  oOOOoo = ''
 return oOOOoo
 if 69 - 69: O00O
def oOOO0o ( page_data ) :
 ii1111iI1I1II = ''
 if '127.0.0.1' in page_data :
  ii1111iI1I1II = oOiiIIIiIi111i ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + oOiiIIIiIi111i ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 45 - 45: oOO * Ii
 if oOiiIIIiIi111i ( page_data , 'token=([^&]+)&' ) != '' :
  ii1111iI1I1II = ii1111iI1I1II + '?token=' + oOiiIIIiIi111i ( page_data , 'token=([^&]+)&' )
 elif oOiiIIIiIi111i ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ii1111iI1I1II = oOiiIIIiIi111i ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oOiiIIIiIi111i ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oOiiIIIiIi111i ( page_data , '\\?y=([^&]+)&' )
 else :
  ii1111iI1I1II = oOiiIIIiIi111i ( page_data , 'HREF="([^"]+)"' )
  if 7 - 7: II1i111iI1ii * IiiIIiII * Ooo0OoOo0OOOO
 if 'dag1.asx' in ii1111iI1I1II :
  return oOO00 ( ii1111iI1I1II )
  if 92 - 92: oo0OoO + O000Ooo0o0OOo - ooo - oOO / IIII
 if 'devinlivefs.fplive.net' not in ii1111iI1I1II :
  ii1111iI1I1II = ii1111iI1I1II . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in ii1111iI1I1II :
  ii1111iI1I1II = ii1111iI1I1II . replace ( 'permlive' , 'flive' )
 return ii1111iI1I1II
 if 18 - 18: iiiI1iiI1i * IIII - II1iiI1ii1iii * O0000O
 if 97 - 97: O0000O
def ooO0II ( str_eval ) :
 Ooo000O00o0O = ""
 try :
  o00o0oo0Ooo0 = "w,i,s,e=(" + str_eval + ')'
  exec ( o00o0oo0Ooo0 )
  Ooo000O00o0O = i11IiiiiI11i11III ( w , o0O0Oo00 , IiIII111i , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 25 - 25: oO00ooo0o0OO . O00oo0o + I1Ii
 return Ooo000O00o0O
 if 93 - 93: O000Ooo0o0OOo % I1Ii + iiI % iiI % oO00ooo0o0OO
def i11IiiiiI11i11III ( w , i , s , e ) :
 iiiI1I = 0 ;
 IiiIiI11 = 0 ;
 oo000O0 = 0 ;
 i11ii1 = [ ] ;
 iIiIi11I11I = [ ] ;
 while True :
  if ( iiiI1I < 5 ) :
   iIiIi11I11I . append ( w [ iiiI1I ] )
  elif ( iiiI1I < len ( w ) ) :
   i11ii1 . append ( w [ iiiI1I ] ) ;
  iiiI1I += 1 ;
  if ( IiiIiI11 < 5 ) :
   iIiIi11I11I . append ( i [ IiiIiI11 ] )
  elif ( IiiIiI11 < len ( i ) ) :
   i11ii1 . append ( i [ IiiIiI11 ] )
  IiiIiI11 += 1 ;
  if ( oo000O0 < 5 ) :
   iIiIi11I11I . append ( s [ oo000O0 ] )
  elif ( oo000O0 < len ( s ) ) :
   i11ii1 . append ( s [ oo000O0 ] ) ;
  oo000O0 += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( i11ii1 ) + len ( iIiIi11I11I ) + len ( e ) ) :
   break ;
   if 8 - 8: O00O
 II11iII11i1ii = '' . join ( i11ii1 )
 iIIi1II1Ii1I = '' . join ( iIiIi11I11I )
 IiiIiI11 = 0 ;
 o0Oo0OoO0 = [ ] ;
 for iiiI1I in range ( 0 , len ( i11ii1 ) , 2 ) :
  if 39 - 39: II1i111iI1ii % I1Ii + Ii + OOoOoO0o0o0OO % Ii
  OO0ooo0O = - 1 ;
  if ( ord ( iIIi1II1Ii1I [ IiiIiI11 ] ) % 2 ) :
   OO0ooo0O = 1 ;
   if 84 - 84: iiiI1iiI1i
  o0Oo0OoO0 . append ( chr ( int ( II11iII11i1ii [ iiiI1I : iiiI1I + 2 ] , 36 ) - OO0ooo0O ) ) ;
  IiiIiI11 += 1 ;
  if ( IiiIiI11 >= len ( iIiIi11I11I ) ) :
   IiiIiI11 = 0 ;
 Ii11iII1i = '' . join ( o0Oo0OoO0 )
 if 'eval(function(w,i,s,e)' in Ii11iII1i :
  if 78 - 78: II1i111iI1ii / Ooo0OoOo0OOOO / O00O
  Ii11iII1i = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( Ii11iII1i ) [ 0 ]
  return ooO0II ( Ii11iII1i )
 else :
  if 83 - 83: iiI / O00oo0o / iiiI1iiI1i % IiiIIiII . oo00oOoO0o0o
  return Ii11iII1i
  if 85 - 85: O00oo0o % oOO * oo00oOoO0o0o
def oOi1IiI1iII1iii ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  OOOOo00ooOO00o = None
  if page_value . startswith ( "http" ) :
   page_value = iIii1I ( page_value )
   if 10 - 10: O0000O . Ii - O00oo0o / Ii
  if regex_for_text and len ( regex_for_text ) > 0 :
   try :
    page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   except : return 'NOTPACKED'
   if 68 - 68: OOoOoO0o0o0OO - OOoOoO0o0o0OO - Ii
  page_value = OoOo0OoOo ( page_value , iterations , total_iteration )
 except :
  page_value = 'UNPACKEDFAILED'
  traceback . print_exc ( file = sys . stdout )
  if 8 - 8: Ooo0OoOo0OOOO
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  if 53 - 53: oo00oOoO0o0o + Ii % i11IiI1II . oo00oOoO0o0o
 return page_value
 if 87 - 87: O00oo0o * OOoOoO0o0o0OO
def OoOo0OoOo ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 if 54 - 54: O000Ooo0o0OOo / O0000O
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  ooOoo = sJavascript . split ( 'var _0xcb8a=' )
  o00o0oo0Ooo0 = "myarray=" + ooOoo [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( o00o0oo0Ooo0 )
  Ii1I1I = 62
  IIIii = int ( ooOoo [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  O0 = myarray [ 0 ]
  iiiIIIi = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as IIIII1II1 :
   IIIII1II1 . write ( str ( iiiIIIi ) )
   if 16 - 16: Ooo0OoOo0OOOO * II1i111iI1ii / II1iiI1ii1iii . O000Ooo0o0OOo / O000Ooo0o0OOo - O00oo0o
 else :
  if 82 - 82: II1i111iI1ii . i11IiI1II / i11IiI1II * Ooo0OoOo0OOOO % i11IiI1II
  if "rn p}('" in sJavascript :
   ooOoo = sJavascript . split ( "rn p}('" )
  else :
   ooOoo = sJavascript . split ( "rn A}('" )
   if 77 - 77: iiiI1iiI1i
   if 47 - 47: O000Ooo0o0OOo
  O0 , Ii1I1I , IIIii , iiiIIIi = ( '' , '0' , '0' , '' )
  if 69 - 69: iiiI1iiI1i
  o00o0oo0Ooo0 = "p1,a1,c1,k1=('" + ooOoo [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( o00o0oo0Ooo0 )
 iiiIIIi = iiiIIIi . split ( '|' )
 ooOoo = ooOoo [ 1 ] . split ( "))'" )
 if 35 - 35: oo00oOoO0o0o . oo0OoO + OOoOoO0o0o0OO % oo00oOoO0o0o / O0000O - I1Ii
 if 6 - 6: IIII % OOoOoO0o0o0OO / O00oo0o * O00oo0o
 if 2 - 2: Ii
 if 88 - 88: Ooo0OoOo0OOOO * iiI % II1i111iI1ii
 if 83 - 83: iiiI1iiI1i / II1iiI1ii1iii + oOO * O0000O % iiiI1iiI1i
 if 17 - 17: O00oo0o % O0000O + ooo + i11IiI1II . oO00ooo0o0OO - oO00ooo0o0OO
 if 10 - 10: Ooo0OoOo0OOOO * ooo * OOoOoO0o0o0OO
 if 90 - 90: i11IiI1II - O0000O % O00O
 if 50 - 50: II1i111iI1ii - ooo - iiI / Ooo0OoOo0OOOO / O00oo0o . Ii
 if 83 - 83: iiI * O00oo0o % II1i111iI1ii . I1Ii * II1iiI1ii1iii . oo00oOoO0o0o
 if 3 - 3: O000Ooo0o0OOo - iiiI1iiI1i - II1iiI1ii1iii - IiiIIiII
 if 49 - 49: O0000O * OOoOoO0o0o0OO + ooo + iiI
 if 52 - 52: ooo . II1iiI1ii1iii
 if 48 - 48: Ii % IiiIIiII * oo00oOoO0o0o / IiiIIiII / O0000O / O00O
 if 56 - 56: II1i111iI1ii % iiI - II1i111iI1ii
 if 35 - 35: OOoOoO0o0o0OO + I1Ii + ooo - oo00oOoO0o0o % IIII % IiiIIiII
 if 10 - 10: IIII . ooo . Ooo0OoOo0OOOO * i11IiI1II
 if 9 - 9: oO00ooo0o0OO - IIII % Ii
 if 9 - 9: Ooo0OoOo0OOOO - Ooo0OoOo0OOOO / I1Ii
 if 52 - 52: i11IiI1II % O0000O + ooo
 if 41 - 41: oOO
 if 60 - 60: O00oo0o + II1iiI1ii1iii + Ii + O00oo0o
 ii11iI1i = ''
 o00ooooO00 = ''
 if 71 - 71: OOoOoO0o0o0OO * O0000O * O00oo0o + OOoOoO0o0o0OO / IIII % O000Ooo0o0OOo
 if 44 - 44: IiiIIiII - O000Ooo0o0OOo % IIII . ooo
 i111I = str ( Ii1O0 ( O0 , Ii1I1I , IIIii , iiiIIIi , ii11iI1i , o00ooooO00 , iteration ) )
 if 73 - 73: iiI . IiiIIiII / Ooo0OoOo0OOOO - I1Ii + i11IiI1II + ooo
 if 21 - 21: OOoOoO0o0o0OO / Ooo0OoOo0OOOO - oo00oOoO0o0o - iiiI1iiI1i % oo00oOoO0o0o - oO00ooo0o0OO
 if 83 - 83: O00oo0o . IiiIIiII / ooo * iiI . iiI
 if 9 - 9: oO00ooo0o0OO * Ooo0OoOo0OOOO - II1iiI1ii1iii
 if 31 - 31: O00oo0o
 if iteration >= totaliterations :
  if 18 - 18: oO00ooo0o0OO + O0000O % O000Ooo0o0OOo * oo0OoO
  return i111I
 else :
  if 7 - 7: O000Ooo0o0OOo
  return OoOo0OoOo ( i111I , iteration + 1 )
  if 80 - 80: O00oo0o . OOoOoO0o0o0OO
def Ii1O0 ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 15 - 15: OOoOoO0o0o0OO . O00oo0o / iiI / iiI % OOoOoO0o0o0OO
 if 73 - 73: Ii * ooo + O0000O
 if 73 - 73: OOoOoO0o0o0OO
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   I1iii1ii1iiII = str ( II1Iii ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + I1iii1ii1iiII + '\\b' , k [ c ] , p )
   else :
    p = I11i1IIiii ( p , I1iii1ii1iiII , k [ c ] )
    if 62 - 62: Ii . O00oo0o . oo00oOoO0o0o
    if 55 - 55: oo00oOoO0o0o
    if 100 - 100: i11IiI1II * oo0OoO
    if 90 - 90: Ii - I1Ii
    if 50 - 50: i11IiI1II . i11IiI1II
    if 84 - 84: oo0OoO
 return p
 if 15 - 15: O00O * I1Ii
 if 95 - 95: Ii * OOoOoO0o0o0OO % O00O + OOoOoO0o0o0OO % oO00ooo0o0OO % iiiI1iiI1i
 if 41 - 41: O000Ooo0o0OOo / OOoOoO0o0o0OO / O00O % II1iiI1ii1iii
def I11i1IIiii ( source_str , word_to_find , replace_with ) :
 IiI1i1i11i = None
 IiI1i1i11i = source_str . split ( word_to_find )
 if len ( IiI1i1i11i ) > 1 :
  oO000O0OO00O = [ ]
  O00O0OOO0OOoO = 0
  for III1I1i1i in IiI1i1i11i :
   if 1 - 1: IiiIIiII - oo0OoO - O00oo0o / O00O
   oO000O0OO00O . append ( III1I1i1i )
   I1iiIi = word_to_find
   if 92 - 92: O00oo0o / oOO + iiI
   if 65 - 65: Ii * O000Ooo0o0OOo - O000Ooo0o0OOo
   if O00O0OOO0OOoO == len ( IiI1i1i11i ) - 1 :
    I1iiIi = ''
   else :
    if len ( III1I1i1i ) == 0 :
     if ( len ( IiI1i1i11i [ O00O0OOO0OOoO + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiI1i1i11i [ O00O0OOO0OOoO + 1 ] ) > 0 and IiI1i1i11i [ O00O0OOO0OOoO + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      I1iiIi = replace_with
      if 35 - 35: Ooo0OoOo0OOOO % oo00oOoO0o0o
    else :
     if ( IiI1i1i11i [ O00O0OOO0OOoO ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( IiI1i1i11i [ O00O0OOO0OOoO + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiI1i1i11i [ O00O0OOO0OOoO + 1 ] ) > 0 and IiI1i1i11i [ O00O0OOO0OOoO + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      I1iiIi = replace_with
      if 85 - 85: II1iiI1ii1iii + O000Ooo0o0OOo
   oO000O0OO00O . append ( I1iiIi )
   O00O0OOO0OOoO += 1
   if 46 - 46: oo00oOoO0o0o / i11IiI1II + IiiIIiII * O0000O % O00O
  source_str = '' . join ( oO000O0OO00O )
 return source_str
 if 8 - 8: O00oo0o
def i111OOOO0Oo ( num , radix ) :
 if 27 - 27: O0000O % oO00ooo0o0OO + iiiI1iiI1i / oo00oOoO0o0o / oo00oOoO0o0o
 i1i = ""
 if num == 0 : return '0'
 while num > 0 :
  i1i = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + i1i
  num /= radix
 return i1i
 if 34 - 34: I1Ii % oO00ooo0o0OO % II1i111iI1ii % OOoOoO0o0o0OO % IiiIIiII + i11IiI1II
def II1Iii ( cc , a ) :
 I1iii1ii1iiII = "" if cc < a else II1Iii ( int ( cc / a ) , a )
 cc = ( cc % a )
 Iiii11i = chr ( cc + 29 ) if cc > 35 else str ( i111OOOO0Oo ( cc , 36 ) )
 return I1iii1ii1iiII + Iiii11i
 if 65 - 65: iiiI1iiI1i + O00O * iiI % Ooo0OoOo0OOOO % O0000O
 if 54 - 54: O000Ooo0o0OOo + i11IiI1II * O000Ooo0o0OOo
def oOo0Oo ( cookieJar ) :
 try :
  ii1i = ""
  for I1Ii1iiI11i1 , II11iii1iI1I in enumerate ( cookieJar ) :
   ii1i += II11iii1iI1I . name + "=" + II11iii1iI1I . value + ";"
 except : pass
 if 18 - 18: oo0OoO % oOO * O000Ooo0o0OOo - oO00ooo0o0OO . II1i111iI1ii
 return ii1i
 if 58 - 58: I1Ii + iiiI1iiI1i - Ooo0OoOo0OOOO % I1Ii % II1iiI1ii1iii / oo0OoO
 if 58 - 58: I1Ii * OOoOoO0o0o0OO - IIII * O00O
def O0oOo ( cookieJar , COOKIEFILE ) :
 try :
  OOOoO = os . path . join ( o00 , COOKIEFILE )
  cookieJar . save ( OOOoO , ignore_discard = True )
 except : pass
 if 77 - 77: Ooo0OoOo0OOOO
def i1IioOO0Oo0o ( COOKIEFILE ) :
 if 100 - 100: oo0OoO
 OOoOOoOo0O0O0 = None
 if COOKIEFILE :
  try :
   OOOoO = os . path . join ( o00 , COOKIEFILE )
   OOoOOoOo0O0O0 = cookielib . LWPCookieJar ( )
   OOoOOoOo0O0O0 . load ( OOOoO , ignore_discard = True )
  except :
   OOoOOoOo0O0O0 = None
   if 1 - 1: II1iiI1ii1iii % i11IiI1II . Ii
 if not OOoOOoOo0O0O0 :
  OOoOOoOo0O0O0 = cookielib . LWPCookieJar ( )
  if 82 - 82: IIII
 return OOoOOoOo0O0O0
 if 38 - 38: IiiIIiII
def ooOO ( fun_call , page_data , Cookie_Jar , m ) :
 iI11Ii1ii111 = ''
 if 67 - 67: IIII + Ooo0OoOo0OOOO - oo00oOoO0o0o * II1iiI1ii1iii
 if Oo not in sys . path :
  sys . path . append ( Oo )
  if 77 - 77: II1iiI1ii1iii + iiiI1iiI1i + oOO . oo00oOoO0o0o % oO00ooo0o0OO
  if 38 - 38: O00O * oo00oOoO0o0o - II1iiI1ii1iii
 try :
  o0o0o00oO0 = 'import ' + fun_call . split ( '.' ) [ 0 ]
  if 7 - 7: O000Ooo0o0OOo
  exec ( o0o0o00oO0 )
  if 96 - 96: I1Ii * OOoOoO0o0o0OO + ooo / II1iiI1ii1iii
 except :
  if 76 - 76: oo0OoO . II1iiI1ii1iii % IIII - oo0OoO
  traceback . print_exc ( file = sys . stdout )
  if 71 - 71: O000Ooo0o0OOo - O0000O - IiiIIiII
 exec ( 'ret_val=' + fun_call )
 if 94 - 94: O000Ooo0o0OOo * II1iiI1ii1iii / O00oo0o * IIII - O00oo0o
 if 75 - 75: IiiIIiII . O00O + O00oo0o - OOoOoO0o0o0OO % O00O * O00oo0o
 try :
  return str ( iI11Ii1ii111 )
 except : return iI11Ii1ii111
 if 45 - 45: ooo . OOoOoO0o0o0OO + oo00oOoO0o0o . oo0OoO - iiiI1iiI1i % iiiI1iiI1i
def O0OO000000oO0 ( fun_call , page_data , Cookie_Jar , m ) :
 if 2 - 2: iiiI1iiI1i % OOoOoO0o0o0OO * O00oo0o + oo00oOoO0o0o - IiiIIiII
 try :
  global IiiiiI1
  IiiiiI1 = IiiiiI1 + 1
  iI11Ii1ii111 = ''
  print 'doooodoo'
  if Oo not in sys . path :
   sys . path . append ( Oo )
   if 88 - 88: oO00ooo0o0OO . Ii % oo0OoO * O00oo0o + Ii
  ooOOO00oO00 = 'LSProdynamicCode%s.py' % str ( IiiiiI1 )
  IiIii11iIi11 = os . path . join ( Oo , ooOOO00oO00 )
  IiOo0ooOo0Oo = open ( IiIii11iIi11 , "wb" )
  IiOo0ooOo0Oo . write ( "# -*- coding: utf-8 -*-\n" )
  IiOo0ooOo0Oo . write ( fun_call . encode ( "utf-8" ) ) ;
  IiOo0ooOo0Oo . close ( )
  print 'before do'
  iII11i = Ooo00 ( ooOOO00oO00 . split ( '.' ) [ 0 ] , IiIii11iIi11 )
  print 'after'
  if 19 - 19: O00oo0o * IIII - O0000O + iiI % Ooo0OoOo0OOOO
  iI11Ii1ii111 = iII11i . GetLSProData ( page_data , Cookie_Jar , m )
  try :
   return str ( iI11Ii1ii111 )
  except : return iI11Ii1ii111
 except : traceback . print_exc ( )
 return ""
 if 19 - 19: oOO - IIII . iiI / O00O + oO00ooo0o0OO + OOoOoO0o0o0OO
def Ooo00 ( full_name , filenamewithpath ) :
 try :
  if 79 - 79: iiI * oo00oOoO0o0o + II1iiI1ii1iii
  import importlib
  return importlib . import_module ( full_name , package = None )
 except :
  import imp
  return imp . load_source ( full_name , filenamewithpath )
  if 68 - 68: oOO
  if 66 - 66: Ooo0OoOo0OOOO + I1Ii + i11IiI1II * O00O
def IIii1II111iI ( captchakey , cj , type = 1 ) :
 if 90 - 90: O000Ooo0o0OOo % i11IiI1II * I1Ii / O00O % OOoOoO0o0o0OO / i11IiI1II
 if 27 - 27: IIII / IiiIIiII
 if 59 - 59: IIII / i11IiI1II % O000Ooo0o0OOo
 OOOOOO00O = ""
 Iii1I1I1i11I1 = ""
 if 20 - 20: Ooo0OoOo0OOOO / Ii . Ooo0OoOo0OOOO
 if 16 - 16: IIII / ooo . OOoOoO0o0o0OO % O0000O
 if 9 - 9: iiiI1iiI1i * oo00oOoO0o0o . O000Ooo0o0OOo - IiiIIiII * oOO . II1i111iI1ii
 if 54 - 54: O000Ooo0o0OOo
 if 42 - 42: iiiI1iiI1i % O00oo0o + I1Ii % II1i111iI1ii
 oo00o0OO0o = False
 iIiI1Ii = None
 Iii1I1I1i11I1 = None
 if len ( captchakey ) > 0 :
  OoOoOOO = captchakey
  if not OoOoOOO . startswith ( 'http' ) :
   OoOoOOO = 'http://www.google.com/recaptcha/api/challenge?k=' + OoOoOOO + '&ajax=1'
   if 45 - 45: oo0OoO / oOO + iiI
  oo00o0OO0o = True
  if 69 - 69: Ii
  o0OoooO = 'challenge.*?\'(.*?)\''
  OOOOO0oOo = '\'(.*?)\''
  oOoO0Ooo0OOO = iIii1I ( OoOoOOO , cookieJar = cj )
  OOOOOO00O = re . findall ( o0OoooO , oOoO0Ooo0OOO ) [ 0 ]
  II = 'http://www.google.com/recaptcha/api/reload?c=' ;
  oo0O00oooO0OO = OoOoOOO . split ( 'k=' ) [ 1 ]
  II += OOOOOO00O + '&k=' + oo0O00oooO0OO + '&reason=i&type=image&lang=en'
  IIiI1iii1 = iIii1I ( II , cookieJar = cj )
  iIiI1Ii = re . findall ( OOOOO0oOo , IIiI1iii1 ) [ 0 ]
  i1i1 = 'http://www.google.com/recaptcha/api/image?c=' + iIiI1Ii
  if not i1i1 . startswith ( "http" ) :
   i1i1 = 'http://www.google.com/recaptcha/api/' + i1i1
  import random
  I1111IIi1i = random . randrange ( 100 , 1000 , 5 )
  OOOoOoOoOoOo = os . path . join ( o00 , str ( I1111IIi1i ) + "captcha.img" )
  i1Iiii = open ( OOOoOoOoOoOo , "wb" )
  i1Iiii . write ( iIii1I ( i1i1 , cookieJar = cj ) )
  i1Iiii . close ( )
  iiIii11II11 = O00O0oO0Ooo ( captcha = OOOoOoOoOoOo )
  Iii1I1I1i11I1 = iiIii11II11 . get ( )
  os . remove ( OOOoOoOoOoOo )
  if 26 - 26: oO00ooo0o0OO % oO00ooo0o0OO
 if iIiI1Ii :
  if type == 1 :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( iIiI1Ii ) + '&recaptcha_response_field=' + urllib . quote_plus ( Iii1I1I1i11I1 )
  elif type == 2 :
   return 'recaptcha_challenge_field:' + iIiI1Ii + ',recaptcha_response_field:' + Iii1I1I1i11I1
  else :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( iIiI1Ii ) + '&recaptcha_response_field=' + urllib . quote_plus ( Iii1I1I1i11I1 )
 else :
  return ''
  if 41 - 41: oo0OoO / II1i111iI1ii + iiiI1iiI1i - I1Ii / oo0OoO
  if 24 - 24: O00O % iiI - II1i111iI1ii * oo00oOoO0o0o
def iIii1I ( url , cookieJar = None , post = None , timeout = 20 , headers = None , noredir = False ) :
 if 67 - 67: iiI . O00O / iiiI1iiI1i % Ii % oo0OoO
 if 14 - 14: Ii / oOO % OOoOoO0o0o0OO - II1i111iI1ii
 oOOOoO0OoOoO = urllib2 . HTTPCookieProcessor ( cookieJar )
 if 82 - 82: O00O / i11IiI1II
 if noredir :
  o0oOOOO0oooo0 = urllib2 . build_opener ( iiIoo000OoOOO0Oo , oOOOoO0OoOoO , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 else :
  o0oOOOO0oooo0 = urllib2 . build_opener ( oOOOoO0OoOoO , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
  if 45 - 45: II1i111iI1ii . IiiIIiII + oOO - oO00ooo0o0OO - IIII
 o0OOoo0 = urllib2 . Request ( url )
 o0OOoo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for IIiI11 , i1IIIiiiiI in headers :
   o0OOoo0 . add_header ( IIiI11 , i1IIIiiiiI )
   if 33 - 33: Ii
 ii1Ii = o0oOOOO0oooo0 . open ( o0OOoo0 , post , timeout = timeout )
 O0o0oooo00 = ii1Ii . read ( )
 ii1Ii . close ( )
 return O0o0oooo00 ;
 if 34 - 34: ooo . IIII - O00oo0o . oO00ooo0o0OO
def i1 ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 ooI1I = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 OOoooo0O = '' ;
 for o0O0Oo00 in range ( len ( ooI1I ) ) :
  OOoooo0O += chr ( ord ( ooI1I [ o0O0Oo00 ] ) - ooI1I [ len ( ooI1I ) - 1 ] ) ;
 OOoooo0O = urllib . unquote ( OOoooo0O )
 if 63 - 63: oo0OoO - II1iiI1ii1iii / Ooo0OoOo0OOOO . O00oo0o + iiI
 return OOoooo0O
 if 31 - 31: iiI * O00O * oo0OoO . iiiI1iiI1i - II1iiI1ii1iii
def OoO00O0OooOo ( str ) :
 O0Oo = re . findall ( 'unescape\(\'(.*?)\'' , str )
 if 97 - 97: O0000O + I1Ii . iiiI1iiI1i / Ooo0OoOo0OOOO * Ooo0OoOo0OOOO
 if ( not O0Oo == None ) and len ( O0Oo ) > 0 :
  for o0OoOOO00oOO in O0Oo :
   if 99 - 99: iiI / iiiI1iiI1i + iiiI1iiI1i . oo00oOoO0o0o
   str = str . replace ( o0OoOOO00oOO , urllib . unquote ( o0OoOOO00oOO ) )
 return str
 if 10 - 10: oo00oOoO0o0o
iI1iIi = 0
def I1iIi1111i1I ( m , html_page , cookieJar ) :
 global iI1iIi
 iI1iIi += 1
 oo0oOoo0oOO = m [ 'expres' ]
 Oo0000O0O0 = m [ 'page' ]
 II1I1111I1i = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( oo0oOoo0oOO ) [ 0 ]
 if 38 - 38: IIII * iiiI1iiI1i - oo00oOoO0o0o
 OoOoOOO = re . compile ( II1I1111I1i ) . findall ( html_page ) [ 0 ]
 if 5 - 5: oo00oOoO0o0o . oO00ooo0o0OO + Ooo0OoOo0OOOO
 if not OoOoOOO . startswith ( "http" ) :
  iIii1Ii11IIIi = 'http://' + "" . join ( Oo0000O0O0 . split ( '/' ) [ 2 : 3 ] )
  if OoOoOOO . startswith ( "/" ) :
   OoOoOOO = iIii1Ii11IIIi + OoOoOOO
  else :
   OoOoOOO = iIii1Ii11IIIi + '/' + OoOoOOO
   if 62 - 62: IIII % iiI / IIII / oOO
 OOOoOoOoOoOo = os . path . join ( o00 , str ( iI1iIi ) + "captcha.jpg" )
 i1Iiii = open ( OOOoOoOoOoOo , "wb" )
 if 37 - 37: O00oo0o * Ooo0OoOo0OOOO + oOO * Ii * O00oo0o
 o0OOoo0 = urllib2 . Request ( OoOoOOO )
 o0OOoo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  o0OOoo0 . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  o0OOoo0 . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  if 60 - 60: Ooo0OoOo0OOOO * II1i111iI1ii * Ooo0OoOo0OOOO - O0000O + O00oo0o + II1iiI1ii1iii
  o0OOoo0 . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 56 - 56: oo0OoO / Ooo0OoOo0OOOO * II1i111iI1ii / II1iiI1ii1iii * O00O
  if 43 - 43: iiiI1iiI1i + I1Ii / IiiIIiII
  if 2 - 2: i11IiI1II - II1iiI1ii1iii / iiI . O000Ooo0o0OOo . i11IiI1II
  if 13 - 13: Ooo0OoOo0OOOO
 urllib2 . urlopen ( o0OOoo0 )
 ii1Ii = urllib2 . urlopen ( o0OOoo0 )
 if 97 - 97: oo00oOoO0o0o / IiiIIiII
 i1Iiii . write ( ii1Ii . read ( ) )
 ii1Ii . close ( )
 i1Iiii . close ( )
 iiIii11II11 = O00O0oO0Ooo ( captcha = OOOoOoOoOoOo )
 Iii1I1I1i11I1 = iiIii11II11 . get ( )
 return Iii1I1I1i11I1
 if 85 - 85: IiiIIiII % Ooo0OoOo0OOOO . oO00ooo0o0OO
def o0O0oo000 ( imageregex , html_page , cookieJar , m ) :
 global iI1iIi
 iI1iIi += 1
 if 10 - 10: oo0OoO % O00oo0o * O00O + iiiI1iiI1i
 if 93 - 93: II1i111iI1ii
 if not imageregex == '' :
  if html_page . startswith ( "http" ) :
   iIii1Ii11IIIi = iIii1I ( html_page , cookieJar = cookieJar )
  else :
   iIii1Ii11IIIi = html_page
  OoOoOOO = re . compile ( imageregex ) . findall ( html_page ) [ 0 ]
 else :
  OoOoOOO = html_page
  if 'oneplay.tv/embed' in html_page :
   import oneplay
   iIii1Ii11IIIi = iIii1I ( html_page , cookieJar = cookieJar )
   OoOoOOO = oneplay . getCaptchaUrl ( iIii1Ii11IIIi )
   if 66 - 66: IiiIIiII + OOoOoO0o0o0OO * IiiIIiII / oOO . iiI
 OOOoOoOoOoOo = os . path . join ( o00 , str ( iI1iIi ) + "captcha.jpg" )
 i1Iiii = open ( OOOoOoOoOoOo , "wb" )
 if 65 - 65: oOO
 o0OOoo0 = urllib2 . Request ( OoOoOOO )
 o0OOoo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  o0OOoo0 . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  o0OOoo0 . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'accept' in m :
  o0OOoo0 . add_header ( 'Accept' , m [ 'accept' ] )
 if 'setcookie' in m :
  if 10 - 10: OOoOoO0o0o0OO + II1iiI1ii1iii % iiI
  o0OOoo0 . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 10 - 10: IiiIIiII + O00oo0o / Ooo0OoOo0OOOO / O0000O
  if 50 - 50: ooo % Ii + O00oo0o + oo0OoO
  if 70 - 70: oOO . oo00oOoO0o0o * Ooo0OoOo0OOOO * I1Ii . IiiIIiII
  if 35 - 35: Ii % II1iiI1ii1iii
  if 76 - 76: II1i111iI1ii % iiI / O00O
 ii1Ii = urllib2 . urlopen ( o0OOoo0 )
 if 31 - 31: Ooo0OoOo0OOOO
 i1Iiii . write ( ii1Ii . read ( ) )
 ii1Ii . close ( )
 i1Iiii . close ( )
 iiIii11II11 = O00O0oO0Ooo ( captcha = OOOoOoOoOoOo )
 Iii1I1I1i11I1 = iiIii11II11 . get ( )
 return Iii1I1I1i11I1
 if 39 - 39: IiiIIiII . O00oo0o . i11IiI1II . Ooo0OoOo0OOOO / Ii % i11IiI1II
 if 9 - 9: iiI . O00oo0o
 if 92 - 92: O00O . Ooo0OoOo0OOOO - O0000O
 if 64 - 64: i11IiI1II % Ooo0OoOo0OOOO / O00O * Ooo0OoOo0OOOO + O0000O
 if 17 - 17: IiiIIiII
 if 94 - 94: O000Ooo0o0OOo
 if 64 - 64: iiI * I1Ii - OOoOoO0o0o0OO - ooo + oo00oOoO0o0o
 if 77 - 77: iiiI1iiI1i % Ooo0OoOo0OOOO / II1iiI1ii1iii
 if 34 - 34: IIII + oo0OoO - II1i111iI1ii * oo0OoO . iiiI1iiI1i
 if 99 - 99: Ooo0OoOo0OOOO
 if 3 - 3: i11IiI1II . II1iiI1ii1iii . OOoOoO0o0o0OO
 if 46 - 46: i11IiI1II . oOO * II1iiI1ii1iii * oo0OoO
 if 55 - 55: II1i111iI1ii / O000Ooo0o0OOo
def oo0OoO000 ( name , headname ) :
 if 26 - 26: Ooo0OoOo0OOOO * iiiI1iiI1i
 if 37 - 37: Ooo0OoOo0OOOO
 ii1 = xbmc . Keyboard ( 'default' , 'heading' , True )
 ii1 . setDefault ( name )
 ii1 . setHeading ( headname )
 ii1 . setHiddenInput ( False )
 return ii1 . getText ( )
 if 74 - 74: Ooo0OoOo0OOOO / oo00oOoO0o0o * oo00oOoO0o0o * IIII - Ii - iiiI1iiI1i
 if 12 - 12: II1iiI1ii1iii / II1i111iI1ii % ooo
 if 77 - 77: Ooo0OoOo0OOOO / oo0OoO * iiiI1iiI1i . oOO
 if 16 - 16: II1iiI1ii1iii + II1iiI1ii1iii
class O00O0oO0Ooo ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 29 - 29: II1iiI1ii1iii
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   i1IIIiI = self . kbd . getText ( )
   self . close ( )
   return i1IIIiI
  self . close ( )
  return False
  if 18 - 18: O0000O - IiiIIiII / I1Ii . IiiIIiII % O000Ooo0o0OOo + oo00oOoO0o0o
def OoOOOo0OOOo00O ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 33 - 33: O0000O % Ii . oo0OoO
def I1i1IIII1II ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 20 - 20: oOO % O0000O + iiI / IIII
def I1ii11Ii1I1I ( ) :
 IIi1I11I1II = [ ]
 I1iiIIiIIII = sys . argv [ 2 ]
 if len ( I1iiIIiIIII ) >= 2 :
  iIIi = sys . argv [ 2 ]
  OO0OoOo = iIIi . replace ( '?' , '' )
  if ( iIIi [ len ( iIIi ) - 1 ] == '/' ) :
   iIIi = iIIi [ 0 : len ( iIIi ) - 2 ]
  ii1iiiii11iii = OO0OoOo . split ( '&' )
  IIi1I11I1II = { }
  for o0O0Oo00 in range ( len ( ii1iiiii11iii ) ) :
   O0oIIi1 = { }
   O0oIIi1 = ii1iiiii11iii [ o0O0Oo00 ] . split ( '=' )
   if ( len ( O0oIIi1 ) ) == 2 :
    IIi1I11I1II [ O0oIIi1 [ 0 ] ] = O0oIIi1 [ 1 ]
 return IIi1I11I1II
 if 75 - 75: oo00oOoO0o0o + O0000O
 if 28 - 28: O0000O * II1iiI1ii1iii + O000Ooo0o0OOo
def oo00 ( ) :
 items = json . loads ( open ( iiII ) . read ( ) )
 oo0OO0Oo0 = len ( items )
 for o0O0Oo00 in items :
  iII1Ii1ii11 = o0O0Oo00 [ 0 ]
  IiI = o0O0Oo00 [ 1 ]
  Oo0 = o0O0Oo00 [ 2 ]
  try :
   i111 = o0O0Oo00 [ 3 ]
   if i111 == None :
    raise
  except :
   if Oo00O . getSetting ( 'use_thumb' ) == "true" :
    i111 = Oo0
   else :
    i111 = i1Ii1
  try : iIiI1iIIii11I = o0O0Oo00 [ 5 ]
  except : iIiI1iIIii11I = None
  try : iI1i1iIII1II = o0O0Oo00 [ 6 ]
  except : iI1i1iIII1II = None
  if 71 - 71: II1iiI1ii1iii - Ooo0OoOo0OOOO + O00oo0o + O000Ooo0o0OOo % Ooo0OoOo0OOOO - ooo
  if o0O0Oo00 [ 4 ] == 0 :
   IiiiI11I ( IiI , iII1Ii1ii11 , Oo0 , i111 , '' , '' , '' , 'fav' , iIiI1iIIii11I , iI1i1iIII1II , oo0OO0Oo0 )
  else :
   OO0OoOoO00 ( iII1Ii1ii11 , IiI , o0O0Oo00 [ 4 ] , Oo0 , i1Ii1 , '' , '' , '' , '' , 'fav' )
   if 34 - 34: IiiIIiII + OOoOoO0o0o0OO / ooo
   if 82 - 82: oo0OoO - IIII
def ii111II1 ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 oO0ooO00 = [ ]
 try :
  if 60 - 60: ooo - oo0OoO % IiiIIiII + IiiIIiII / O000Ooo0o0OOo * II1i111iI1ii
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( iiII ) == False :
  i1iIii ( 'Making Favorites File' )
  oO0ooO00 . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  iI11iI1 = open ( iiII , "w" )
  iI11iI1 . write ( json . dumps ( oO0ooO00 ) )
  iI11iI1 . close ( )
 else :
  i1iIii ( 'Appending Favorites' )
  iI11iI1 = open ( iiII ) . read ( )
  OOOO0 = json . loads ( iI11iI1 )
  OOOO0 . append ( ( name , url , iconimage , fanart , mode ) )
  iIIiIII1i = open ( iiII , "w" )
  iIIiIII1i . write ( json . dumps ( OOOO0 ) )
  iIIiIII1i . close ( )
  if 72 - 72: O0000O . II1i111iI1ii / oo00oOoO0o0o - ooo . IiiIIiII
  if 69 - 69: iiI . O00O . oOO
def I11iI11I1I ( name ) :
 OOOO0 = json . loads ( open ( iiII ) . read ( ) )
 for I1Ii1iiI11i1 in range ( len ( OOOO0 ) ) :
  if OOOO0 [ I1Ii1iiI11i1 ] [ 0 ] == name :
   del OOOO0 [ I1Ii1iiI11i1 ]
   iIIiIII1i = open ( iiII , "w" )
   iIIiIII1i . write ( json . dumps ( OOOO0 ) )
   iIIiIII1i . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 58 - 58: O00O + oo0OoO / O00oo0o % O00O * Ooo0OoOo0OOOO . oO00ooo0o0OO
def o0oO0oOOo ( url ) :
 import urlresolver
 i11 = urlresolver . HostedMediaFile ( url )
 if i11 :
  IiiI1I = urlresolver . resolve ( url )
  oOI1i = IiiI1I
  if isinstance ( oOI1i , list ) :
   for IIiII11iii1 in oOI1i :
    oooO000oOoOO0o = Oo00O . getSetting ( 'quality' )
    if IIiII11iii1 [ 'quality' ] == 'HD' :
     IiiI1I = IIiII11iii1 [ 'url' ]
     break
    elif IIiII11iii1 [ 'quality' ] == 'SD' :
     IiiI1I = IIiII11iii1 [ 'url' ]
    elif IIiII11iii1 [ 'quality' ] == '1080p' and Oo00O . getSetting ( '1080pquality' ) == 'true' :
     IiiI1I = IIiII11iii1 [ 'url' ]
     break
  else :
   IiiI1I = oOI1i
 else :
  xbmc . executebuiltin ( "XBMC.Notification(Planeta,Urlresolver donot support this domain. - ,5000)" )
  IiiI1I = url
 return IiiI1I
def IiOo ( url , listitem , pdialogue = None ) :
 if 61 - 61: iiI - i11IiI1II % II1i111iI1ii . II1iiI1ii1iii
 if url . lower ( ) . startswith ( 'plugin' ) and 'youtube' not in url . lower ( ) :
  print 'playing via runplugin'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  for o0O0Oo00 in range ( 8 ) :
   xbmc . sleep ( 500 )
   try :
    if 45 - 45: oO00ooo0o0OO % iiiI1iiI1i
    if xbmc . getCondVisibility ( "Player.HasMedia" ) and xbmc . Player ( ) . isPlaying ( ) :
     return True
   except : pass
  print 'returning now'
  return False
 import CustomPlayer , time
 if 29 - 29: ooo % O0000O / OOoOoO0o0o0OO
 OOoOO = CustomPlayer . MyXBMCPlayer ( )
 OOoOO . pdialogue = pdialogue
 OO0ooO0o0o0 = time . time ( )
 if 19 - 19: O000Ooo0o0OOo - O000Ooo0o0OOo % I1Ii - i11IiI1II
 print 'going to play'
 import time
 oooOOo0 = time . time ( )
 OOoOO . play ( url , listitem )
 xbmc . sleep ( 1000 )
 if 94 - 94: I1Ii - I1Ii * O00O / i11IiI1II * O00oo0o - OOoOoO0o0o0OO
 try :
  while OOoOO . is_active :
   xbmc . sleep ( 400 )
   if 39 - 39: OOoOoO0o0o0OO % Ii + IiiIIiII % II1i111iI1ii / IIII
   if OOoOO . urlplayed :
    print 'yes played'
    return True
   if time . time ( ) - oooOOo0 > 4 : return False
   if 10 - 10: oOO + I1Ii * oO00ooo0o0OO . Ooo0OoOo0OOOO * oO00ooo0o0OO - oO00ooo0o0OO
 except : pass
 print 'not played' , url
 return False
def ooooo00o0O ( name , mu_playlist , queueVideo = None ) :
 iIiI1iIIii11I = xbmc . PlayList ( xbmc . PLAYLIST_VIDEO )
 if 39 - 39: IiiIIiII % II1iiI1ii1iii + Ii + Ii - IiiIIiII / ooo
 if '$$LSPlayOnlyOne$$' in mu_playlist [ 0 ] :
  mu_playlist [ 0 ] = mu_playlist [ 0 ] . replace ( '$$LSPlayOnlyOne$$' , '' )
  import urlparse
  OoO = [ ]
  IiIiiII = 0
  Ooo0oo00OO0OO = xbmcgui . DialogProgress ( )
  Ooo0oo00OO0OO . create ( 'Progress' , 'Trying Multiple Links' )
  for o0O0Oo00 in mu_playlist :
   if 56 - 56: O0000O / O00oo0o * ooo % O0000O
   if 59 - 59: O00oo0o . O00oo0o * OOoOoO0o0o0OO + Ooo0OoOo0OOOO
   if '$$lsname=' in o0O0Oo00 :
    oOo = o0O0Oo00 . split ( '$$lsname=' ) [ 1 ] . split ( '&regexs' ) [ 0 ]
    OoO . append ( oOo )
    mu_playlist [ IiIiiII ] = o0O0Oo00 . split ( '$$lsname=' ) [ 0 ] + ( '&regexs' + o0O0Oo00 . split ( '&regexs' ) [ 1 ] if '&regexs' in o0O0Oo00 else '' )
   else :
    oOo = urlparse . urlparse ( o0O0Oo00 ) . netloc
    if oOo == '' :
     OoO . append ( name )
    else :
     OoO . append ( oOo )
   I1Ii1iiI11i1 = IiIiiII
   IiIiiII += 1
   if 59 - 59: O0000O - ooo . ooo - Ii + iiI % O00oo0o
   iii = OoO [ I1Ii1iiI11i1 ]
   if Ooo0oo00OO0OO . iscanceled ( ) : return
   Ooo0oo00OO0OO . update ( IiIiiII / len ( mu_playlist ) * 100 , "" , "Link#%d" % ( IiIiiII ) , iii )
   print 'auto playnamexx' , iii
   if "&mode=19" in mu_playlist [ I1Ii1iiI11i1 ] :
    if 86 - 86: iiI . oO00ooo0o0OO + Ooo0OoOo0OOOO + I1Ii
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI11II = o0oO0oOOo ( mu_playlist [ I1Ii1iiI11i1 ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    IiI1I . setPath ( IiI11II )
    if 87 - 87: oO00ooo0o0OO
    O0OIi1Ii1ii1ii = IiOo ( IiI11II , IiI1I )
   elif "$doregex" in mu_playlist [ I1Ii1iiI11i1 ] :
    if 75 - 75: oO00ooo0o0OO % II1iiI1ii1iii / I1Ii
    Ooo000000 = mu_playlist [ I1Ii1iiI11i1 ] . split ( '&regexs=' )
    if 23 - 23: IIII
    IiI , iIIiI1i = O0oO ( Ooo000000 [ 1 ] , Ooo000000 [ 0 ] )
    OOoOOIi11I11 = IiI . replace ( ';' , '' )
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI1I . setPath ( OOoOOIi11I11 )
    if 54 - 54: O0000O / oo0OoO + oOO / ooo + O0000O
    O0OIi1Ii1ii1ii = IiOo ( OOoOOIi11I11 , IiI1I )
    if 66 - 66: oo0OoO
   else :
    IiI = mu_playlist [ I1Ii1iiI11i1 ]
    IiI = IiI . split ( '&regexs=' ) [ 0 ]
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI1I . setPath ( IiI )
    if 86 - 86: iiiI1iiI1i - iiiI1iiI1i % O00O + O0000O
    O0OIi1Ii1ii1ii = IiOo ( IiI , IiI1I )
    print 'played' , O0OIi1Ii1ii1ii
   print 'played' , O0OIi1Ii1ii1ii
   if O0OIi1Ii1ii1ii : return
  return
 if Oo00O . getSetting ( 'ask_playlist_items' ) == 'true' and not queueVideo :
  import urlparse
  OoO = [ ]
  IiIiiII = 0
  for o0O0Oo00 in mu_playlist :
   if '$$lsname=' in o0O0Oo00 :
    oOo = o0O0Oo00 . split ( '$$lsname=' ) [ 1 ] . split ( '&regexs' ) [ 0 ]
    OoO . append ( oOo )
    mu_playlist [ IiIiiII ] = o0O0Oo00 . split ( '$$lsname=' ) [ 0 ] + ( '&regexs' + o0O0Oo00 . split ( '&regexs' ) [ 1 ] if '&regexs' in o0O0Oo00 else '' )
   else :
    oOo = urlparse . urlparse ( o0O0Oo00 ) . netloc
    if oOo == '' :
     OoO . append ( name )
    else :
     OoO . append ( oOo )
     if 37 - 37: iiI * I1Ii * IIII . IiiIIiII + oOO
   IiIiiII += 1
  Oo0Ii1I = xbmcgui . Dialog ( )
  I1Ii1iiI11i1 = Oo0Ii1I . select ( 'Choose a video source' , OoO )
  if I1Ii1iiI11i1 >= 0 :
   iii = OoO [ I1Ii1iiI11i1 ]
   print 'playnamexx' , iii
   if "&mode=19" in mu_playlist [ I1Ii1iiI11i1 ] :
    if 23 - 23: i11IiI1II
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI11II = o0oO0oOOo ( mu_playlist [ I1Ii1iiI11i1 ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    IiI1I . setPath ( IiI11II )
    xbmc . Player ( ) . play ( IiI11II , IiI1I )
   elif "$doregex" in mu_playlist [ I1Ii1iiI11i1 ] :
    if 44 - 44: Ii - O000Ooo0o0OOo - oOO . Ii
    Ooo000000 = mu_playlist [ I1Ii1iiI11i1 ] . split ( '&regexs=' )
    if 53 - 53: iiiI1iiI1i - Ii . II1i111iI1ii
    IiI , iIIiI1i = O0oO ( Ooo000000 [ 1 ] , Ooo000000 [ 0 ] )
    OOoOOIi11I11 = IiI . replace ( ';' , '' )
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI1I . setPath ( OOoOOIi11I11 )
    xbmc . Player ( ) . play ( OOoOOIi11I11 , IiI1I )
    if 54 - 54: Ooo0OoOo0OOOO . Ooo0OoOo0OOOO
   else :
    IiI = mu_playlist [ I1Ii1iiI11i1 ]
    IiI = IiI . split ( '&regexs=' ) [ 0 ]
    IiI1I = xbmcgui . ListItem ( iii , iconImage = Oo0 , thumbnailImage = Oo0 )
    IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : iii } )
    IiI1I . setProperty ( "IsPlayable" , "true" )
    IiI1I . setPath ( IiI )
    xbmc . Player ( ) . play ( IiI , IiI1I )
 elif not queueVideo :
  if 45 - 45: I1Ii % II1iiI1ii1iii % IIII - I1Ii
  iIiI1iIIii11I . clear ( )
  iIiI = 0
  for o0O0Oo00 in mu_playlist :
   iIiI += 1
   Oo0O0o = xbmcgui . ListItem ( '%s) %s' % ( str ( iIiI ) , name ) )
   if 67 - 67: Ii * iiI + Ooo0OoOo0OOOO
   try :
    if "$doregex" in o0O0Oo00 :
     Ooo000000 = o0O0Oo00 . split ( '&regexs=' )
     if 99 - 99: O0000O
     IiI , iIIiI1i = O0oO ( Ooo000000 [ 1 ] , Ooo000000 [ 0 ] )
    elif "&mode=19" in o0O0Oo00 :
     IiI = o0oO0oOOo ( o0O0Oo00 . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    if IiI :
     iIiI1iIIii11I . add ( IiI , Oo0O0o )
    else :
     raise
   except Exception :
    iIiI1iIIii11I . add ( o0O0Oo00 , Oo0O0o )
    pass
    if 80 - 80: iiI - oo00oOoO0o0o % oO00ooo0o0OO
  xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
 else :
  if 90 - 90: O000Ooo0o0OOo % O00oo0o * iiiI1iiI1i * Ooo0OoOo0OOOO
  I1I1i11 = xbmcgui . ListItem ( name )
  iIiI1iIIii11I . add ( mu_playlist , I1I1i11 )
  if 40 - 40: O00O % O000Ooo0o0OOo
  if 37 - 37: Ii + iiI + oOO . oo00oOoO0o0o - iiI
def ooI1I1 ( name , url ) :
 if 43 - 43: oOO + II1i111iI1ii
 if Oo00O . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('Planeta','Choose a location to save files.',15000," + OO00Ooo0o + ")" )
  Oo00O . openSettings ( )
 iIIi = { 'url' : url , 'download_path' : Oo00O . getSetting ( 'save_location' ) }
 downloader . download ( name , iIIi )
 Oo0Ii1I = xbmcgui . Dialog ( )
 Ii11iII1i = Oo0Ii1I . yesno ( 'Planeta' , 'Do you want to add this file as a source?' )
 if Ii11iII1i :
  oOoo0o0OoO ( os . path . join ( Oo00O . getSetting ( 'save_location' ) , name ) )
  if 12 - 12: IIII
def I11i11iii111i ( url , name ) :
 if 83 - 83: O000Ooo0o0OOo * II1i111iI1ii . O000Ooo0o0OOo
 iiiiOOo = [ 'plugin://plugin.video.genesis/?action=shows_search' , 'plugin://plugin.video.genesis/?action=movies_search' , 'plugin://plugin.video.salts/?mode=search&amp;section=Movies' , 'plugin://plugin.video.salts/?mode=search&amp;section=TV' , 'plugin://plugin.video.muchmovies.hd/?action=movies_search' , 'plugin://plugin.video.viooz.co/?action=root_search' , 'plugin://plugin.video.ororotv/?action=shows_search' , 'plugin://plugin.video.yifymovies.hd/?action=movies_search' , 'plugin://plugin.video.cartoonhdtwo/?description&amp;fanart&amp;iconimage&amp;mode=3&amp;name=Search&amp;url=url' , 'plugin://plugin.video.youtube/kodion/search/list/' , 'plugin://plugin.video.dailymotion_com/?mode=search&amp;url' , 'plugin://plugin.video.vimeo/kodion/search/list/' ]
 if 85 - 85: IiiIIiII % O00O % O00O
 if 89 - 89: oO00ooo0o0OO - oo0OoO . IIII
 if 13 - 13: O000Ooo0o0OOo + O000Ooo0o0OOo * oO00ooo0o0OO * IiiIIiII / iiI - O00oo0o
 if 44 - 44: oo0OoO . IiiIIiII . IIII * I1Ii / oo00oOoO0o0o
 if 71 - 71: iiI / OOoOoO0o0o0OO
 if 98 - 98: oo00oOoO0o0o % O000Ooo0o0OOo - oO00ooo0o0OO
 if 57 - 57: oo0OoO + II1iiI1ii1iii
 if 61 - 61: iiI
 if 8 - 8: II1iiI1ii1iii * IIII + oOO - oOO / i11IiI1II % II1iiI1ii1iii
 if 50 - 50: iiI + oO00ooo0o0OO - O000Ooo0o0OOo
 if 66 - 66: Ii / i11IiI1II / II1iiI1ii1iii
 if 59 - 59: II1i111iI1ii
 OoO = [ 'Gensis TV' , 'Genesis Movie' , 'Salt movie' , 'salt TV' , 'Muchmovies' , 'viooz' , 'ORoroTV' , 'Yifymovies' , 'cartoonHD' , 'Youtube' , 'DailyMotion' , 'Vimeo' ]
 if 81 - 81: oOO % OOoOoO0o0o0OO / IiiIIiII % IiiIIiII
 Oo0Ii1I = xbmcgui . Dialog ( )
 I1Ii1iiI11i1 = Oo0Ii1I . select ( 'Choose a video source' , OoO )
 if 40 - 40: oOO
 if I1Ii1iiI11i1 >= 0 :
  url = iiiiOOo [ I1Ii1iiI11i1 ]
  if 9 - 9: I1Ii % oOO
  o0O00oO00OOo ( url )
  if 62 - 62: OOoOoO0o0o0OO % O0000O
def OO0OoOoO00 ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False , regexs = None , reg_url = None , allinfo = { } ) :
 if 91 - 91: O00oo0o * oO00ooo0o0OO / oo0OoO + Ii
 if 14 - 14: OOoOoO0o0o0OO . O000Ooo0o0OOo % O0000O + I1Ii / Ii % O00O
 if 80 - 80: oo00oOoO0o0o * O000Ooo0o0OOo * II1iiI1ii1iii * II1i111iI1ii
 if regexs and len ( regexs ) > 0 :
  O000OOOo0O = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&regexs=" + regexs
 else :
  O000OOOo0O = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
  if 91 - 91: IiiIIiII + iiiI1iiI1i
 iiO0OoOoo0 = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 IiI1I = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  IiI1I . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 else :
  IiI1I . setInfo ( type = "Video" , infoLabels = allinfo )
 IiI1I . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  o0ooOO000Ooo = [ ]
  OoOo0O = Oo00O . getSetting ( 'parentalblocked' )
  OoOo0O = OoOo0O == "true"
  O00OOO00 = Oo00O . getSetting ( 'parentalblockedpin' )
  if 87 - 87: ooo * IiiIIiII
  if len ( O00OOO00 ) > 0 :
   if OoOo0O :
    o0ooOO000Ooo . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   else :
    o0ooOO000Ooo . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 40 - 40: II1iiI1ii1iii / Ooo0OoOo0OOOO + II1iiI1ii1iii - oo0OoO * i11IiI1II . oO00ooo0o0OO
  if showcontext == 'source' :
   if 66 - 66: ooo + IiiIIiII - Ooo0OoOo0OOOO
   if name in str ( OoOO0 ) :
    o0ooOO000Ooo . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 26 - 26: oo0OoO / O00oo0o % II1i111iI1ii * IIII * oO00ooo0o0OO - O0000O
    if 33 - 33: IIII + O00O / O00oo0o % O00oo0o % I1Ii % O0000O
  elif showcontext == 'download' :
   o0ooOO000Ooo . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   o0ooOO000Ooo . append ( ( 'Remove from Planeta Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  if showcontext == '!!update' :
   O0oooOo0 = (
 '%s?url=%s&mode=17&regexs=%s'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( reg_url ) , regexs )
 )
   o0ooOO000Ooo . append ( ( '[COLOR yellow]!!update[/COLOR]' , 'XBMC.RunPlugin(%s)' % O0oooOo0 ) )
  if not name in IiIiiiI :
   o0ooOO000Ooo . append ( ( 'Add to Planeta Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  IiI1I . addContextMenuItems ( o0ooOO000Ooo )
 iiO0OoOoo0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = O000OOOo0O , listitem = IiI1I , isFolder = True )
 return iiO0OoOoo0
def i11O0OO0 ( url , title , media_type = 'video' ) :
 if 58 - 58: OOoOoO0o0o0OO * Ii - O0000O % iiI . O00oo0o / I1Ii
 if 64 - 64: OOoOoO0o0o0OO - ooo - ooo
 import youtubedl
 if 42 - 42: O000Ooo0o0OOo . O0000O + O00O % IiiIIiII
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 18 - 18: II1i111iI1ii + II1iiI1ii1iii . O00O
   YDStreamExtractor . manageDownloads ( )
  else :
   i1iiiiI1ii11 = xbmc . Player ( ) . getPlayingFile ( )
   if 6 - 6: IiiIIiII
   i1iiiiI1ii11 = i1iiiiI1ii11 . split ( '|User-Agent=' ) [ 0 ]
   Oo0O0o = { 'url' : i1iiiiI1ii11 , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = Oo0O0o )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 35 - 35: iiI . IIII * oOO * OOoOoO0o0o0OO % IIII - oo00oOoO0o0o
  if 41 - 41: I1Ii % O0000O / OOoOoO0o0o0OO * iiiI1iiI1i / II1i111iI1ii * ooo
def i1i1IiI1I1IiI ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def Iii1IiII111iII11 ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def I11I1i1IiI1 ( s ) : return "" . join ( filter ( lambda OoOo : ord ( OoOo ) < 128 , s ) )
if 15 - 15: IiiIIiII - ooo + O0000O
def oOooo0 ( command ) :
 OOOO0 = ''
 try :
  OOOO0 = xbmc . executeJSONRPC ( Iii1IiII111iII11 ( command ) )
 except UnicodeEncodeError :
  OOOO0 = xbmc . executeJSONRPC ( i1i1IiI1I1IiI ( command ) )
  if 100 - 100: O0000O + Ii * i11IiI1II % O00oo0o - i11IiI1II . OOoOoO0o0o0OO
 return Iii1IiII111iII11 ( OOOO0 )
 if 63 - 63: O0000O . Ooo0OoOo0OOOO
def o0O00oO00OOo ( url , give_me_result = None , playlist = False ) :
 if 'audio' in url :
  ii1Ii1I1 = Iii1IiII111iII11 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params": {"directory":"%s","media":"video", "properties": ["title", "album", "artist", "duration","thumbnail", "year"]}, "id": 1}' ) % url
 else :
  ii1Ii1I1 = Iii1IiII111iII11 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":[ "plot","playcount","director", "genre","votes","duration","trailer","premiered","thumbnail","title","year","dateadded","fanart","rating","season","episode","studio","mpaa"]},"id":1}' ) % url
 i1iI111i = json . loads ( oOooo0 ( ii1Ii1I1 ) )
 if 67 - 67: oO00ooo0o0OO * iiiI1iiI1i - oo00oOoO0o0o * Ooo0OoOo0OOOO % oOO . oo00oOoO0o0o
 if give_me_result :
  return i1iI111i
 if i1iI111i . has_key ( 'error' ) :
  return
 else :
  if 72 - 72: II1i111iI1ii + oOO - oOO + oO00ooo0o0OO % iiI
  for o0O0Oo00 in i1iI111i [ 'result' ] [ 'files' ] :
   Ii1II1IIiIIii = { }
   url = o0O0Oo00 [ 'file' ]
   iII1Ii1ii11 = I11I1i1IiI1 ( o0O0Oo00 [ 'label' ] )
   I11iI = I11I1i1IiI1 ( o0O0Oo00 [ 'thumbnail' ] )
   i1Ii1 = I11I1i1IiI1 ( o0O0Oo00 [ 'fanart' ] )
   Ii1II1IIiIIii = dict ( ( k , v ) for k , v in o0O0Oo00 . iteritems ( ) if not v == '0' or not v == - 1 or v == '' )
   Ii1II1IIiIIii . pop ( "file" , None )
   if o0O0Oo00 [ 'filetype' ] == 'file' :
    if playlist :
     ooooo00o0O ( iII1Ii1ii11 , url , queueVideo = '1' )
     continue
    else :
     IiiiI11I ( url , iII1Ii1ii11 , I11iI , i1Ii1 , '' , '' , '' , '' , None , '' , total = len ( i1iI111i [ 'result' ] [ 'files' ] ) , allinfo = Ii1II1IIiIIii )
     if 100 - 100: O00O / oo0OoO
     if o0O0Oo00 [ 'type' ] and o0O0Oo00 [ 'type' ] == 'tvshow' :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'tvshows' )
     elif o0O0Oo00 [ 'episode' ] > 0 :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'episodes' )
      if 74 - 74: i11IiI1II . O00O - II1iiI1ii1iii - I1Ii . O0000O
   else :
    OO0OoOoO00 ( iII1Ii1ii11 , url , 53 , I11iI , i1Ii1 , '' , '' , '' , '' , allinfo = Ii1II1IIiIIii )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  if 41 - 41: Ooo0OoOo0OOOO * O0000O + O00oo0o
def IiiiI11I ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" , allinfo = { } ) :
 if 100 - 100: Ii - II1iiI1ii1iii * OOoOoO0o0o0OO
 o0ooOO000Ooo = [ ]
 OoOo0O = Oo00O . getSetting ( 'parentalblocked' )
 OoOo0O = OoOo0O == "true"
 O00OOO00 = Oo00O . getSetting ( 'parentalblockedpin' )
 if 27 - 27: IIII
 if len ( O00OOO00 ) > 0 :
  if OoOo0O :
   o0ooOO000Ooo . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  else :
   o0ooOO000Ooo . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 76 - 76: iiiI1iiI1i
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 iiO0OoOoo0 = True
 Oo0O00OO00oo = False
 if regexs :
  OO0oo = '17'
  if 'listrepeat' in regexs :
   Oo0O00OO00oo = True
   if 86 - 86: oo00oOoO0o0o / O000Ooo0o0OOo % I1Ii
  o0ooOO000Ooo . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif ( any ( x in url for x in OOoo0O ) and url . startswith ( 'http' ) ) or url . endswith ( '&mode=19' ) :
  url = url . replace ( '&mode=19' , '' )
  OO0oo = '19'
  o0ooOO000Ooo . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  OO0oo = '18'
  o0ooOO000Ooo . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if Oo00O . getSetting ( 'dlaudioonly' ) == 'true' :
   o0ooOO000Ooo . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) :
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  OO0oo = '12'
 else :
  OO0oo = '12'
  o0ooOO000Ooo . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 if 'plugin://plugin.video.youtube/play/?video_id=' in url :
  II1i11111 = url . replace ( 'plugin://plugin.video.youtube/play/?video_id=' , 'https://www.youtube.com/watch?v=' )
  o0ooOO000Ooo . append ( ( '!!Download [COLOR blue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( II1i11111 ) , urllib . quote_plus ( name ) ) ) )
 O000OOOo0O = sys . argv [ 0 ] + "?"
 I111Iiii1IIiI = False
 if playlist :
  if Oo00O . getSetting ( 'add_playlist' ) == "false" and '$$LSPlayOnlyOne$$' not in playlist [ 0 ] :
   O000OOOo0O += "url=" + urllib . quote_plus ( url ) + "&mode=" + OO0oo
  else :
   O000OOOo0O += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   I111Iiii1IIiI = True
 else :
  O000OOOo0O += "url=" + urllib . quote_plus ( url ) + "&mode=" + OO0oo
 if regexs :
  O000OOOo0O += "&regexs=" + regexs
 if not setCookie == '' :
  O000OOOo0O += "&setCookie=" + urllib . quote_plus ( setCookie )
 if iconimage and not iconimage == '' :
  O000OOOo0O += "&iconimage=" + urllib . quote_plus ( iconimage )
  if 44 - 44: OOoOoO0o0o0OO * O0000O + Ii
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 IiI1I = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 if 38 - 38: iiI - I1Ii % Ooo0OoOo0OOOO + oOO + oO00ooo0o0OO / i11IiI1II
 if allinfo == None or len ( allinfo ) < 1 :
  IiI1I . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 else :
  IiI1I . setInfo ( type = "Video" , infoLabels = allinfo )
 IiI1I . setProperty ( "Fanart_Image" , fanart )
 if 65 - 65: II1iiI1ii1iii
 if ( not I111Iiii1IIiI ) and not any ( x in url for x in IiI1ii1I11iI ) and not '$PLAYERPROXY$=' in url :
  if regexs :
   if 47 - 47: O0000O % O000Ooo0o0OOo - Ii / oo0OoO % Ooo0OoOo0OOOO * oo00oOoO0o0o
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) and 'listrepeat' not in urllib . unquote_plus ( regexs ) :
    if 16 - 16: Ooo0OoOo0OOOO / O00oo0o - O00oo0o + i11IiI1II - IiiIIiII % iiiI1iiI1i
    IiI1I . setProperty ( 'IsPlayable' , 'true' )
  else :
   IiI1I . setProperty ( 'IsPlayable' , 'true' )
 else :
  i1iIii ( 'NOT setting isplayable' + url )
 if showcontext :
  if 16 - 16: ooo
  if showcontext == 'fav' :
   o0ooOO000Ooo . append (
 ( 'Remove from Planeta Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in IiIiiiI :
   try :
    I1iii1iI1iii = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   except :
    I1iii1iI1iii = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage . encode ( "utf-8" ) ) , urllib . quote_plus ( fanart . encode ( "utf-8" ) ) )
 )
   if playlist :
    I1iii1iI1iii += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    I1iii1iI1iii += "&regexs=" + regexs
   o0ooOO000Ooo . append ( ( 'Add to Planeta Favorites' , 'XBMC.RunPlugin(%s)' % I1iii1iI1iii ) )
  IiI1I . addContextMenuItems ( o0ooOO000Ooo )
 try :
  if not playlist is None :
   if Oo00O . getSetting ( 'add_playlist' ) == "false" :
    i11i1I1Iii1 = name . split ( ') ' ) [ 1 ]
    i1Ii1IiI = [
 ( 'Play ' + i11i1I1Iii1 + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( i11i1I1Iii1 ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
    IiI1I . addContextMenuItems ( i1Ii1IiI )
 except : pass
 if 11 - 11: oOO * i11IiI1II - oo0OoO % IIII - O0000O
 iiO0OoOoo0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = O000OOOo0O , listitem = IiI1I , totalItems = total , isFolder = Oo0O00OO00oo )
 if 33 - 33: IiiIIiII / OOoOoO0o0o0OO . O000Ooo0o0OOo - iiI
 if 41 - 41: Ooo0OoOo0OOOO + iiI . iiI % oo00oOoO0o0o
 return iiO0OoOoo0
 if 6 - 6: O00oo0o / IiiIIiII % IIII - II1iiI1ii1iii / oo0OoO - Ii
 if 8 - 8: I1Ii
def o0OoOOoOoo0 ( url , name , iconimage , setresolved = True , reg = None ) :
 print 'playsetresolved' , url , setresolved
 if url == None :
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  return
 if setresolved :
  III11iI1ii11 = True
  if '$$LSDirect$$' in url :
   url = url . replace ( '$$LSDirect$$' , '' )
   III11iI1ii11 = False
  if reg and 'notplayable' in reg :
   III11iI1ii11 = False
   if 79 - 79: II1iiI1ii1iii - OOoOoO0o0o0OO
  IiI1I = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
  IiI1I . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  IiI1I . setProperty ( "IsPlayable" , "true" )
  IiI1I . setPath ( url )
  if not III11iI1ii11 :
   xbmc . Player ( ) . play ( url )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , IiI1I )
   if 80 - 80: O00oo0o - iiI % O00oo0o
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 70 - 70: i11IiI1II * O00O
  if 30 - 30: O0000O * II1iiI1ii1iii
  if 70 - 70: O000Ooo0o0OOo . oo0OoO + iiI / O00O % II1iiI1ii1iii + O0000O
  if 38 - 38: O00O
def I1IiiiIIIII1 ( link ) :
 IiI = urllib . urlopen ( link )
 OoOOoO0o0 = IiI . read ( )
 IiI . close ( )
 i11I1I11ii1 = OoOOoO0o0 . split ( "Jetzt" )
 ooO0OOo0O0 = i11I1I11ii1 [ 1 ] . split ( 'programm/detail.php?const_id=' )
 iII1IIIi = ooO0OOo0O0 [ 1 ] . split ( '<br /><a href="/' )
 Iii1IiI11IiI1Ii1 = iII1IIIi [ 0 ] [ 40 : len ( iII1IIIi [ 0 ] ) ]
 OO0O0oo = ooO0OOo0O0 [ 2 ] . split ( "</a></p></div>" )
 i1111iIi1iii = OO0O0oo [ 0 ] [ 17 : len ( OO0O0oo [ 0 ] ) ]
 i1111iIi1iii = i1111iIi1iii . encode ( 'utf-8' )
 return "  - " + i1111iIi1iii + " - " + Iii1IiI11IiI1Ii1
 if 75 - 75: IIII + oO00ooo0o0OO + II1iiI1ii1iii * i11IiI1II - Ii
 if 60 - 60: oOO . oo00oOoO0o0o / iiI % ooo
def II1II1I11 ( url , regex ) :
 OOOO0 = O0o ( url )
 try :
  iIiI = re . findall ( regex , OOOO0 ) [ 0 ]
  return iIiI
 except :
  i1iIii ( 'regex failed' )
  i1iIii ( regex )
  return
  if 76 - 76: Ii * Ooo0OoOo0OOOO * oO00ooo0o0OO % II1iiI1ii1iii * O0000O + O0000O
  if 31 - 31: oo0OoO
  if 2 - 2: i11IiI1II / ooo
def o0O0o0oOoO0 ( d , root = "root" , nested = 0 ) :
 if 77 - 77: Ii + O00O - Ii . O00oo0o * OOoOoO0o0o0OO
 ii1iiIIIii = lambda iiiIi1I1I : '<' + iiiIi1I1I + '>'
 I1Ii1iI = lambda iiiIi1I1I : '</' + iiiIi1I1I + '>\n'
 if 66 - 66: O000Ooo0o0OOo + OOoOoO0o0o0OO
 OO0oO0o = lambda II1I11I1III1 , I11I11 : I11I11 + ii1iiIIIii ( IiII ) + str ( II1I11I1III1 ) + I1Ii1iI ( IiII )
 I11I11 = ii1iiIIIii ( root ) + '\n' if root else ""
 if 7 - 7: O0000O / OOoOoO0o0o0OO
 for IiII , I1o0O in d . iteritems ( ) :
  I11111ii1i = type ( I1o0O )
  if nested == 0 : IiII = 'regex'
  if I11111ii1i is list :
   for II1I11I1III1 in I1o0O :
    II1I11I1III1 = escape ( II1I11I1III1 )
    I11I11 = OO0oO0o ( II1I11I1III1 , I11I11 )
    if 16 - 16: O00O + ooo . oOO / IIII
  if I11111ii1i is dict :
   I11I11 = OO0oO0o ( '\n' + o0O0o0oOoO0 ( I1o0O , None , nested + 1 ) , I11I11 )
  if I11111ii1i is not list and I11111ii1i is not dict :
   if not I1o0O is None : I1o0O = escape ( I1o0O )
   if 86 - 86: II1i111iI1ii + I1Ii * oO00ooo0o0OO
   if I1o0O is None :
    I11I11 = OO0oO0o ( I1o0O , I11I11 )
   else :
    if 57 - 57: O0000O . I1Ii . OOoOoO0o0o0OO
    I11I11 = OO0oO0o ( I1o0O . encode ( "utf-8" ) , I11I11 )
    if 35 - 35: oO00ooo0o0OO
 I11I11 += I1Ii1iI ( root ) if root else ""
 if 40 - 40: IIII . Ii
 return I11I11
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 62 - 62: IiiIIiII * i11IiI1II
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 79 - 79: Ooo0OoOo0OOOO % Ooo0OoOo0OOOO * ooo - Ooo0OoOo0OOOO * ooo
iIIi = I1ii11Ii1I1I ( )
if 26 - 26: II1i111iI1ii * iiI
IiI = None
iII1Ii1ii11 = None
OO0oo = None
iIiI1iIIii11I = None
Oo0 = None
i1Ii1 = ii1iI111iIi1
iIiI1iIIii11I = None
o0oo = None
iI1i1iIII1II = None
if 44 - 44: IiiIIiII + i11IiI1II - IIII * IIII / OOoOoO0o0o0OO
try :
 IiI = urllib . unquote_plus ( iIIi [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 iII1Ii1ii11 = urllib . unquote_plus ( iIIi [ "name" ] )
except :
 pass
try :
 Oo0 = urllib . unquote_plus ( iIIi [ "iconimage" ] )
except :
 pass
try :
 i1Ii1 = urllib . unquote_plus ( iIIi [ "fanart" ] )
except :
 pass
try :
 OO0oo = int ( iIIi [ "mode" ] )
except :
 pass
try :
 iIiI1iIIii11I = eval ( urllib . unquote_plus ( iIIi [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 o0oo = int ( iIIi [ "fav_mode" ] )
except :
 pass
try :
 iI1i1iIII1II = iIIi [ "regexs" ]
except :
 pass
oO000oo00 = ''
try :
 oO000oo00 = urllib . unquote_plus ( iIIi [ "playitem" ] )
except :
 pass
 if 7 - 7: II1i111iI1ii
i1iIii ( "Mode: " + str ( OO0oo ) )
if 43 - 43: Ii - ooo % oo00oOoO0o0o % oo0OoO / ooo
if 93 - 93: OOoOoO0o0o0OO + IiiIIiII
if not IiI is None :
 i1iIii ( "URL: " + str ( IiI . encode ( 'utf-8' ) ) )
i1iIii ( "Name: " + str ( iII1Ii1ii11 ) )
if 88 - 88: oo00oOoO0o0o - OOoOoO0o0o0OO
if not oO000oo00 == '' :
 IiIII111i = oO0OO ( '' , data = oO000oo00 )
 iII1Ii1ii11 , IiI , iI1i1iIII1II = iiii ( IiIII111i , None , dontLink = True )
 OO0oo = 117
if OO0oo == None :
 i1iIii ( "getSources" )
 I1IiI1ii1i1i1 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 __addon__ = xbmcaddon . Addon ( )
 __addonname__ = __addon__ . getAddonInfo ( 'name' )
 if 11 - 11: oO00ooo0o0OO * i11IiI1II % Ooo0OoOo0OOOO - II1iiI1ii1iii - oo00oOoO0o0o
 ooO00 = "El autentico Addon Planeta ya está de vuelta."
 I1I11i1 = "Los que hicimos planeta no estamos de acuerdo"
 oOOoOO0o0 = "con la decisión tomada por uno de los miembros en hacerlo privado."
 if 41 - 41: O00O
 xbmcgui . Dialog ( ) . ok ( __addonname__ , ooO00 , I1I11i1 , oOOoOO0o0 )
 if 13 - 13: O00O / oO00ooo0o0OO - iiiI1iiI1i
elif OO0oo == 1 :
 i1iIii ( "getData" )
 OOOO0 = None
 if 43 - 43: oo00oOoO0o0o + Ii % Ooo0OoOo0OOOO * iiiI1iiI1i / IiiIIiII . Ii
 if iI1i1iIII1II and len ( iI1i1iIII1II ) > 0 :
  OOOO0 , iIIiI1i = O0oO ( iI1i1iIII1II , IiI )
  if 30 - 30: IiiIIiII + oOO / II1iiI1ii1iii + OOoOoO0o0o0OO * O000Ooo0o0OOo
  if 21 - 21: i11IiI1II + IIII - oOO - oOO * Ii * iiiI1iiI1i
  if OOOO0 . startswith ( 'http' ) or OOOO0 . startswith ( 'smb' ) or OOOO0 . startswith ( 'nfs' ) or OOOO0 . startswith ( '/' ) :
   IiI = OOOO0
   OOOO0 = None
   if 12 - 12: O00oo0o * OOoOoO0o0o0OO
   if 79 - 79: iiiI1iiI1i . O0000O * I1Ii
 Oooooo0OO ( IiI , i1Ii1 , OOOO0 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 49 - 49: IIII / II1iiI1ii1iii
 if 81 - 81: oo00oOoO0o0o % i11IiI1II * oo00oOoO0o0o . iiI + IiiIIiII * O0000O
elif OO0oo == 2 :
 i1iIii ( "getChannelItems" )
 I11i1Ii ( iII1Ii1ii11 , IiI , i1Ii1 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 9 - 9: oo0OoO
elif OO0oo == 3 :
 i1iIii ( "getSubChannelItems" )
 OO ( iII1Ii1ii11 , IiI , i1Ii1 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 46 - 46: Ooo0OoOo0OOOO % IiiIIiII / iiiI1iiI1i / II1i111iI1ii % Ooo0OoOo0OOOO
elif OO0oo == 4 :
 i1iIii ( "getFavorites" )
 oo00 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 18 - 18: O000Ooo0o0OOo % Ooo0OoOo0OOOO - I1Ii * iiiI1iiI1i . ooo
elif OO0oo == 5 :
 i1iIii ( "addFavorite" )
 try :
  iII1Ii1ii11 = iII1Ii1ii11 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iII1Ii1ii11 = iII1Ii1ii11 . split ( '  - ' ) [ 0 ]
 except :
  pass
 ii111II1 ( iII1Ii1ii11 , IiI , Oo0 , i1Ii1 , o0oo )
 if 47 - 47: OOoOoO0o0o0OO * I1Ii . oO00ooo0o0OO
elif OO0oo == 6 :
 i1iIii ( "rmFavorite" )
 try :
  iII1Ii1ii11 = iII1Ii1ii11 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iII1Ii1ii11 = iII1Ii1ii11 . split ( '  - ' ) [ 0 ]
 except :
  pass
 I11iI11I1I ( iII1Ii1ii11 )
 if 83 - 83: O0000O - I1Ii / oo00oOoO0o0o
elif OO0oo == 7 :
 SportsDevil ( )
 Dutch ( )
 if 34 - 34: II1iiI1ii1iii + oOO / O0000O + I1Ii % Ooo0OoOo0OOOO
elif OO0oo == 8 :
 i1iIii ( "rmSource" )
 ii ( iII1Ii1ii11 )
 if 80 - 80: oO00ooo0o0OO - iiI
elif OO0oo == 9 :
 i1iIii ( "download_file" )
 ooI1I1 ( iII1Ii1ii11 , IiI )
 if 11 - 11: II1i111iI1ii * IiiIIiII
elif OO0oo == 10 :
 i1iIii ( "getCommunitySources" )
 OooO0OOo0 ( )
 if 12 - 12: iiiI1iiI1i - I1Ii - II1iiI1ii1iii
elif OO0oo == 11 :
 i1iIii ( "addSource" )
 oOoo0o0OoO ( IiI )
 if 3 - 3: I1Ii . IIII % Ooo0OoOo0OOOO
elif OO0oo == 12 :
 i1iIii ( "setResolvedUrl" )
 if not IiI . startswith ( "plugin://plugin" ) or not any ( x in IiI for x in IiI1ii1I11iI ) :
  III11iI1ii11 = True
  if '$$LSDirect$$' in IiI :
   IiI = IiI . replace ( '$$LSDirect$$' , '' )
   III11iI1ii11 = False
  iIiI = xbmcgui . ListItem ( path = IiI )
  if not III11iI1ii11 :
   xbmc . Player ( ) . play ( IiI )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , iIiI )
 else :
  if 78 - 78: O000Ooo0o0OOo % IiiIIiII - oo00oOoO0o0o . oo00oOoO0o0o + IiiIIiII
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + IiI + ')' )
  if 69 - 69: Ooo0OoOo0OOOO - Ii
  if 49 - 49: IiiIIiII % IiiIIiII / II1iiI1ii1iii
elif OO0oo == 13 :
 i1iIii ( "play_playlist" )
 ooooo00o0O ( iII1Ii1ii11 , iIiI1iIIii11I )
 if 5 - 5: oOO / Ooo0OoOo0OOOO
elif OO0oo == 14 :
 i1iIii ( "get_xml_database" )
 ooO0o0oO0o ( IiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 15 - 15: O000Ooo0o0OOo + O00O * ooo / IiiIIiII - Ii
elif OO0oo == 15 :
 i1iIii ( "browse_xml_database" )
 ooO0o0oO0o ( IiI , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 78 - 78: I1Ii
elif OO0oo == 16 :
 i1iIii ( "browse_community" )
 OooO0OOo0 ( IiI , browse = True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 83 - 83: O00O / oo00oOoO0o0o - iiiI1iiI1i / OOoOoO0o0o0OO . ooo
elif OO0oo == 17 or OO0oo == 117 :
 i1iIii ( "getRegexParsed" )
 if 54 - 54: oo00oOoO0o0o . OOoOoO0o0o0OO - Ooo0OoOo0OOOO / Ooo0OoOo0OOOO - II1i111iI1ii . Ooo0OoOo0OOOO
 OOOO0 = None
 if iI1i1iIII1II and 'listrepeat' in urllib . unquote_plus ( iI1i1iIII1II ) :
  I1i1 , Ii11iII1i , i1Ii , iI1i1iIII1II , OOoOOoOo0O0O0 = O0oO ( iI1i1iIII1II , IiI )
  if 6 - 6: oo0OoO . II1i111iI1ii
  o00ooooO00 = ''
  if 23 - 23: II1i111iI1ii + oO00ooo0o0OO
  if 8 - 8: O00O * II1iiI1ii1iii . Ii / I1Ii
  oooOO00o0o0 = i1Ii [ 'name' ]
  IiiIiiIiI1i = iI1i1iIII1II . pop ( oooOO00o0o0 )
  if 90 - 90: O00O . ooo * O0000O . ooo * O00oo0o
  IiI = ''
  import copy
  II1ii1iIiiiI = ''
  I1i = 0
  for o0ooOO00o00o in Ii11iII1i :
   if 50 - 50: I1Ii + I1Ii
   try :
    I1i += 1
    ooiI11ii11i111 = copy . deepcopy ( iI1i1iIII1II )
    if 7 - 7: oOO * ooo * II1iiI1ii1iii
    OO0oO = I1i1
    o0O0Oo00 = 0
    for o0O0Oo00 in range ( len ( o0ooOO00o00o ) ) :
     if 92 - 92: II1iiI1ii1iii * OOoOoO0o0o0OO / OOoOoO0o0o0OO . IiiIIiII % oO00ooo0o0OO - iiI
     if len ( ooiI11ii11i111 ) > 0 :
      for o0oOo0o0oo , O0OOOO0000 in ooiI11ii11i111 . iteritems ( ) :
       if O0OOOO0000 is not None :
        for ii11I1I , iiIiiii11 in O0OOOO0000 . iteritems ( ) :
         if iiIiiii11 is not None :
          if 43 - 43: ooo / O00O
          if 81 - 81: oO00ooo0o0OO + O00oo0o + i11IiI1II + OOoOoO0o0o0OO
          if 4 - 4: O000Ooo0o0OOo * oo0OoO / iiI
          if 33 - 33: IIII * i11IiI1II . O00O + II1iiI1ii1iii + Ii
          if type ( iiIiiii11 ) is dict :
           for o0O000o , OooOO0 in iiIiiii11 . iteritems ( ) :
            if OooOO0 is not None :
             I1iiIi = None
             if isinstance ( o0ooOO00o00o , tuple ) :
              try :
               I1iiIi = o0ooOO00o00o [ o0O0Oo00 ] . decode ( 'utf-8' )
              except :
               I1iiIi = o0ooOO00o00o [ o0O0Oo00 ]
             else :
              try :
               I1iiIi = o0ooOO00o00o . decode ( 'utf-8' )
              except :
               I1iiIi = o0ooOO00o00o
               if 34 - 34: I1Ii
             if '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' in OooOO0 :
              OooOO0 = OooOO0 . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' , unescape ( I1iiIi ) )
             iiIiiii11 [ o0O000o ] = OooOO0 . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + ']' , I1iiIi )
             if 66 - 66: II1i111iI1ii . i11IiI1II + O0000O . oo0OoO - iiI - O0000O
             if 65 - 65: oo00oOoO0o0o + ooo . II1i111iI1ii
          else :
           I1iiIi = None
           if isinstance ( o0ooOO00o00o , tuple ) :
            try :
             I1iiIi = o0ooOO00o00o [ o0O0Oo00 ] . decode ( 'utf-8' )
            except :
             I1iiIi = o0ooOO00o00o [ o0O0Oo00 ]
           else :
            try :
             I1iiIi = o0ooOO00o00o . decode ( 'utf-8' )
            except :
             I1iiIi = o0ooOO00o00o
           if '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' in iiIiiii11 :
            if 63 - 63: oOO . iiiI1iiI1i - oO00ooo0o0OO - IiiIIiII . IIII . I1Ii
            iiIiiii11 = iiIiiii11 . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' , unescape ( I1iiIi ) )
            if 71 - 71: Ooo0OoOo0OOOO * i11IiI1II + O00O / oO00ooo0o0OO + ooo
           O0OOOO0000 [ ii11I1I ] = iiIiiii11 . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + ']' , I1iiIi )
           if 66 - 66: oO00ooo0o0OO + IIII - iiiI1iiI1i
           if 15 - 15: O00oo0o
     I1iiIi = None
     if isinstance ( o0ooOO00o00o , tuple ) :
      try :
       I1iiIi = o0ooOO00o00o [ o0O0Oo00 ] . decode ( 'utf-8' )
      except :
       I1iiIi = o0ooOO00o00o [ o0O0Oo00 ]
     else :
      try :
       I1iiIi = o0ooOO00o00o . decode ( 'utf-8' )
      except :
       I1iiIi = o0ooOO00o00o
     if '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' in OO0oO :
      OO0oO = OO0oO . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + '][DE]' , I1iiIi )
     OO0oO = OO0oO . replace ( '[' + oooOO00o0o0 + '.param' + str ( o0O0Oo00 + 1 ) + ']' , escape ( I1iiIi ) )
     if 46 - 46: iiI - Ooo0OoOo0OOOO * oo00oOoO0o0o
    OO0oO = OO0oO . replace ( '[' + oooOO00o0o0 + '.param' + str ( 0 ) + ']' , str ( I1i ) )
    if 38 - 38: O00oo0o
    try :
     if OOoOOoOo0O0O0 and '[' + oooOO00o0o0 + '.cookies]' in OO0oO :
      OO0oO = OO0oO . replace ( '[' + oooOO00o0o0 + '.cookies]' , oOo0Oo ( OOoOOoOo0O0O0 ) )
    except : pass
    if 13 - 13: IIII % O00oo0o % O000Ooo0o0OOo
    if 27 - 27: O00oo0o / Ii
    if 5 - 5: iiI
    if 97 - 97: Ii
    OoO0oO000o0o = ''
    if 90 - 90: II1i111iI1ii . Ii + Ooo0OoOo0OOOO / O000Ooo0o0OOo
    if len ( ooiI11ii11i111 ) > 0 :
     OoO0oO000o0o = o0O0o0oOoO0 ( ooiI11ii11i111 , 'lsproroot' )
     OoO0oO000o0o = OoO0oO000o0o . split ( '<lsproroot>' ) [ 1 ] . split ( '</lsproroot' ) [ 0 ]
     if 83 - 83: II1iiI1ii1iii - i11IiI1II - oOO * oo0OoO + IIII
     if 48 - 48: IiiIIiII
    try :
     II1ii1iIiiiI += '\n<item>%s\n%s</item>' % ( OO0oO , OoO0oO000o0o )
    except : II1ii1iIiiiI += '\n<item>%s\n%s</item>' % ( OO0oO . encode ( "utf-8" ) , OoO0oO000o0o )
   except : traceback . print_exc ( file = sys . stdout )
   if 88 - 88: IIII * O00O % Ooo0OoOo0OOOO + O00oo0o / iiI . O00oo0o
   if 73 - 73: Ooo0OoOo0OOOO - iiiI1iiI1i / Ii + oO00ooo0o0OO
   if 75 - 75: II1i111iI1ii % iiI % iiI . IiiIIiII * O000Ooo0o0OOo
   if 10 - 10: oo0OoO / oO00ooo0o0OO
   if 27 - 27: oO00ooo0o0OO % Ii % O00O / O00oo0o
  i1iIii ( repr ( II1ii1iIiiiI ) )
  Oooooo0OO ( '' , '' , II1ii1iIiiiI )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 else :
  IiI , iIIiI1i = O0oO ( iI1i1iIII1II , IiI )
  print repr ( IiI ) , iIIiI1i , 'imhere'
  if not ( iI1i1iIII1II and 'notplayable' in iI1i1iIII1II and not IiI ) :
   if IiI :
    if '$PLAYERPROXY$=' in IiI :
     IiI , I11iIoOo0OoOo = IiI . split ( '$PLAYERPROXY$=' )
     print 'proxy' , I11iIoOo0OoOo
     if 36 - 36: oo00oOoO0o0o * oO00ooo0o0OO % O000Ooo0o0OOo / II1iiI1ii1iii / O0000O / oo00oOoO0o0o
     IIiiI1I1 = None
     OOooO = None
     if len ( I11iIoOo0OoOo ) > 0 and '@' in I11iIoOo0OoOo :
      I11iIoOo0OoOo = I11iIoOo0OoOo . split ( ':' )
      IIiiI1I1 = I11iIoOo0OoOo [ 0 ]
      OOooO = I11iIoOo0OoOo [ 1 ] . split ( '@' ) [ 0 ]
      oOooOoooo00O = I11iIoOo0OoOo [ 1 ] . split ( '@' ) [ 1 ]
      III1 = I11iIoOo0OoOo [ 2 ]
     else :
      oOooOoooo00O , III1 = I11iIoOo0OoOo . split ( ':' )
      if 58 - 58: O000Ooo0o0OOo * iiiI1iiI1i % iiI * oo00oOoO0o0o - iiiI1iiI1i
     Ooooo0O0Oo ( IiI , iII1Ii1ii11 , Oo0 , oOooOoooo00O , III1 , IIiiI1I1 , OOooO )
    else :
     o0OoOOoOoo0 ( IiI , iII1Ii1ii11 , Oo0 , iIIiI1i , iI1i1iIII1II )
   else :
    xbmc . executebuiltin ( "XBMC.Notification(Planeta,Failed to extract regex. - " + "this" + ",4000," + OO00Ooo0o + ")" )
elif OO0oo == 18 :
 i1iIii ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Planeta,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 oo0o0ooO = youtubedl . single_YD ( IiI )
 o0OoOOoOoo0 ( oo0o0ooO , iII1Ii1ii11 , Oo0 )
elif OO0oo == 19 :
 i1iIii ( "Genesiscommonresolvers" )
 o0OoOOoOoo0 ( o0oO0oOOo ( IiI ) , iII1Ii1ii11 , Oo0 , True )
 if 49 - 49: O0000O + oO00ooo0o0OO / oOO
elif OO0oo == 21 :
 i1iIii ( "download current file using youtube-dl service" )
 III1iII1iI11 = 'video'
 if '[mp3]' in iII1Ii1ii11 :
  III1iII1iI11 = 'audio'
  iII1Ii1ii11 = iII1Ii1ii11 . replace ( '[mp3]' , '' )
 i11O0OO0 ( '' , iII1Ii1ii11 , III1iII1iI11 )
elif OO0oo == 23 :
 i1iIii ( "get info then download" )
 III1iII1iI11 = 'video'
 if '[mp3]' in iII1Ii1ii11 :
  III1iII1iI11 = 'audio'
  iII1Ii1ii11 = iII1Ii1ii11 . replace ( '[mp3]' , '' )
 i11O0OO0 ( IiI , iII1Ii1ii11 , III1iII1iI11 )
elif OO0oo == 24 :
 i1iIii ( "Audio only youtube download" )
 i11O0OO0 ( IiI , iII1Ii1ii11 , 'audio' )
elif OO0oo == 25 :
 i1iIii ( "Searchin Other plugins" )
 I11i11iii111i ( IiI , iII1Ii1ii11 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif OO0oo == 55 :
 i1iIii ( "enabled lock" )
 O00OOO00 = Oo00O . getSetting ( 'parentalblockedpin' )
 oo0O = xbmc . Keyboard ( '' , 'Enter Pin' )
 oo0O . doModal ( )
 if not ( oo0O . isConfirmed ( ) == False ) :
  IIi1i = oo0O . getText ( )
  if IIi1i == O00OOO00 :
   Oo00O . setSetting ( 'parentalblocked' , "false" )
   xbmc . executebuiltin ( "XBMC.Notification(Planeta,Bloqueo de seguridad desactivado,5000," + OO00Ooo0o + ")" )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Planeta,Perdio el pin??,5000," + OO00Ooo0o + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif OO0oo == 56 :
 i1iIii ( "disable lock" )
 Oo00O . setSetting ( 'parentalblocked' , "true" )
 xbmc . executebuiltin ( "XBMC.Notification(Planeta, bloqueo para adultos activo,5000," + OO00Ooo0o + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 91 - 91: I1Ii
elif OO0oo == 53 :
 i1iIii ( "Requesting JSON-RPC Items" )
 o0O00oO00OOo ( IiI )
 if 25 - 25: i11IiI1II - oo00oOoO0o0o + II1i111iI1ii * oOO . oO00ooo0o0OO
if not IiIiIIII1 == None :
 print 'setting view mode'
 xbmc . executebuiltin ( "Container.SetViewMode(%s)" % IiIiIIII1 )
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')