import base64;exec base64.b64decode('import xbmc , xbmcaddon , xbmcgui , xbmcplugin , os , shutil , urllib2 , urllib , re , extract , downloader , time , socket , net , speedtest
import pyxbmct . addonwindow as pyxbmct
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
net = net . Net ( )
IiIiIIII1 = 'plugin.video.Royale'
ii1i1Ii = xbmcaddon . Addon ( id = IiIiIIII1 )
I1i11iI = xbmcaddon . Addon ( id = IiIiIIII1 )
Ii1iiI1iiI = I1i11iI . getAddonInfo ( 'path' )
oO0 = xbmc . translatePath ( I1i11iI . getAddonInfo ( 'profile' ) )
Ii1Iiii1i = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
if 59 - 59: o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - OOO . i1i1iii1 * oOo
o0oO0oo0OO = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'icon.png' ) )
I1IiI1III11i = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'fanart.jpg' ) )
O0oOooO = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart2.jpg' ) )
oOooOOoOO = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart3.jpg' ) )
oO00ooo0o0OO = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart4.jpg' ) )
iI11I1iiI1i = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart5.jpg' ) )
Iiii = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart6.jpg' ) )
O0000O = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'speedtest.png' ) )
O000Ooo0o0OOo = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'fanart_tools9.jpg' ) )
OoO0oooOoO0 = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'button_focus.png' ) )
OO0O0 = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'button_no_focus.png' ) )
ii1i1ii1I = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'button_install_no_focus.png' ) )
o0o0000O0 = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'button_install_focus3.png' ) )
oO0O0o0ooO = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'arrowup2.png' ) )
i1IiI1iii = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'arrowdown2.png' ) )
iii1II = xbmc . translatePath ( os . path . join ( Ii1iiI1iiI , 'resources' , 'art' , 'listtexture.png' ) )
if 3 - 3: Oo00O0OOoo00o % o0O0oO0 / OOo0000oO / IIIii + I111I11I11111
IIIii1Ii = xbmcgui . Dialog ( )
if 89 - 89: IiO0oOoOOooooO / iiI * I111I * i1Ii1i . OoOO0o0oO0O / oOo
## Create Window (title)
o0OO0o0O = pyxbmct . AddonDialogWindow ( '[COLOR white]Bienvenido al Royale Wizard[/COLOR]' )
if 73 - 73: oOo / I111I
if 50 - 50: IIII
O0OOO = 'https://archive.org/download/DisfrutaMientrasEsperas/Disfruta%20mientras%20esperas.mp3'
if 70 - 70: ii1I1ii1IiIi1 - oOO - OOo0000oO . ii1I1ii1IiIi1 % I111I . I111I11I11111
xbmc . Player ( ) . play ( O0OOO )
if 34 - 34: iiI + I111I
def Iii1I1i ( ) :
 if 90 - 90: i1Ii1i . I111I11I11111
 global BuildsButton
 global WorldAddons
 global Community
 global Community2
 global ToolsButton
 global CloseButton
 global InstallButton
 global lockdownlist
 global lockdownthumb
 global fan
 global InstallButton2
 global worldlist
 global buildtextbox
 global comlist
 global comlist2
 global ClearCache
 global Packages
 global SpeedTest
 global FreshStart
 global cachetextbox
 global packagestextbox
 global iptextbox
 global speedthumb
 global buildsgoup
 global buildsgoup
 global worldgoup
 global communitygoup
 global communitygodown
 global toolsgoup
 if 15 - 15: OoOO0o0oO0O * i1i1iii1 * Ii / I111I11I11111
 if 100 - 100: oooOoO * OOoOoO0o0o0OO
 o0OO0o0O . setGeometry ( 1240 , 650 , 100 , 50 )
 fan = pyxbmct . Image ( O0oOooO )
 o0OO0o0O . placeControl ( fan , 0 , 0 , 101 , 51 )
 if 70 - 70: o00oO0oo0O0O0 + oOo / OOo0000oO
 if 51 - 51: IIII / ii1I1ii1IiIi1
 BuildsButton = pyxbmct . Button ( 'JJMAPA' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 WorldAddons = pyxbmct . Button ( 'AnWizard' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 Community = pyxbmct . Button ( 'Catoal' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 Community2 = pyxbmct . Button ( 'Skins' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 ToolsButton = pyxbmct . Button ( 'Herramientas' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 CloseButton = pyxbmct . Button ( 'Cerrar' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 InstallButton = pyxbmct . Button ( '[B]Instalar[/B]' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 lockdownlist = pyxbmct . List ( buttonFocusTexture = iii1II )
 lockdownthumb = pyxbmct . Image ( o0oO0oo0OO )
 worldlist = pyxbmct . List ( buttonFocusTexture = iii1II )
 comlist = pyxbmct . List ( buttonFocusTexture = iii1II )
 comlist2 = pyxbmct . List ( buttonFocusTexture = iii1II )
 buildtextbox = pyxbmct . Label ( '' , textColor = '0xFFFFFFFF' )
 ClearCache = pyxbmct . Button ( 'Borrar Cache' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 Packages = pyxbmct . Button ( 'Borrar Packages' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 SpeedTest = pyxbmct . Button ( 'Internet Speed' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 FreshStart = pyxbmct . Button ( 'KODI Factory Reset' , focusTexture = OoO0oooOoO0 , noFocusTexture = OO0O0 )
 cachetextbox = pyxbmct . Label ( '[COLOR red]Sin realizar[/COLOR]' , alignment = pyxbmct . ALIGN_CENTER )
 packagestextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_CENTER )
 iptextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_CENTER )
 speedthumb = pyxbmct . Image ( O0000O )
 buildsgoup = pyxbmct . Image ( oO0O0o0ooO )
 worldgoup = pyxbmct . Image ( oO0O0o0ooO )
 communitygoup = pyxbmct . Image ( oO0O0o0ooO )
 communitygodown = pyxbmct . Image ( i1IiI1iii )
 toolsgoup = pyxbmct . Image ( oO0O0o0ooO )
 if 56 - 56: oOo
 if 46 - 46: I111I11I11111 - i1Ii1i - IIIii
 o0OO0o0O . placeControl ( BuildsButton , 102 , 3 , 15 , 9 )
 o0OO0o0O . placeControl ( WorldAddons , 102 , 12 , 15 , 9 )
 o0OO0o0O . placeControl ( Community , 102 , 21 , 15 , 9 )
 o0OO0o0O . placeControl ( Community2 , 10200 , 1 , 15 , 9 )
 o0OO0o0O . placeControl ( ToolsButton , 102 , 30 , 15 , 9 )
 o0OO0o0O . placeControl ( CloseButton , 102 , 39 , 15 , 9 )
 o0OO0o0O . placeControl ( InstallButton , 70 , 16 , 15 , 9 )
 o0OO0o0O . placeControl ( lockdownlist , 55 , 1 , 50 , 15 )
 o0OO0o0O . placeControl ( lockdownthumb , 38 , 35 , 55 , 15 )
 o0OO0o0O . placeControl ( worldlist , 38 , 1 , 60 , 15 )
 o0OO0o0O . placeControl ( comlist , 38 , 1 , 60 , 15 )
 o0OO0o0O . placeControl ( comlist2 , 38 , 1 , 60 , 15 )
 o0OO0o0O . placeControl ( buildtextbox , 61 , 16 , 50 , 10 )
 o0OO0o0O . placeControl ( ClearCache , 35 , 3 , 8 , 9 )
 o0OO0o0O . placeControl ( FreshStart , 35 , 15 , 8 , 9 )
 o0OO0o0O . placeControl ( SpeedTest , 35 , 27 , 8 , 9 )
 o0OO0o0O . placeControl ( Packages , 35 , 39 , 8 , 9 )
 o0OO0o0O . placeControl ( cachetextbox , 42 , 3 , 8 , 9 )
 o0OO0o0O . placeControl ( packagestextbox , 42 , 39 , 8 , 9 )
 o0OO0o0O . placeControl ( iptextbox , 43 , 15 , 8 , 22 )
 o0OO0o0O . placeControl ( speedthumb , 54 , 10 , 43 , 30 )
 o0OO0o0O . placeControl ( buildsgoup , 99 , 4 , 4 , 7 )
 o0OO0o0O . placeControl ( worldgoup , 99 , 13 , 4 , 7 )
 o0OO0o0O . placeControl ( communitygoup , 99 , 22 , 4 , 7 )
 o0OO0o0O . placeControl ( communitygodown , 116 , 22 , 4 , 7 )
 o0OO0o0O . placeControl ( toolsgoup , 99 , 31 , 4 , 7 )
 if 63 - 63: oooOoO - i1Ii1i * oooOoO - ii1I1ii1IiIi1
 if 86 - 86: I111I11I11111
 o0OO0o0O . connect ( BuildsButton , iii1i1iI1 )
 o0OO0o0O . connect ( WorldAddons , OOo0 )
 o0OO0o0O . connect ( Community , O0O )
 o0OO0o0O . connect ( Community2 , Oo )
 o0OO0o0O . connect ( ToolsButton , oOo0oo0 )
 o0OO0o0O . connect ( CloseButton , o0OO0o0O . close )
 o0OO0o0O . connect ( InstallButton , lambda : oOOooo00Oooo ( url ) )
 o0OO0o0O . connect ( ClearCache , Ooo )
 o0OO0o0O . connect ( Packages , oOoii1I1Iii )
 o0OO0o0O . connect ( SpeedTest , o0OoO0o )
 o0OO0o0O . connect ( FreshStart , i1Ii1II )
 if 11 - 11: Oo00O0OOoo00o / OOo0000oO % OoOO0o0oO0O
 if 36 - 36: OOO
 o0OO0o0O . setFocus ( BuildsButton )
 o0OO0o0O . connectEventList (
 [ pyxbmct . ACTION_MOVE_DOWN ,
 pyxbmct . ACTION_MOVE_UP ,
 pyxbmct . ACTION_MOUSE_MOVE ] ,
 ooo0OO )
 if 27 - 27: i1i1iii1 - OoOO0o0oO0O + oOO - i1i1iii1 / IIII
 if 93 - 93: iiI
 BuildsButton . controlRight ( WorldAddons )
 BuildsButton . controlLeft ( CloseButton )
 WorldAddons . controlRight ( Community )
 WorldAddons . controlLeft ( BuildsButton )
 Community2 . controlRight ( ToolsButton )
 Community2 . controlLeft ( WorldAddons )
 Community2 . controlDown ( Community )
 Community2 . controlUp ( comlist2 )
 Community . controlRight ( ToolsButton )
 Community . controlLeft ( WorldAddons )
 Community . controlUp ( comlist )
 if 11 - 11: I111I . I111I11I11111 + Oo00O0OOoo00o - i1Ii1i / IiO0oOoOOooooO
 ToolsButton . controlRight ( CloseButton )
 ToolsButton . controlLeft ( Community )
 CloseButton . controlRight ( BuildsButton )
 CloseButton . controlLeft ( ToolsButton )
 iIII1Ii1iI ( )
 if 62 - 62: I111I + i1i1iii1 . IiO0oOoOOooooO
def iIII1Ii1iI ( ) :
 InstallButton . setVisible ( False )
 lockdownlist . setVisible ( False )
 lockdownthumb . setVisible ( False )
 worldlist . setVisible ( False )
 comlist . setVisible ( False )
 comlist2 . setVisible ( False )
 buildtextbox . setVisible ( False )
 ClearCache . setVisible ( False )
 Packages . setVisible ( False )
 SpeedTest . setVisible ( False )
 FreshStart . setVisible ( False )
 cachetextbox . setVisible ( False )
 packagestextbox . setVisible ( False )
 iptextbox . setVisible ( False )
 speedthumb . setVisible ( False )
 buildsgoup . setVisible ( False )
 worldgoup . setVisible ( False )
 communitygoup . setVisible ( False )
 communitygodown . setVisible ( False )
 toolsgoup . setVisible ( False )
 if 86 - 86: oOo % ii1I1ii1IiIi1 - OOo0000oO . oOo % Ii * IIII
def o0OoO0o ( ) :
 oO = speedtest . speedtest ( )
 speedthumb . setImage ( oO [ 0 ] )
 if 6 - 6: OOo0000oO % oooOoO . OOO % o0O0oO0
def oOo0oo0 ( ) :
 iIII1Ii1iI ( )
 fan . setImage ( O000Ooo0o0OOo )
 ClearCache . setVisible ( True )
 Packages . setVisible ( True )
 SpeedTest . setVisible ( True )
 FreshStart . setVisible ( True )
 cachetextbox . setVisible ( True )
 packagestextbox . setVisible ( True )
 iptextbox . setVisible ( True )
 speedthumb . setVisible ( True )
 toolsgoup . setVisible ( True )
 o0O0ooo0o00 = Ii1I1I ( Ii1Iiii1i )
 packagestextbox . setLabel ( o0O0ooo0o00 )
 Iii111i = 1
 ooO00OoOOoO = re . compile ( "<td width='80'>(.+?)</td><td>(.+?)</td><td>(.+?)</td><td>.+?</td><td>(.+?)</td>" ) . findall ( net . http_GET ( 'http://www.iplocation.net/' ) . content )
 for iII , O0O0oO , OOo0oo , i1ii1 in ooO00OoOOoO :
  if Iii111i < 2 :
   iI1111I = '[COLOR white]Su ip es: ' + iII + '\n' + 'Su ip esta basada en: ' + OOo0oo + '[/COLOR]'
   iptextbox . setLabel ( iI1111I )
  Iii111i = Iii111i + 1
 ToolsButton . controlUp ( ClearCache )
 ClearCache . controlDown ( ToolsButton )
 ClearCache . controlLeft ( Packages )
 ClearCache . controlRight ( FreshStart )
 FreshStart . controlDown ( ToolsButton )
 FreshStart . controlLeft ( ClearCache )
 FreshStart . controlRight ( SpeedTest )
 SpeedTest . controlDown ( ToolsButton )
 SpeedTest . controlLeft ( FreshStart )
 SpeedTest . controlRight ( Packages )
 Packages . controlDown ( ToolsButton )
 Packages . controlLeft ( SpeedTest )
 Packages . controlRight ( ClearCache )
 if 22 - 22: IIIii / i1Ii1i
def Oo ( ) :
 iIII1Ii1iI ( )
 if 9 - 9: oOo + Oo00O0OOoo00o . i1Ii1i % OOo0000oO . I111I11I11111
 communitygoup . setVisible ( True )
 fan . setImage ( iI11I1iiI1i )
 comlist2 . reset ( )
 lockdownthumb . setVisible ( True )
 InstallButton . setVisible ( True )
 buildtextbox . setVisible ( True )
 comlist2 . setVisible ( True )
 lockdownthumb . setImage ( o0oO0oo0OO )
 O0OOo0oo00O0O = net . http_GET ( 'http://openloadmovies.net/' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooO00OoOOoO = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O )
 for O0OOO0o in ooO00OoOOoO :
  O0OOO0o = '[COLOR white]' + O0OOO0o + '[/COLOR]'
  comlist2 . addItem ( O0OOO0o )
 comlist2 . controlDown ( Community )
 comlist2 . controlLeft ( Community )
 if 25 - 25: o00oO0oo0O0O0 - o00oO0oo0O0O0
def O0O ( ) :
 iIII1Ii1iI ( )
 if 54 - 54: OOoOoO0o0o0OO - OOO - OOo0000oO % o00oO0oo0O0O0
 communitygoup . setVisible ( True )
 fan . setImage ( iI11I1iiI1i )
 comlist . reset ( )
 lockdownthumb . setVisible ( True )
 InstallButton . setVisible ( True )
 buildtextbox . setVisible ( True )
 comlist . setVisible ( True )
 lockdownthumb . setImage ( o0oO0oo0OO )
 O0OOo0oo00O0O = net . http_GET ( 'https://raw.githubusercontent.com/Carlesto/Instalador-v3/master/catoalwizard.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooO00OoOOoO = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O )
 for O0OOO0o in ooO00OoOOoO :
  O0OOO0o = '[COLOR white]' + O0OOO0o + '[/COLOR]'
  comlist . addItem ( O0OOO0o )
 comlist . controlDown ( Community )
 comlist . controlLeft ( Community )
 if 21 - 21: IiO0oOoOOooooO * o00oO0oo0O0O0 . Ii
def iii1i1iI1 ( ) :
 iIII1Ii1iI ( )
 fan . setImage ( oOooOOoOO )
 lockdownlist . reset ( )
 lockdownlist . setVisible ( True )
 lockdownthumb . setVisible ( True )
 InstallButton . setVisible ( True )
 worldlist . setVisible ( False )
 buildtextbox . setVisible ( True )
 buildsgoup . setVisible ( True )
 lockdownthumb . setImage ( o0oO0oo0OO )
 O0OOo0oo00O0O = net . http_GET ( 'https://pastebin.com/raw/s96CXqEK' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooO00OoOOoO = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O )
 for O0OOO0o in ooO00OoOOoO :
  O0OOO0o = '[COLOR white]' + O0OOO0o + '[/COLOR]'
  lockdownlist . addItem ( O0OOO0o )
 BuildsButton . controlUp ( lockdownlist )
 lockdownlist . controlDown ( BuildsButton )
 lockdownlist . controlLeft ( BuildsButton )
 if 78 - 78: iiI + i1i1iii1 - oOO
def OOo0 ( ) :
 iIII1Ii1iI ( )
 fan . setImage ( oO00ooo0o0OO )
 worldlist . reset ( )
 worldlist . setVisible ( True )
 lockdownthumb . setVisible ( True )
 InstallButton . setVisible ( True )
 buildtextbox . setVisible ( True )
 worldgoup . setVisible ( True )
 lockdownthumb . setImage ( o0oO0oo0OO )
 O0OOo0oo00O0O = net . http_GET ( 'https://raw.githubusercontent.com/Carlesto/Instalador-v3/master/Anwizart/AnWizard.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooO00OoOOoO = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O )
 for O0OOO0o in ooO00OoOOoO :
  O0OOO0o = '[COLOR white]' + O0OOO0o + '[/COLOR]'
  worldlist . addItem ( O0OOO0o )
 WorldAddons . controlUp ( worldlist )
 worldlist . controlDown ( WorldAddons )
 worldlist . controlLeft ( WorldAddons )
 if 32 - 32: Ii . ii1I1ii1IiIi1 / OOo0000oO % OoOO0o0oO0O / oooOoO * Oo00O0OOoo00o
def ooo0OO ( ) :
 global url
 try :
  if o0OO0o0O . getFocus ( ) == lockdownlist :
   oO000oOO00oo0 = lockdownlist . getSelectedPosition ( )
   O0OOo0oo00O0O = net . http_GET ( 'https://pastebin.com/raw/s96CXqEK' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   iI = re . compile ( 'img="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   lockdownthumb . setImage ( iI )
   url = re . compile ( 'url="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   O0OOO0o = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   buildtextbox . setLabel ( O0OOO0o )
   lockdownlist . controlRight ( InstallButton )
   InstallButton . controlLeft ( lockdownlist )
  elif o0OO0o0O . getFocus ( ) == worldlist :
   oO000oOO00oo0 = worldlist . getSelectedPosition ( )
   O0OOo0oo00O0O = net . http_GET ( 'https://raw.githubusercontent.com/Carlesto/Instalador-v3/master/Anwizart/AnWizard.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   oOOOO00 = re . compile ( 'img="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   lockdownthumb . setImage ( oOOOO00 )
   url = re . compile ( 'url="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   O0OOO0o = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   buildtextbox . setLabel ( O0OOO0o )
   worldlist . controlRight ( InstallButton )
   InstallButton . controlLeft ( worldlist )
  elif o0OO0o0O . getFocus ( ) == comlist :
   oO000oOO00oo0 = comlist . getSelectedPosition ( )
   O0OOo0oo00O0O = net . http_GET ( 'https://raw.githubusercontent.com/Carlesto/Instalador-v3/master/catoalwizard.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   IiIiI = re . compile ( 'img="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   lockdownthumb . setImage ( IiIiI )
   url = re . compile ( 'url="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   O0OOO0o = re . compile ( 'name="(.+?)"' ) . findall ( O0OOo0oo00O0O ) [ oO000oOO00oo0 ]
   buildtextbox . setLabel ( O0OOO0o )
   comlist . controlRight ( InstallButton )
   InstallButton . controlLeft ( comlist )
  elif o0OO0o0O . getFocus ( ) == comlist2 :
   oO000oOO00oo0 = comlist2 . getSelectedPosition ( )
   O0OOO0o = com2name [ oO000oOO00oo0 ]
   url = com2url [ oO000oOO00oo0 ]
   Ii1II11IiI = com2thumb [ oO000oOO00oo0 ]
   lockdownthumb . setImage ( Ii1II11IiI )
   O0OOO0o = '[COLOR grey]' + O0OOO0o + '[/COLOR]'
   buildtextbox . setLabel ( O0OOO0o )
   comlist2 . controlRight ( InstallButton )
   InstallButton . controlLeft ( comlist2 )
  else : pass
 except : pass
 if 93 - 93: OoOO0o0oO0O . oOO
def oOOooo00Oooo ( url ) :
 oo0ooooO0O0 = IIIii1Ii . yesno ( '[COLOR lime]Royale[/COLOR]' , 'Para una actualizacion exitosa' , 'Asegurese de que ha borrado los datos primero ' , 'Desea continuar?' , 'Cancelar' , 'Continuar' )
 if oo0ooooO0O0 == 1 :
  O000O0OoOo = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
  OoOO0OO0o0O = xbmcgui . DialogProgress ( )
  OoOO0OO0o0O . create ( "[COLOR lime]Royale[/COLOR]" , "Descargando..." , '' , 'Espere por favor' )
  IIiiII111i = os . path . join ( O000O0OoOo , 'download.zip' )
  try :
   os . remove ( IIiiII111i )
  except :
   pass
  downloader . download ( url , IIiiII111i , OoOO0OO0o0O )
  iiI1I1Ii11i1I = xbmc . translatePath ( os . path . join ( 'special://' , 'home' ) )
  OoOO0OO0o0O . update ( 0 , "" , "[COLOR white]Instalando...[/COLOR]" )
  extract . all ( IIiiII111i , iiI1I1Ii11i1I , OoOO0OO0o0O )
  try :
   os . remove ( IIiiII111i )
  except :
   pass
  Ii11i1 ( )
 else : quit ( )
 if 91 - 91: Ii * oOo
def Ii11i1 ( ) :
 I11IIii1I = I1i11i1I1iIi ( )
 if I11IIii1I == 'osx' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall -9 XBMC' )
  except : pass
  try : os . system ( 'killall -9 Kodi' )
  except : pass
  IIIii1Ii . ok ( "[COLOR lime]Royale[/COLOR]" , "Preparando configuracion" , "[COLOR RED]DESCONECTE POR FAVOR LA CORRIENTE DE SU DISPOSITIVO[/COLOR]" )
 elif I11IIii1I == 'linux' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall XBMC' )
  except : pass
  try : os . system ( 'killall Kodi' )
  except : pass
  try : os . system ( 'killall -9 xbmc.bin' )
  except : pass
  try : os . system ( 'killall -9 kodi.bin' )
  except : pass
  IIIii1Ii . ok ( "[COLOR white]Royale[/COLOR]" , "Preparando configuracion" , "[COLOR white]DESCONECTE POR FAVOR LA CORRIENTE DE SU DISPOSITIVO[/COLOR]" )
 elif I11IIii1I == 'android' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc' )
  except : pass
  try : os . system ( 'adb shell am force-stop com.semperpax.spmc' )
  except : pass
  IIIii1Ii . ok ( "[COLOR lime]Royale[/COLOR]" , "Preparando configuracion" , "[COLOR RED]DESCONECTE POR FAVOR LA CORRIENTE DE SU DISPOSITIVO[/COLOR]" )
 elif I11IIii1I == 'windows' :
  try : os . _exit ( 1 )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except : pass
  IIIii1Ii . ok ( "[COLOR lime]Royale[/COLOR]" , "Preparando configuracion" , "[COLOR RED]DESCONECTE POR FAVOR LA CORRIENTE DE SU DISPOSITIVO[/COLOR]" )
 else :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall AppleTV' )
  except : pass
  try : os . system ( 'sudo initctl stop kodi' )
  except : pass
  try : os . system ( 'sudo initctl stop xbmc' )
  except : pass
  IIIii1Ii . ok ( "[COLOR lime]Royale[/COLOR]" , "Preparando configuracion" , "[COLOR RED]DESCONECTE POR FAVOR LA CORRIENTE DE SU DISPOSITIVO[/COLOR]" )
  if 72 - 72: iiI % OOO / i1Ii1i . OoOO0o0oO0O + i1i1iii1 - iiI
def I1i11i1I1iIi ( ) :
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  return 'android'
 elif xbmc . getCondVisibility ( 'system.platform.linux' ) :
  return 'linux'
 elif xbmc . getCondVisibility ( 'system.platform.windows' ) :
  return 'windows'
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  return 'osx'
 elif xbmc . getCondVisibility ( 'system.platform.atv2' ) :
  return 'atv2'
 elif xbmc . getCondVisibility ( 'system.platform.ios' ) :
  return 'ios'
  if 95 - 95: OOoOoO0o0o0OO % IIIii / OoOO0o0oO0O
def Ii1I1I ( path ) :
 global total_files
 global total_size
 total_size = 0
 total_files = 0
 for OOooooo0OOO0O , oOO0 , OO0Ooo0o0 in os . walk ( path ) :
  for o0O0OO0 in OO0Ooo0o0 :
   O00Oo = os . path . join ( OOooooo0OOO0O , o0O0OO0 )
   total_size += os . path . getsize ( O00Oo )
   total_files = total_files + 1
 total_size = float ( total_size / 1024 ) / float ( 1024 )
 total_size = format ( total_size , '.2f' )
 total_size = str ( total_size ) + 'mb'
 total_size = '[COLOR white]' + total_size + '[/COLOR]'
 return total_size
 if 14 - 14: oOo / IIII . I111I11I11111
def i1Ii1II ( ) :
 IIIii1Ii = xbmcgui . Dialog ( )
 oo0ooooO0O0 = IIIii1Ii . yesno ( '[COLOR lime]Royale[/COLOR]' , '[COLOR gold]Esto elimina todo el contenido de KODI[/COLOR]' , '[COLOR yellow]Estas seguro de continuar?[/COLOR]' , '' , 'NO' , 'SI' )
 if oo0ooooO0O0 == 1 :
  iiiiiiii1 = xbmcaddon . Addon ( id = IiIiIIII1 ) . getAddonInfo ( 'path' )
  iiiiiiii1 = xbmc . translatePath ( iiiiiiii1 )
  IiII = os . path . join ( iiiiiiii1 , ".." , ".." ) ;
  IiII = os . path . abspath ( IiII )
  for oO0OO , i1II1 , iiIiIiiiI in os . walk ( IiII , topdown = False ) :
   for O0OOO0o in iiIiIiiiI :
    try : os . remove ( os . path . join ( oO0OO , O0OOO0o ) )
    except : pass
   for O0OOO0o in i1II1 :
    try : os . rmdir ( os . path . join ( oO0OO , O0OOO0o ) )
    except : pass
  IIIii1Ii . ok ( '[COLOR lime]Royale[/COLOR]' , '[COLOR gol]KODI esta limpio[/COLOR]' , '[COLOR red]Cierra KODI para que haga efecto[/COLOR]' )
 else :
  IIIii1Ii . ok ( '[COLOR lime]Royale[/COLOR]' , '[COLOR gol]Factory Reset Cancelado[/COLOR]' , '[COLOR red]No se ha cambiado nada[/COLOR]' )
  quit ( )
  if 2 - 2: I111I . IiO0oOoOOooooO + o00oO0oo0O0O0 . oOO
def Ooo ( ) :
 o0oO = os . path . join ( xbmc . translatePath ( 'special://home' ) , 'cache' )
 if os . path . exists ( o0oO ) == True :
  for oO0OO , i1II1 , iiIiIiiiI in os . walk ( o0oO ) :
   Iii = 0
   Iii += len ( iiIiIiiiI )
   if Iii > 0 :
    for o0O0OO0 in iiIiIiiiI :
     try :
      os . unlink ( os . path . join ( oO0OO , o0O0OO0 ) )
     except :
      pass
    for OO0O000oooOOO in i1II1 :
     try :
      shutil . rmtree ( os . path . join ( oO0OO , OO0O000oooOOO ) )
     except :
      pass
   else :
    pass
 if xbmc . getCondVisibility ( 'system.platform.ATV2' ) :
  II1iiiiI = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
  for oO0OO , i1II1 , iiIiIiiiI in os . walk ( II1iiiiI ) :
   Iii = 0
   Iii += len ( iiIiIiiiI )
   if Iii > 0 :
    for o0O0OO0 in iiIiIiiiI :
     os . unlink ( os . path . join ( oO0OO , o0O0OO0 ) )
    for OO0O000oooOOO in i1II1 :
     shutil . rmtree ( os . path . join ( oO0OO , OO0O000oooOOO ) )
   else :
    pass
  iiii111 = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' )
  for oO0OO , i1II1 , iiIiIiiiI in os . walk ( iiii111 ) :
   Iii = 0
   Iii += len ( iiIiIiiiI )
   if Iii > 0 :
    for o0O0OO0 in iiIiIiiiI :
     os . unlink ( os . path . join ( oO0OO , o0O0OO0 ) )
    for OO0O000oooOOO in i1II1 :
     shutil . rmtree ( os . path . join ( oO0OO , OO0O000oooOOO ) )
   else :
    pass
 IIIii1Ii = xbmcgui . Dialog ( )
 cachetextbox . setLabel ( '[COLOR white]Completado[/COLOR]' )
 if 58 - 58: IIIii
def oOoii1I1Iii ( ) :
 i11i1iII = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
 for oO0OO , i1II1 , iiIiIiiiI in os . walk ( i11i1iII ) :
  Iii = 0
  Iii += len ( iiIiIiiiI )
  if Iii > 0 :
   for o0O0OO0 in iiIiIiiiI :
    os . unlink ( os . path . join ( oO0OO , o0O0OO0 ) )
   for OO0O000oooOOO in i1II1 :
    shutil . rmtree ( os . path . join ( oO0OO , OO0O000oooOOO ) )
   packagestextbox . setLabel ( '[COLOR white]Completado[/COLOR]' )
  else : packagestextbox . setLabel ( '[COLOR white]Completado[/COLOR]' )
  if 57 - 57: I111I11I11111 + oOO * IIII % OOo0000oO
Iii1I1i ( )
o0OO0o0O . doModal ( )
if 77 - 77: OOoOoO0o0o0OO * o0O0oO0
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')